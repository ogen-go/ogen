{{ define "security" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ template "header" $ }}
{{- if $.Securities }}

{{- if $.PathsServerEnabled }}
// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
{{- range $name, $s := $.Securities }}
	// Handle{{ $s.Type.Name }} handles {{ $name }} security.
	{{- template "godoc" $s.GoDoc }}
	Handle{{ $s.Type.Name }}(ctx context.Context, operationName string, t {{ $s.Type.Name }}) (context.Context, error)
{{- end }}
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

{{ range $s := $.Securities }}
{{- if $s.Format.IsOAuth2Security }}
var oauth2Scopes = map[string][]string {
{{- range $operationName, $scopes := $s.Scopes }}
	{{ quote $operationName }}: []string{
		{{- range $scope := $scopes }}
			{{ quote $scope }},
		{{- end}}
	},
{{- end }}
}

{{- end }}
func (s *{{ $.InternalPrefix }}Server) security{{ $s.Type.Name }}(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t {{ $s.Type.Name }}
	{{- if $s.Format.IsAPIKeySecurity }}
        const parameterName = {{ quote $s.ParameterName }}
		{{- if $s.Kind.IsHeader }}
		value := req.Header.Get(parameterName)
		if value == "" {
			return ctx, false, nil
		}
		{{- else if $s.Kind.IsQuery }}
		q := req.URL.Query()
		if !q.Has(parameterName) {
			return ctx, false, nil
		}
		value := q.Get(parameterName)
        {{- else if $s.Kind.IsCookie }}
	    var value string
		switch cookie, err := req.Cookie(parameterName); err {
		case nil:
			value = cookie.Value
		case http.ErrNoCookie:
			return ctx, false, nil
		default:
			return nil, false, err
		}
		{{- else }}
            {{ errorf "unexpected security %q:%q" $s.Kind $s.Format }}
		{{- end }}
		t.APIKey = value
    {{- else if $s.Format.IsBasicHTTPSecurity }}
		if _, ok := findAuthorization(req.Header, "Basic"); !ok {
			return ctx, false, nil
		}
		username, password, ok := req.BasicAuth()
		if !ok {
			return nil, false, errors.New("invalid basic auth")
		}
		t.Username = username
		t.Password = password
	{{- else if $s.Format.IsBearerSecurity }}
		token, ok := findAuthorization(req.Header, "Bearer")
		if !ok {
			return ctx, false, nil
		}
		t.Token = token
	{{- else if $s.Format.IsOAuth2Security }}
		token, ok := findAuthorization(req.Header, "Bearer")
		if !ok {
			return ctx, false, nil
		}
		t.Token = token
		t.Scopes = oauth2Scopes[operationName]
	{{- else }}
        {{ errorf "unexpected security %q:%q" $s.Kind $s.Format }}
	{{- end }}
	rctx, err := s.sec.Handle{{ $s.Type.Name }}(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
{{- end }}
{{- end }}

{{- if $.PathsClientEnabled }}
// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
{{- range $name, $s := $.Securities }}
	// {{ $s.Type.Name }} provides {{ $name }} security value.
	{{- template "godoc" $s.GoDoc }}
    {{ $s.Type.Name }}(ctx context.Context, operationName string) ({{ $s.Type.Name }}, error)
{{- end }}
}

{{- range $s := $.Securities }}
func (s *{{ $.InternalPrefix }}Client) security{{ $s.Type.Name }}(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.{{ $s.Type.Name }}(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, {{ printf "security source %q" $s.Type.Name | quote }})
	}
	{{- if $s.Format.IsAPIKeySecurity }}
		{{- if $s.Kind.IsHeader }}
		req.Header.Set({{ quote $s.ParameterName }}, t.APIKey)
		{{- else if $s.Kind.IsQuery }}
		q := req.URL.Query()
		q.Set({{ quote $s.ParameterName }}, t.APIKey)
		req.URL.RawQuery = q.Encode()
        {{- else if $s.Kind.IsCookie }}
		req.AddCookie(&http.Cookie{
			Name: {{ quote $s.ParameterName }},
			Value: t.APIKey,
		})
		{{- else }}
            {{ errorf "unexpected security %q:%q" $s.Kind $s.Format }}
		{{- end }}
    {{- else if $s.Format.IsBasicHTTPSecurity }}
		req.SetBasicAuth(t.Username, t.Password)
	{{- else if $s.Format.IsBearerSecurity }}
		req.Header.Set("Authorization", "Bearer " + t.Token)
	{{- else if $s.Format.IsOAuth2Security }}
		req.Header.Set("Authorization", "Bearer " + t.Token)
	{{- else }}
        {{ errorf "unexpected security %q:%q" $s.Kind $s.Format }}
	{{- end }}
	return nil
}
{{- end }}
{{- end }}

{{- end }}
{{ end }}

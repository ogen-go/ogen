{{- /*gotype: github.com/ogen-go/ogen/gen/ir.Type*/ -}}
{{- define "schema/sum" }}
// {{ $.Name }} represents sum type.
type {{ $.Name }} struct {
	Type {{ $.Name }}TypeEnum // switch on this field
	{{- range $s := $.SumOf }}
		{{ $s.Name }} {{ $s.Go }}
	{{- end }}
}

// {{ $.Name }}TypeEnum is oneOf type of {{ $.Name }}.
type {{ $.Name }}TypeEnum string

// Possible values for {{ $.Name }}TypeEnum.
const (
	{{- range $s := $.SumOf }}
	{{- $m := $.SumSpec.PickMappingEntryFor $s }}
	{{- if $m }}
	{{- /* try to use mapping key if the entry for $s is defined */}}
	{{ $s.Name }}{{ $.Name }} {{ $.Name }}TypeEnum = {{ quote $m.Key }}
	{{- else }}
	{{- /* otherwise fallback to SumOf Type name */}}
	{{ $s.Name }}{{ $.Name }} {{ $.Name }}TypeEnum = {{ quote $s.Go }}
	{{- end }}
	{{- end }}
)

{{- range $s := $.SumOf }}
// Is{{ $s.Name }} reports whether {{ $.Name }} is {{ $s.Go }}.
func (s {{ $.ReadOnlyReceiver }}) Is{{ $s.Name }}() bool { return s.Type == {{ $s.Name }}{{ $.Name }} }
{{- end }}

{{- range $s := $.SumOf }}
// Set{{ $s.Name }} sets {{ $.Name }} to {{ $s.Go }}.
func (s *{{ $.Go }}) Set{{ $s.Name }}(v {{ $s.Go }}) {
	s.Type = {{ $s.Name }}{{ $.Name }}
	s.{{ $s.Name }} = v
}

// Get{{ $s.Name }} returns {{ $s.Go }} and true boolean if {{ $.Go }} is {{ $s.Go }}.
func (s {{ $.ReadOnlyReceiver }}) Get{{ $s.Name }}()(v {{ $s.Go }}, ok bool) {
	if !s.Is{{ $s.Name }}() {
		return v, false
	}
	return s.{{ $s.Name }}, true
}

// New{{ $s.Name }}{{ $.Name }} returns new {{ $.Go }} from {{ $s.Go }}.
func New{{ $s.Name }}{{ $.Name }}(v {{ $s.Go }}) {{ $.Go }} {
	var s {{ $.Name }}
	s.Set{{ $s.Name }}(v)
	return s
}
{{- end }}

{{ end }}

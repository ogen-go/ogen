{{- define "validate" }}
	{{- /*gotype: github.com/ogen-go/ogen/gen.Elem*/ -}}
	{{- $t := $.Type }}
	{{- $va := $t.Validators }}
	{{- $validated := false }}
	{{- if $t.NilSemantic.Invalid }}
        {{- $validated = true }}
		if {{ $.Var }} == nil {
			return errors.New("nil is invalid value")
		}
	{{- end }}
	{{- if and ($t.IsGeneric) ($t.GenericOf.NeedValidation) }}
        {{- $validated = true }}
        {{- if $t.GenericVariant.Optional }}
			if {{ $.Var }}.Set {
				if err := func() error {
            		{{- template "validate" elem $t.GenericOf (printf "%s.Value" $.Var) }}
				}(); err != nil {
					return err
				}
			}      
			return nil // return 2
        {{- else }}
            {{- template "validate" elem $t.GenericOf (printf "%s.Value" $.Var) }}
        {{- end }}
	{{- end }}
	{{- if and ($t.IsPointer) ($t.PointerTo.NeedValidation) -}}
        {{- $validated = true }}
		if {{ $.Var }} == nil {
			return nil // {{ $t.NilSemantic }}
		}
		if err := func() error {
        	{{- template "validate" elem $t.PointerTo $.Var }}
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
	{{- end -}}
	{{- if or ($t.IsStruct) ($t.IsMap) ($t.IsAlias) ($t.IsEnum) ($t.IsSum) }}
	{{- $validated = true }}
	if err := {{ $.Var }}.Validate(); err != nil {
		return err
	}
	{{- else if $t.IsArray }}
	{{- if $va.Array.Set }}
	{{- $validated = true }}
		{{- $v := $va.Array }}
		if err := (validate.Array{
			MinLength:	{{ $v.MinLength }},
			MinLengthSet: {{ $v.MinLengthSet }},
			MaxLength:	{{ $v.MaxLength }},
			MaxLengthSet: {{ $v.MaxLengthSet }},
		}).ValidateLength(len({{ $.Var }})); err != nil {
			return errors.Wrap(err, "array")
		}
	{{- end }}
	{{- if $t.Item.NeedValidation }}
	var failures []validate.FieldError
	{{- $validated = true }}
	for i, elem := range {{ $.Var }} {
		if err := func() error {
			{{- template "validate" array_elem $.Type.Item }}
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	{{- end }}
	{{- else }}
	{{- if $va.String.Set }}
	{{- $validated = true }}
		{{- $v := $va.String }}
		if err := (validate.String{
			MinLength:      {{ $v.MinLength }},
			MinLengthSet:   {{ $v.MinLengthSet }},
			MaxLength:      {{ $v.MaxLength }},
			MaxLengthSet:   {{ $v.MaxLengthSet }},
			Email:          {{ $v.Email }},
			Hostname:       {{ $v.Hostname }},
			{{- if $v.Regex }}
			Regex:          regexMap[{{ quote $v.Regex }}],
            {{- else }}
			Regex:          nil,
			{{- end }}
		}).Validate(string({{ $.Var }})); err != nil {
			return errors.Wrap(err, "string")
		}
	{{- end }}
	{{- if $va.Int.Set }}
	{{- $validated = true }}
		{{- $v := $va.Int }}
		if err := (validate.Int{
			MinSet:       {{ $v.MinSet }},
			Min:          {{ $v.Min }},
			MaxSet:       {{ $v.MaxSet }},
			Max:          {{ $v.Max }},
			MinExclusive: {{ $v.MinExclusive }},
			MaxExclusive: {{ $v.MaxExclusive }},
			MultipleOfSet:{{ $v.MultipleOfSet }},
			MultipleOf:   {{ $v.MultipleOf }},
		}).Validate(int64({{ $.Var }})); err != nil {
			return errors.Wrap(err, "int")
		}
	{{- end }}
    {{- if $t.IsFloat }}
    {{- $validated = true }}
		{{- $v := $va.Float }}
		if err := (validate.Float{ {{ if $v.Set }}
			MinSet:       {{ $v.MinSet }},
			Min:          {{ $v.Min }},
			MaxSet:       {{ $v.MaxSet }},
			Max:          {{ $v.Max }},
			MinExclusive: {{ $v.MinExclusive }},
			MaxExclusive: {{ $v.MaxExclusive }},
			MultipleOfSet:{{ $v.MultipleOfSet }},
			{{- if $v.MultipleOf }}
			MultipleOf: ratMap[{{ quote $v.MultipleOf }}],
            {{- else }}
			MultipleOf: nil,
			{{- end }}
		{{ end }} }).Validate(float64({{ $.Var }})); err != nil {
			return errors.Wrap(err, "float")
		}
    {{- end }}
    {{- end }}
	{{- if not $validated }}
	{{ errorf "validation expected %s" $t }}
	{{- end }}
	return nil // return 1
{{- end }}

{{ define "validators/body" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{- range $t := $.Types }}{{/*Range schemas*/}}
{{- if $t.NeedValidation }}{{/*Need validation*/}}
{{- if $t.IsStruct }}{{/*If struct*/}}
func (s {{ $t.Name }}) Validate() error {
	var failures []validate.FieldError
	{{- range $f := $t.Fields }}{{/*Range fields*/}}
	{{- if $f.Type.NeedValidation }}
		if err := func() error {
			{{- template "validate" field_elem $f }}
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name: {{ quote $f.ValidationName }},
				Error: err,
			})
		}
	{{- end }}
	{{- end }}{{/*Range fields*/}}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
{{- else if $t.IsMap }}
func (s {{ $t.Name }}) Validate() error {
	var failures []validate.FieldError

	{{- if $t.Item.NeedValidation }}
	for key, elem := range s {
		if err := func() error {
			{{- template "validate" map_elem $t.Item }}
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}
	{{- end }}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
{{- else if $t.IsAlias }}
func (s {{ $t.Name }}) Validate() error {
	{{- template "validate" elem $t.AliasTo "s" }}
}
{{- else if $t.IsSum }}
func (s {{ $t.Name }}) Validate() error {
	switch s.Type {
	{{- range $s := $t.SumOf }}
		case {{ $s.Name }}{{ $t.Name }}:
		{{- if $s.NeedValidation }}
		{{- template "validate" elem $s (printf "s.%s" $s.Name) -}}
		{{- else }}
		return nil // no validation needed
		{{- end }}
	{{- end }}
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}
{{ else if $t.IsGeneric }}
{{/* Handled in-place */}}
{{ else if $t.IsEnum }}
func (s {{ $t.Name }}) Validate() error {
switch s {
{{- range $v := $t.EnumVariants }}
	case {{ $v.ValueGo }}: return nil
{{- end }}
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
{{- else }}
{{ errorf "expected Validate() error implementation for %s" $t }}
{{- end }}
{{- end }}
{{- end }}{{/*Range schemas*/}}

{{ end }}

{{ define "validators" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{ template "validators/body" $ }}

{{ end }}

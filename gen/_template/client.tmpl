{{ define "client" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- if $.ServerEnabled }}
{{- if $.Error }}
type errorHandler interface {
	NewError(ctx context.Context, err error) {{ $.ErrorType.Go }}
}
{{- end }}
var _ Handler = struct{
	{{ if $.Error }}errorHandler{{- end }}
	*Client
}{}
{{- end }}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	{{- if $.Securities }}
	sec 	  SecuritySource
	{{- end }}
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, {{- if $.Securities }}sec SecuritySource,{{- end }} opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c, err := newConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL: u,
		{{- if $.Securities }}
		sec: sec,
		{{- end }}
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

{{ range $op := $.Operations }}
	{{ template "client/operation" $op }}
{{ end }}

{{ end }}

{{ define "client/operation" }}
{{- /*gotype: github.com/ogen-go/ogen/gen/ir.Operation*/ -}}{{ $op := $ }}
// {{ $op.Name }} invokes {{ $op.PrettyOperationID }} operation.
//
{{- template "godoc_def" $op.GoDoc }}
// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
func (c *Client) {{ $op.Name }}(ctx context.Context
	{{- if $op.Request }}, request {{ $op.Request.Type.Go }}{{ end }}
	{{- if $op.Params }}, params {{ $op.Name }}Params {{ end }}) (res {{ $op.Responses.Type.Go }}, err error) {
	{{- $hasOTELAttrs := false }}
	{{- with $attrs := $op.OTELAttributes }}
	{{- $hasOTELAttrs = true }}
	otelAttrs := []attribute.KeyValue{
		{{- range $attr := $attrs }}
		{{ $attr.String }},
		{{- end }}
	}
	{{- else }}
	var otelAttrs []attribute.KeyValue
	{{- end }}

	{{- if $op.Request }}{{/* Request validation */}}
		// Validate request before sending.
		{{- if $op.Request.Type.IsInterface }}
			switch request := request.(type) {
			{{- if $op.Request.EmptyBody }}
			case *{{ $op.Request.EmptyBody.Go }}:
				// Validation is not needed for the empty body type.
			{{- end }}
			{{- range $_, $media := $op.Request.Contents }}
			{{- $type := $media.Type }}
			case *{{ $type.Go }}:
				{{- if $type.NeedValidation }}
					if err := func() error {
						{{- template "validate" elem $type "request" }}
					}(); err != nil {
						return res, errors.Wrap(err, "validate")
					}
				{{- else }}
				// Validation is not required for this type.
				{{- end }}
			{{- end }}
			default:
				return res, errors.Errorf("unexpected request type: %T", request)
			}
		{{- else }}
			{{- if $op.Request.Type.NeedValidation }}
				if err := func() error {
					{{- template "validate" elem $op.Request.Type "request" }}
				}(); err != nil {
					return res, errors.Wrap(err, "validate")
				}
			{{- end }}
		{{- end }}
	{{- end }}{{/* Request validation */}}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, otelAttrs...)

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, {{ quote $op.Name }},
		{{- if $hasOTELAttrs }}
		trace.WithAttributes(otelAttrs...),
		{{- end }}
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, otelAttrs...)
		}
		span.End()
	}()

	stage = "BuildURL"
	{{- template "encode_path_parameters" $op }}

	{{ if $op.HasQueryParams }}
	stage = "EncodeQueryParams"
	{{- template "encode_query_parameters" $op }}
	{{- end }}

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, {{ $op.Spec.HTTPMethod | upper | quote }}, u, nil)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	{{- if $op.Request }}
	if err := encode{{ $op.Name }}Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}
	{{- end }}

	{{ if $op.HasHeaderParams }}
	stage = "EncodeHeaderParams"
	{{- template "encode_header_parameters" $op }}
	{{- end }}

	{{- template "encode_cookie_params" $op }}
	{{- range $s := $op.Security }}
	{{- $securityName := $s.Security.Type.Name }}
	stage = {{ printf "Security:%s" $securityName | quote }}
	if err := c.security{{ $securityName }}(ctx, {{ quote $op.Name }}, r); err != nil {
		return res, errors.Wrap(err, {{ printf "security %q" $securityName | quote }})
	}
	{{- end }}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decode{{ $op.Name }}Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
{{ end }}

{{ define "encode_cookie_params" }}
{{- range $param := $.CookieParams }}{{/* Range over params */}}
{
value := conv.{{ $param.Type.ToString }}(params.{{ $param.Name }})
{{- if $param.Type.IsArray }}
r.AddCookie(&http.Cookie{
	Name: {{ quote $param.Spec.Name }},
	Value: strings.Join(value, "/"),
	MaxAge: 1337,
})
{{- else }}
r.AddCookie(&http.Cookie{
	Name: {{ quote $param.Spec.Name }},
	Value: value,
	MaxAge: 1337,
})
{{- end }}
}
{{- end }}{{/* Range over params */}}
{{ end }}

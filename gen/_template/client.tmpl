{{ define "client" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	{{- if $.Securities }}
	sec 	  SecuritySource
	{{- end }}
	cfg       config
	requests  syncint64.Counter
	errors    syncint64.Counter
	duration  syncint64.Histogram
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, {{- if $.Securities }}sec SecuritySource,{{- end }} opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c := &Client{
		cfg: newConfig(opts...),
		{{- if $.Securities }}
		sec: sec,
		{{- end }}
		serverURL: u,
	}
	if c.requests, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientRequestCount); err != nil {
		return nil, err
	}
	if c.errors, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientErrorsCount); err != nil {
		return nil, err
	}
	if c.duration, err = c.cfg.Meter.SyncInt64().Histogram(otelogen.ClientDuration); err != nil {
		return nil, err
	}
	return c, nil
}

{{ range $op := $.Operations }}
// {{ $op.Name }} invokes {{ $op.PrettyOperationID }} operation.
//
{{- template "godoc_def" $op.GoDoc }}
// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
func (c *Client) {{ $op.Name }}(ctx context.Context {{ if $op.Request }}, request {{ $op.Request.Type.Go }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) (res {{ $op.Responses.Type.Go }}, err error) {
	{{- if $op.Request }}{{/* Request validation */}}
		{{- if $op.Request.Type.IsInterface }}
			switch request := request.(type) {
			{{- range $_, $media := $op.Request.Contents }}
			{{- $type := $media.Type }}
			case *{{ $type.Go }}:
				{{- if $type.NeedValidation }}
					if err := func() error {
						{{- template "validate" elem $type "request" }}
					}(); err != nil {
						return res, errors.Wrap(err, "validate")
					}
				{{- else }}
				// Validation is not required for this type.
				{{- end }}
			{{- end }}
			default:
				return res, errors.Errorf("unexpected request type: %T", request)
			}
		{{- else }}
			{{- if $op.Request.Type.NeedValidation }}
				if err := func() error {
					{{- template "validate" elem $op.Request.Type "request" }}
				}(); err != nil {
					return res, errors.Wrap(err, "validate")
				}
			{{- end }}
		{{- end }}
	{{- end }}{{/* Request validation */}}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
	{{- if $op.Spec.OperationID }}
		otelogen.OperationID({{ quote $op.Spec.OperationID }}),
	{{- end }}
	}
	ctx, span := c.cfg.Tracer.Start(ctx, {{ quote $op.Name }},
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)

	{{- template "encode_path_parameters" $op }}

	{{- if $op.HasQueryParams }}
	{{- template "encode_query_parameters" $op }}
	{{- end }}

	r := ht.NewRequest(ctx, {{ $op.Spec.HTTPMethod | upper | quote }}, u, nil)
	{{- if $op.Request }}
	if err := encode{{ $op.Name }}Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}
	{{- end }}

	{{- if $op.HasHeaderParams }}
	{{- template "encode_header_parameters" $op }}
	{{- end }}

	{{- template "encode_cookie_params" $op }}
	{{- range $s := $op.Security }}
	if err := c.security{{ $s.Security.Type.Name }}(ctx, {{ quote $op.Name }}, r); err != nil {
		return res, errors.Wrap(err, "security")
	}
	{{- end }}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decode{{ $op.Name }}Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
{{ end }}
{{ end }}

{{ define "encode_cookie_params" }}
{{- range $param := $.CookieParams }}{{/* Range over params */}}
{
value := conv.{{ $param.Type.ToString }}(params.{{ $param.Name }})
{{- if $param.Type.IsArray }}
r.AddCookie(&http.Cookie{
	Name: {{ quote $param.Spec.Name }},
	Value: strings.Join(value, "/"),
	MaxAge: 1337,
})
{{- else }}
r.AddCookie(&http.Cookie{
	Name: {{ quote $param.Spec.Name }},
	Value: value,
	MaxAge: 1337,
})
{{- end }}
}
{{- end }}{{/* Range over params */}}
{{ end }}

{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "server" }}
{{ template "header" $ }}

{{- if $.PathsServerEnabled }}
// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
{{- range $group := $.OperationGroups }}
	{{ $group.Name }}Handler
{{- end}}
{{- range $op := $.DefaultOperations }}
	{{- if not $op.HasRawResponse }}
	// {{ $op.Name }} implements {{ $op.PrettyOperationID }} operation.
	//
	{{- template "godoc_def" $op.GoDoc }}
	// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) {{ $op.Responses.ResultTuple "" "" }}
	{{- end }}
{{- end }}
{{- if $.Error }}
	// NewError creates {{ $.ErrorGoType }} from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) {{ $.ErrorGoType }}
{{- end }}
}

{{- $hasRawOps := false }}
{{- range $op := $.DefaultOperations }}
	{{- if $op.HasRawResponse }}
		{{- $hasRawOps = true }}
	{{- end }}
{{- end }}
{{- if $hasRawOps }}
// RawHandler handles raw response operations described by OpenAPI v3 specification.
type RawHandler interface {
{{- range $op := $.DefaultOperations }}
	{{- if $op.HasRawResponse }}
	// {{ $op.Name }} implements {{ $op.PrettyOperationID }} operation.
	//
	{{- template "godoc_def" $op.GoDoc }}
	// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params{{ end }}, w http.ResponseWriter) error
	{{- end }}
{{- end }}
}
{{- end }}

{{- range $group := $.OperationGroups }}
// {{ $group.Name }}Handler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: {{ $group.Name }}
type {{ $group.Name }}Handler interface {
{{- range $op := $group.Operations }}
	// {{ $op.Name }} implements {{ $op.PrettyOperationID }} operation.
	//
	{{- template "godoc_def" $op.GoDoc }}
	// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
	{{- if $op.HasRawResponse }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params{{ end }}, w http.ResponseWriter) error
	{{- else }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) {{ $op.Responses.ResultTuple "" "" }}
	{{- end }}
{{- end }}
}

{{- end}}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	{{- if $hasRawOps }}
	rh  RawHandler
	{{- end }}
	{{- if $.Securities }}
	sec SecurityHandler
	{{- end }}
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, {{- if $hasRawOps }}rh RawHandler,{{- end }}{{- if $.Securities }}sec SecurityHandler,{{- end }}opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h: h,
		{{- if $hasRawOps }}
		rh: rh,
		{{- end }}
		{{- if $.Securities }}
		sec: sec,
		{{- end }}
		baseServer: s,
	}, nil
}
{{- end }}

{{- if $.WebhookServerEnabled }}
{{- with $ops := $.Webhooks }}
// WebhookHandler handles webhooks described by OpenAPI v3 specification.
type WebhookHandler interface {
{{- range $op := $ops }}
	// {{ $op.Name }} implements {{ $op.PrettyOperationID }} operation.
	//
    {{- template "godoc_op" $op }}
	{{- if $op.HasRawResponse }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params{{ end }}, w http.ResponseWriter) error
	{{- else }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) {{ $op.Responses.ResultTuple "" "" }}
	{{- end }}
{{- end }}
}

// WebhookServer implements http server based on OpenAPI v3 specification and
// calls WebhookHandler to handle requests.
type WebhookServer struct {
	h WebhookHandler
	baseServer
}

// NewWebhookServer creates new WebhookServer.
func NewWebhookServer(h WebhookHandler, opts ...ServerOption) (*WebhookServer, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &WebhookServer{
		h: h,
		baseServer: s,
	}, nil
}
{{- end }}
{{- end }}

{{ end }}

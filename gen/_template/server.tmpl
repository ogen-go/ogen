{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "server" }}
{{ template "header" $ }}

{{- if $.PathsServerEnabled }}
{{- with $ops := $.Operations }}
// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
{{- range $op := $ops }}
	// {{ $op.Name }} implements {{ $op.PrettyOperationID }} operation.
	//
	{{- template "godoc_def" $op.GoDoc }}
	// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) {{ $op.Responses.ResultTuple "" "" }}
{{- end }}
{{- if $.Error }}
	// NewError creates {{ $.ErrorGoType }} from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) {{ $.ErrorGoType }}
{{- end }}
}

// {{ $.InternalPrefix }}Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type {{ $.InternalPrefix }}Server struct {
	h   Handler
	{{- if $.Securities }}
	sec SecurityHandler
	{{- end }}
	baseServer
}

// New{{ $.InternalPrefix }}Server creates new Server.
func New{{ $.InternalPrefix }}Server(h Handler, {{- if $.Securities }}sec SecurityHandler,{{- end }}opts ...ServerOption) (*{{ $.InternalPrefix }}Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &{{ $.InternalPrefix }}Server{
		h: h,
		{{- if $.Securities }}
		sec: sec,
		{{- end }}
		baseServer: s,
	}, nil
}
{{- end }}
{{- end }}

{{- if $.WebhookServerEnabled }}
{{- with $ops := $.Webhooks }}
// WebhookHandler handles webhooks described by OpenAPI v3 specification.
type WebhookHandler interface {
{{- range $op := $ops }}
	// {{ $op.Name }} implements {{ $op.PrettyOperationID }} operation.
	//
    {{- template "godoc_op" $op }}
	{{ $op.Name }}(ctx context.Context {{ if $op.Request }}, req {{ $op.Request.GoType }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) {{ $op.Responses.ResultTuple "" "" }}
{{- end }}
}

// Webhook{{ $.InternalPrefix }}Server implements http server based on OpenAPI v3 specification and
// calls WebhookHandler to handle requests.
type Webhook{{ $.InternalPrefix }}Server struct {
	h WebhookHandler
	baseServer
}

// NewWebhook{{ $.InternalPrefix }}Server creates new WebhookServer.
func NewWebhook{{ $.InternalPrefix }}Server(h WebhookHandler, opts ...ServerOption) (*Webhook{{ $.InternalPrefix }}Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Webhook{{ $.InternalPrefix }}Server{
		h: h,
		baseServer: s,
	}, nil
}
{{- end }}
{{- end }}

{{ end }}

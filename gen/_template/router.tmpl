{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ define "router" }}
{{ template "header" $ }}
{{- $router := $.Router }}

{{- if and $.PathsServerEnabled $.Operations }}
func (s *{{ $.InternalPrefix }}Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *{{ $.InternalPrefix }}Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	{{- if gt $router.MaxParametersCount 0 }}
	args := [{{ $router.MaxParametersCount }}]string{}
	{{- end }}

	// Static code generated router with unwrapped path search.
	{{- with $n := $router.Tree.Root }}
	switch {
	default:
		{{- template "route_edge" router_elem $n 0 }}
	}
	{{- end }}
	s.notFound(w, r)
}

// {{ $.InternalPrefix }}Route is route object.
type {{ $.InternalPrefix }}Route struct {
	name string
	summary string
	operationID string
	pathPattern string
	count int
	args [{{ $router.MaxParametersCount }}]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r {{ $.InternalPrefix }}Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r {{ $.InternalPrefix }}Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r {{ $.InternalPrefix }}Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r {{ $.InternalPrefix }}Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r {{ $.InternalPrefix }}Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *{{ $.InternalPrefix }}Server) FindRoute(method, path string) ({{ $.InternalPrefix }}Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *{{ $.InternalPrefix }}Server) FindPath(method string, u *url.URL) (r {{ $.InternalPrefix }}Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	{{- with $n := $router.Tree.Root }}
	switch {
	default:
		{{- template "find_edge" router_elem $n 0 }}
	}
    {{- end }}
	return r, false
}
{{- end }}

{{- if and $.WebhookServerEnabled $.Webhooks }}
// Handle handles webhook request.
//
// Returns true if there is a webhook handler for given name and requested method.
func (s *Webhook{{ $.InternalPrefix }}Server) Handle(webhookName string, w http.ResponseWriter, r *http.Request) bool {
	switch webhookName {
	{{- range $name, $methods := $.WebhookRouter.Webhooks }}
	case {{ quote $name }}:
		switch r.Method {
		{{- range $route := $methods.Routes }}{{ $op := $route.Operation }}
		case {{ quote $route.Method }}:
			s.handle{{ $op.Name }}Request([{{ $op.PathParamsCount }}]string{}, false, w, r)
		{{- end }}
		default:
			return false
		}
		return true
	{{- end }}
	default:
		return false
	}
}

// Handler returns http.Handler for webhook.
//
// Returns NotFound handler if spec doesn't contain webhook with given name.
//
// Returned handler calls MethodNotAllowed handler if webhook doesn't define requested method.
func (s *Webhook{{ $.InternalPrefix }}Server) Handler(webhookName string) http.Handler {
	switch webhookName {
	{{- range $name, $methods := $.WebhookRouter.Webhooks }}
	case {{ quote $name }}:
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// We know that webhook exists, so false means wrong method.
			if !s.Handle(webhookName, w, r) {
				s.notAllowed(w, r, {{ quote $methods.AllowedMethods }})
			}
		})
	{{- end }}
	default:
		return http.HandlerFunc(s.notFound)
	}
}
{{- end }}

{{ end }}

{{ define "route_handle_request" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouteNode*/ -}}
	switch r.Method {
	{{- range $r := $.Routes }}
	case {{ quote $r.Method }}:
		{{- $op := $r.Operation }}
		s.handle{{ $op.Name }}Request([{{ $op.PathParamsCount }}]string{
		{{- range $i, $_ := times $op.PathParamsCount }}
			args[{{ $i }}],
		{{- end }}
		}, elemIsEscaped, w, r)
	{{- end }}
	default:
		s.notAllowed(w, r, {{ quote $.AllowedMethods }})
	}
{{ end }}

{{ define "route_edge" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouterElem*/ -}}
{{- $r := $.Route }}
{{- if $r.IsLeaf }}
	if len(elem) == 0 {
		// Leaf node.
		{{ template "route_handle_request" $r }}
		return
	}
{{- else }}
	{{- with $child := $r.StaticChildren }}
		if len(elem) == 0 {
			{{- with $routes := $r.Routes }}
			{{ template "route_handle_request" $r }}
			return
			{{- else }}
			break
			{{- end }}
		}
		switch elem[0] {
		{{- range $c := $child }}
		case {{ quote $c.Head }}: // Prefix: {{ quote $c.Prefix }}
			if l := len({{ quote $c.Prefix }}); len(elem) >= l && elem[0:l] == {{ quote $c.Prefix }} {
				elem = elem[l:]
			} else {
				break
			}
			{{ template "route_edge" router_elem $c $.ParameterIndex }}
		{{- end }}
		}
	{{- end }}
	{{- with $child := $r.ParamChildren }}
		{{- range $c := $child }}
			// Param: {{ quote $c.ParamName }}
			{{- with $tails := $c.Tails }}

			{{- if eq (len $tails) 1 }}
			// Match until {{ quote $tails }}
			idx := strings.IndexByte(elem, {{ quote (index $tails 0) }})
			{{- else }}
			// Match until one of {{ quote $tails }}
			idx := strings.IndexAny(elem, {{ quote $tails }})
			{{- end }}
			if (idx < 0) {
				idx = len(elem)
			}
			args[{{ $.ParameterIndex }}] = elem[:idx]
			elem = elem[idx:]
			{{ template "route_edge" router_elem $c $.ParameterIndex }}
			{{- else }}
			// Leaf parameter
			args[{{ $.ParameterIndex }}] = elem
			elem = ""
			{{ template "route_edge" router_elem $c $.ParameterIndex }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}

{{- end }}

{{ define "find_edge" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouterElem*/ -}}
{{- $r := $.Route }}
{{- if $r.IsLeaf }}
	if len(elem) == 0 {
		switch method {
		{{- range $route := $r.Routes }}{{- $op := $route.Operation }}
		case {{ quote $route.Method }}:
			// Leaf: {{ $op.Name }}
			r.name = {{ quote $op.Name }}
			r.summary = {{ quote $op.Summary }}
			r.operationID = {{ quote $op.Spec.OperationID }}
			r.pathPattern = {{ quote $route.Path }}
			r.args = args
			r.count = {{ $.ParameterIndex }}
			return r, true
		{{- end }}
		default:
			return
		}
	}
{{- else }}
	{{- with $child := $r.StaticChildren }}
		if len(elem) == 0 {
			{{- with $routes := $r.Routes }}
			switch method {
			{{- range $route := $routes }}{{- $op := $route.Operation }}
			case {{ quote $route.Method }}:
				r.name = {{ quote $op.Name }}
				r.summary = {{ quote $op.Summary }}
				r.operationID = {{ quote $op.Spec.OperationID }}
				r.pathPattern = {{ quote $route.Path }}
				r.args = args
				r.count = {{ $.ParameterIndex }}
				return r, true
			{{- end }}
			default:
				return
			}
			{{- else }}
			break
			{{- end }}
		}
		switch elem[0] {
		{{- range $c := $child }}
		case {{ quote $c.Head }}: // Prefix: {{ quote $c.Prefix }}
			if l := len({{ quote $c.Prefix }}); len(elem) >= l && elem[0:l] == {{ quote $c.Prefix }} {
				elem = elem[l:]
			} else {
				break
			}
			{{ template "find_edge" router_elem $c $.ParameterIndex }}
		{{- end }}
		}
	{{- end }}
	{{- with $child := $r.ParamChildren }}
		{{- range $c := $child }}
			// Param: {{ quote $c.ParamName }}
			{{- with $tails := $c.Tails }}

			{{- if eq (len $tails) 1 }}
			// Match until {{ quote $tails }}
			idx := strings.IndexByte(elem, {{ quote (index $tails 0) }})
			{{- else }}
			// Match until one of {{ quote $tails }}
			idx := strings.IndexAny(elem, {{ quote $tails }})
			{{- end }}
			if idx < 0 {
				idx = len(elem)
			}
			args[{{ $.ParameterIndex }}] = elem[:idx]
			elem = elem[idx:]
			{{ template "find_edge" router_elem $c $.ParameterIndex }}
			{{- else }}
			// Leaf parameter
			args[{{ $.ParameterIndex }}] = elem
			elem = ""
			{{ template "find_edge" router_elem $c $.ParameterIndex }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}

{{- end }}

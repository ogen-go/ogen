{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "handlers" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}
	{{- template "handlers/operation" $op }}
{{ end }}

{{ end }}

{{ define "handlers/operation "}}
{{- /*gotype: github.com/ogen-go/ogen/gen/ir.Operation*/ -}}{{ $op := $ }}
// handle{{ $op.Name }}Request handles {{ $op.PrettyOperationID }} operation.
//
// {{ upper $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
func (s *Server) handle{{ $op.Name }}Request(args [{{ $op.PathParamsCount }}]string, w http.ResponseWriter, r *http.Request) {
	{{- $hasOTELAttrs := false }}
	{{- if $op.Spec.OperationID }}
	{{- $hasOTELAttrs = true }}
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID({{ quote $op.Spec.OperationID }}),
	}
	{{- else }}
	var otelAttrs []attribute.KeyValue
	{{- end }}


	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), {{ quote $op.Name }},
		{{- if $hasOTELAttrs }}
		trace.WithAttributes(otelAttrs...),
		{{- end }}
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err error
		{{- if or $op.Request $op.Params $op.Security }}
		opErrContext = ogenerrors.OperationContext{
			Name: {{ quote $op.Name }},
			ID: {{ quote $op.Spec.OperationID }},
		}
		{{- end }}
	)
	{{- range $s := $op.Security }}
	{{- $securityName := $s.Security.Type.Name }}
	sctx, err := s.security{{ $securityName }}(ctx, {{ quote $op.Name }}, r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security: {{ quote $securityName }},
			Err: err,
		}
		recordError({{ printf "Security:%s" $securityName | quote }}, err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	{{- end }}

	{{- if $op.Params }}
	params, err := decode{{ $op.Name }}Params(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err: err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	{{- end }}

	{{- if $op.Request }}
	request, close, err := s.decode{{ $op.Name }}Request(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err: err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()
	{{- end }}

	var response {{ $op.Responses.Type.Go }}
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context: ctx,
			OperationName: {{ quote $op.Name }},
			OperationID: {{ quote $op.Spec.OperationID }},
			Body: {{- if $op.Request }}request{{- else }}nil{{- end }},
			Params: map[string]any{
				{{- range $param := $op.Params }}
				{{ quote $param.Spec.Name }}: params.{{ $param.Name }},
				{{- end }}
			},
			Raw: r,
		}

		type (
			Request = {{ if $op.Request }}{{ $op.Request.Type.Go }}{{ else }}struct{}{{ end }}
			Params = {{ if $op.Params }}{{ $op.Name }}Params{{ else }}struct{}{{ end }}
			Response = {{ $op.Responses.Type.Go }}
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			{{ if $op.Params }}unpack{{ $op.Name }}Params{{ else }}nil{{ end }},
			func(ctx context.Context, request Request, params Params) (Response, error) {
				return s.h.{{ $op.Name }}(ctx{{ if $op.Request }}, request{{ end }}{{ if $op.Params }}, params{{ end }})
			},
		)
	} else {
		response, err = s.h.{{ $op.Name }}(ctx{{ if $op.Request }}, request{{ end }}{{ if $op.Params }}, params{{ end }})
	}
	if err != nil {
		{{- /* It is not secure to expose internal error to client, but better than nothing. */ -}}
		recordError("Internal", err)
		{{- if $.Error }}
		if errRes, ok := errors.Into[*{{ $.ErrorType.Go }}](err); ok {
			encodeErrorResponse(*errRes, w, span)
			return
		}
		if errors.Is(err, ht.ErrNotImplemented) {
			s.cfg.ErrorHandler(ctx, w, r, err)
			return
		}
		encodeErrorResponse(s.h.NewError(ctx, err), w, span)
		{{- else }}
		s.cfg.ErrorHandler(ctx, w, r, err)
        {{- end }}
		return
	}

	if err := encode{{ $op.Name }}Response(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}
{{ end }}

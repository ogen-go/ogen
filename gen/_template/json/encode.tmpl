{{- /*gotype: github.com/ogen-go/ogen/gen.Elem*/ -}}

{{/* Encode field */}}
{{- define "json/enc_field" -}}
{{- if $.Tag.JSON  }}
e.FieldStart({{ $.Tag.EscapedJSON }})
{{- end }}
{{- end -}}

{{/* Encode generic with respect of nullable/optional and special format */}}
{{- define "json/enc_generic" -}}
{{- $g := $.Type.GenericOf -}}
{{- $v := $.Type.GenericVariant -}}

{{- if $v.Optional -}}
if {{ $.Var }}.Set {
	{{- template "json/enc_generic_field" $ }}
}
{{- else }}
    {{- template "json/enc_generic_field" $ }}
{{- end -}}

{{- end }}

{{- define "json/enc_generic_field" -}}
{{- $g := $.Type.GenericOf -}}
{{- $v := $.Type.GenericVariant -}}

{{- template "json/enc_field" $ }}
{{- if $g.Format }}
	{{ $.Var }}.Encode(e, json.Encode{{ $g.JSON.Format }})
{{- else }}
    {{ $.Var }}.Encode(e)
{{- end }}

{{- end }}

{{/* Encode array with all elements */}}
{{- define "json/enc_array_elems" }}
	e.ArrStart()
	for _, elem := range {{ $.Var }} {
		{{- template "json/enc" array_elem $.Type.Item }}
	}
	e.ArrEnd()
{{- end }}

{{/* Encode array with respect for nil semantic */}}
{{- define "json/enc_array" -}}
{{- $t := $.Type }}
{{- if $t.NilSemantic.Invalid -}}
	{{- template "json/enc_field" $ -}}
	{{- template "json/enc_array_elems" $ -}}
{{- else if $t.NilSemantic.Optional -}}
	if {{ $.Var }} != nil {
		{{- template "json/enc_field" $ -}}
		{{- template "json/enc_array_elems" $ -}}
	}
{{- else if $t.NilSemantic.Null -}}
	{{- template "json/enc_field" $ }}
	if {{ $.Var }} == nil {
		e.Null()
	} else {
		{{- template "json/enc_array_elems" $ -}}
	}
{{- else -}}
{{ errorf "unexpected nil semantic %s" $t.NilSemantic }}
{{- end -}}
{{- end }}

{{/* Encode value that implements jx.Encoder with respect to nil semantic */}}
{{- define "json/enc_value" -}}
{{- $t := $.Type -}}
{{- if or ($t.NilSemantic.Invalid) ($t.NilSemantic.Optional) -}}
	if {{ $.Var }} != nil {
		{{- template "json/enc_field" $ }}
		{{ $.Var }}.Encode(e)
	}
{{- else if $t.NilSemantic.Null -}}
	{{- template "json/enc_field" $ }}
	if {{ $.Var }} == nil {
		e.Null()
	} else {
		{{ $.Var }}.Encode(e)
	}
{{- else -}}
	{{- template "json/enc_field" $ }}
	{{ $.Var }}.Encode(e)
{{- end -}}
{{- end }}

{{/* Encode any Elem as json */}}
{{- define "json/enc" -}}
	{{- $t := $.Type }}
	{{- $j := $t.JSON }}
	{{- if or ($t.IsStruct) ($t.IsMap) ($t.IsEnum) ($t.IsPointer) ($t.IsSum) ($t.IsAlias) -}}
		{{- template "json/enc_value" $ }}
	{{- else if $t.IsGeneric -}}
		{{- template "json/enc_generic" $ }}
	{{- else if $t.IsArray -}}
		{{- template "json/enc_array" $ }}
    {{- else if $t.IsAny }}
		if len({{ $.Var }}) != 0 {
        	{{- template "json/enc_field" $ }}
			e.{{ $j.Fn }}({{ $.Var }})
		}
    {{- else if $t.IsNull }}
		_ = {{ $.Var }}
        {{- template "json/enc_field" $ }}
		e.Null()
    {{- else if $j.Format -}}
        {{- template "json/enc_field" $ }}
		json.Encode{{ $j.Format }}(e, {{ $.Var }})
	{{- else if $j.Fn -}}
		{{- template "json/enc_field" $ }}
		e.{{ $j.Fn }}({{ $.Var }})
	{{- else -}}
		{{ errorf "unsupported: %s" $t }}
	{{- end }}
{{- end -}}

{{ define "request_decoders" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}
{{- if $op.Request }}
func (s *Server) decode{{ $op.Name }}Request(r *http.Request, span trace.Span) (
	req {{ $op.Request.Type.Go }},
	close func() error,
	rerr error,
) {
	var closers []io.Closer
	close = func() error {
		var merr error
		for _, c := range closers {
			merr = multierr.Append(merr, c.Close())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()

	{{- if not $op.Request.Spec.Required }}
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, close, nil
	}
	{{- end }}

	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch ct {
{{- range $contentType, $media := $op.Request.Contents }}
	{{- $t := $media.Type }}
	{{- $e := $media.Encoding }}
	case {{ quote $contentType }}:
	{{- if $t.IsStream }}
		request := {{ $t.Go }}{Data: r.Body}
	{{- else if $e.JSON }}
		if r.ContentLength == 0 {
		{{- if not $op.Request.Spec.Required }}
			return req, close, nil
		{{- else }}
			return req, close, validate.ErrBodyRequired
		{{- end }}
		}

		var request {{ $t.Go }}
		buf, err := io.ReadAll(r.Body)
		if err != nil {
			return req, close, err
		}

		if len(buf) == 0 {
		{{- if not $op.Request.Spec.Required }}
			return req, close, nil
		{{- else }}
			return req, close, validate.ErrBodyRequired
		{{- end }}
		}

		d := jx.DecodeBytes(buf)
		if err := func() error {
			{{- template "json/dec" elem $t "request" }}
			return nil
		}(); err != nil {
			return req, close, errors.Wrap(err, {{ printf "decode %q" $contentType | quote }})
		}

		{{- if $t.NeedValidation }}
		if err := func() error {
			{{- template "validate" elem $t "request" }}
		}(); err != nil {
			return req, close, errors.Wrap(err, "validate")
		}
		{{- end }}
    {{- else if or $e.FormURLEncoded $e.MultipartForm }}
		if r.ContentLength == 0 {
		{{- if not $op.Request.Spec.Required }}
			return req, close, nil
		{{- else }}
			return req, close, validate.ErrBodyRequired
		{{- end }}
		}

		{{- if $e.FormURLEncoded }}
		if err := r.ParseForm(); err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}
		form := r.PostForm
		{{- else }}
		if err := r.ParseMultipartForm(s.cfg.MaxMultipartMemory); err != nil {
			return req, close, errors.Wrap(err, "parse multipart form")
		}
		form := url.Values(r.MultipartForm.Value)
        {{- end }}

		var request {{ $t.Go }}
		{{- template "decode_form_request" elem $t "request" }}
	{{- else }}
		{{- errorf "%s decoder not implemented" $contentType }}
	{{- end }}
	return {{ if ($op.Request.Type.IsInterface) }}&{{ end }}request, close, nil
{{- end }}
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}
{{- end }}
{{ end }}
{{ end }}

{{- define "decode_form_request" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.Elem*/ -}}
{{- $t := $.Type }}
{{- $v := $.Var }}


{{- if $t.IsAlias }}
	{
		var unwrapped {{ $t.AliasTo.Go -}}
		{{ template "decode_form_request" elem $t.AliasTo "unwrapped" }}
    	{{ $v }} = {{ $t.Go }}(unwrapped)
	}
{{- else if $t.IsGeneric }}
	{
		var optForm {{ $t.GenericOf.Go -}}
		{{ template "decode_form_request" elem $t.GenericOf "optForm" }}
		{{ $v }} = {{ $t.Go }}{
			Value: optForm,
			Set:   true,
		}
	}
{{- else if $t.IsStruct }}
	q := uri.NewQueryDecoder(form)
	{{- range $p := $t.FormParameters }}
	{
		{{- $el := elem $p.Type (printf "%s.%s" $.Var $p.Name) }}
		cfg := uri.QueryParameterDecodingConfig{
			Name:    {{ quote $p.Spec.Name }},
			Style:   uri.QueryStyle{{ capitalize $p.Spec.Style.String }},
			Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			{{- if isObjectParam $p }}
			Fields: {{ paramObjectFields $p.Type }},
			{{- end }}
		}
		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				{{- template "uri/decode" $el }}
			}); err != nil {
				return req, close, errors.Wrap(err, {{ printf "decode %q" $p.Spec.Name | quote }})
			}

			{{- if $p.Type.NeedValidation }}
			if err := func() error {
				{{- template "validate" $el }}
			}(); err != nil {
				return req, close, errors.Wrap(err, "validate")
			}
			{{- end }}
		} {{- if $p.Spec.Required }} else {
			return req, close, errors.Wrap(err, "query")
		} {{- end }}
	}
	{{- end }}
    {{- range $p := $t.FileParameters }}
	{
    	{{- $name := quote $p.Spec.Name }}
    	{{- $recv := printf "%s.%s" $.Var $p.Name }}
    	{{- $t := $p.Type }}
		if err := func() error {
			files, ok := r.MultipartForm.File[{{ $name }}]
			{{- if or $t.IsPrimitive $t.IsGeneric }}
			if !ok || len(files) < 1  {
				{{- if $t.IsPrimitive }}
				return validate.ErrFieldRequired
				{{- else }}
				return nil
				{{- end }}
			}
			fh := files[0]

			f, err := fh.Open()
			if err != nil {
				return errors.Wrap(err, "open")
			}
			closers = append(closers, f)

			{{- if $t.IsPrimitive }}
			{{ $recv }} = ht.MultipartFile{
				Name:   fh.Filename,
				File:   f,
				Header: fh.Header,
			}
			{{- else }}
			{{ $recv }}.SetTo(ht.MultipartFile{
				Name:   fh.Filename,
				File:   f,
				Header: fh.Header,
			})
			{{- end }}
			{{- else if $t.IsArray }}
			_ = ok
			request.Files = make({{ $t.Go }}, 0, len(files))
			for _, fh := range files {
				f, err := fh.Open()
				if err != nil {
					return errors.Wrap(err, "open")
				}
				closers = append(closers, f)

				{{ $recv }} = append({{ $recv }}, ht.MultipartFile{
					Name:   fh.Filename,
					File:   f,
					Header: fh.Header,
				})
			}
			{{- else }}
				{{ errorf "unexpected kind %s" $t.Kind }}
			{{- end }}

			{{- if $t.NeedValidation }}
			if err := func() error {
				{{- template "validate" elem $t $recv }}
			}(); err != nil {
				return errors.Wrap(err, "validate")
			}
			{{- end }}
			return nil
		}(); err != nil {
			return req, close, errors.Wrap(err, {{ printf "decode %q" $p.Spec.Name | quote }})
		}
	}
    {{- end }}
{{- else }}
	{{ errorf "unexpected type: %s" $t }}
{{- end }}

{{- end }}


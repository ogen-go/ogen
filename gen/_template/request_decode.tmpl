{{ define "request_decoders" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ template "header" $ }}

{{- if $.PathsServerEnabled }}
{{- range $op := $.Operations }}{{ if $op.Request }}
	{{ template "request_decoders/operation" $op }}
{{ end }}{{ end }}
{{- end }}

{{- if $.WebhookServerEnabled }}
{{- range $op := $.Webhooks }}{{ if $op.Request }}
	{{ template "request_decoders/operation" $op }}
{{ end }}{{ end }}
{{- end }}

{{ end }}

{{ define "request_decoders/operation" }}
{{- /*gotype: github.com/ogen-go/ogen/gen/ir.Operation*/ -}}{{ $op := $ }}
func (s *{{ if $op.WebhookInfo }}Webhook{{ end }}Server) decode{{ $op.Name }}Request(r *http.Request) (
	req {{ $op.Request.GoType }},
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers)-1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()

	{{- if $op.Request.EmptyBody }}
	req = &{{ $op.Request.EmptyBody.Go }}{}
	{{- end }}
	{{- if not $op.Request.Spec.Required }}
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	{{- end }}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
{{- range $contentType, $media := $op.Request.Contents }}
	{{- $t := $media.Type }}
	{{- $e := $media.Encoding }}

	{{- if not $contentType.Mask }}
	case ct == {{ quote $contentType }}:
	{{- else }}
	case ht.MatchContentType({{ quote $contentType }}, ct):
    {{- $t = ($media.Type.MustField "Content").Type }}
	{{- end }}
	{{- if $t.IsStream }}
		{{- if $t.IsBase64Stream }}
		reader := base64.NewDecoder(base64.StdEncoding, r.Body)
		{{- else }}
		reader := r.Body
		{{- end }}
		request := {{ $t.Go }}{Data: reader}
	{{- else if or $e.JSON $e.ProblemJSON}}
		if r.ContentLength == 0 {
		{{- if not $op.Request.Spec.Required }}
			return req, rawBody, close, nil
		{{- else }}
			return req, rawBody, close, validate.ErrBodyRequired
		{{- end }}
		}

		{{- if $media.JSONStreaming }}
		d := jx.Decode(r.Body, -1)
        {{- else }}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
		{{- if not $op.Request.Spec.Required }}
			return req, rawBody, close, nil
		{{- else }}
			return req, rawBody, close, validate.ErrBodyRequired
		{{- end }}
		}

        rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)
		{{- end }}

		var request {{ $t.Go }}
		if err := func() error {
			{{- template "json/dec" elem $t "request" }}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
        	{{- if not $media.JSONStreaming }}
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body: buf,
				Err: err,
			}
			{{- end }}
			return req, rawBody, close, err
		}
		{{- if $t.NeedValidation }}
		if err := func() error {
			{{- template "validate" elem $t "request" }}
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		{{- end }}
    {{- else if or $e.FormURLEncoded $e.MultipartForm }}
		if r.ContentLength == 0 {
		{{- if not $op.Request.Spec.Required }}
			return req, rawBody, close, nil
		{{- else }}
			return req, rawBody, close, validate.ErrBodyRequired
		{{- end }}
		}

		{{- if $e.FormURLEncoded }}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, rawBody, close, errors.Wrap(err, "parse form")
		}
		{{- else }}
		if err := r.ParseMultipartForm(s.cfg.MaxMultipartMemory); err != nil {
			return req, rawBody, close, errors.Wrap(err, "parse multipart form")
		}
		// Remove all temporary files created by ParseMultipartForm when the request is done.
		//
		// Notice that the closers are called in reverse order, to match defer behavior, so
		// any opened file will be closed before RemoveAll call.
		closers = append(closers, r.MultipartForm.RemoveAll)
		// Form values may be unused.
		form := url.Values(r.MultipartForm.Value)
		_ = form
        {{- end }}

		var request {{ $t.Go }}
		{{- template "decode_form_request" elem $t "request" }}
	{{- else }}
		{{- errorf "%s decoder not implemented" $contentType }}
	{{- end }}

    {{- if not $contentType.Mask }}
	return {{ if $op.Request.DoTakePtr }}&{{ end }}request, rawBody, close, nil
	{{- else }}
	wrapped := {{ $media.Type.Go }}{
		ContentType: ct,
		Content: request,
	}
	return {{ if $op.Request.DoTakePtr }}&{{ end }}wrapped, rawBody, close, nil
	{{- end }}
{{- end }}
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}
{{ end }}

{{- define "decode_form_request" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.Elem*/ -}}
{{- $t := $.Type }}
{{- $v := $.Var }}

{{- if $t.IsAlias }}
	{
		var unwrapped {{ $t.AliasTo.Go -}}
		{{ template "decode_form_request" elem $t.AliasTo "unwrapped" }}
    	{{ $v }} = {{ $t.Go }}(unwrapped)
	}
{{- else if $t.IsGeneric }}
	{
		var optForm {{ $t.GenericOf.Go -}}
		{{ template "decode_form_request" elem $t.GenericOf "optForm" }}
		{{ $v }} = {{ $t.Go }}{
			Value: optForm,
			Set:   true,
		}
	}
{{- else if $t.IsStruct }}
	{{- if $t.HasDefaultFields }}
	{{ $v }}.setDefaults()
	{{- end }}

	{{- if $t.DenyAdditionalProps }}
		defined := func(name string) bool {
			switch name {
			{{- range $p := $t.FormParameters }}
			case {{ quote $p.Spec.Name }}:
				// Form parameter.
				return true
			{{- end }}

			{{- range $p := $t.FileParameters }}
			case {{ quote $p.Spec.Name }}:
				// File parameter.
				return true
			{{- end }}
			default:
				return false
			}
		}

		for k := range form {
			if !defined(k) {
				return req, rawBody, close, errors.Errorf("unexpected field %q", k)
			}
		}
		{{- with $t.FileParameters }}
		for k := range r.MultipartForm.File {
			if !defined(k) {
				return req, rawBody, close, errors.Errorf("unexpected field %q", k)
			}
		}
		{{- end }}

	{{- end }}

	{{- with $t.FormParameters }}
	q := uri.NewQueryDecoder(form)
		{{- range $p := $t.FormParameters }}
		{
			{{- $el := elem $p.Type (printf "%s.%s" $.Var $p.Name) }}
			cfg := uri.QueryParameterDecodingConfig{
				Name:    {{ quote $p.Spec.Name }},
				Style:   uri.QueryStyle{{ capitalize $p.Spec.Style.String }},
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
				{{- if isObjectParam $p }}
				Fields: {{ paramObjectFields $p.Type }},
				{{- end }}
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					{{- if $p.Spec.Content }}
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}
						if err := func(d *jx.Decoder) error {
							{{- template "json/dec" $el }}
							return nil
						}(jx.DecodeStr(val)); err != nil {
							return err
						}
						return nil
					{{- else }}
						{{- template "uri/decode" $el }}
					{{- end }}
				}); err != nil {
					return req, rawBody, close, errors.Wrap(err, {{ printf "decode %q" $p.Spec.Name | quote }})
				}

				{{- if $p.Type.NeedValidation }}
				if err := func() error {
					{{- template "validate" $el }}
				}(); err != nil {
					return req, rawBody, close, errors.Wrap(err, "validate")
				}
				{{- end }}
			} {{- if $p.Spec.Required }} else {
				return req, rawBody, close, errors.Wrap(err, "query")
			} {{- end }}
		}
		{{- end }}
	{{- end }}
    {{- range $p := $t.FileParameters }}
	{
    	{{- $name := quote $p.Spec.Name }}
    	{{- $recv := printf "%s.%s" $.Var $p.Name }}
    	{{- $t := $p.Type }}
		if err := func() error {
			files, ok := r.MultipartForm.File[{{ $name }}]
			{{- if or $t.IsPrimitive $t.IsGeneric }}
			if !ok || len(files) < 1  {
				{{- if $t.IsPrimitive }}
				return validate.ErrFieldRequired
				{{- else }}
				return nil
				{{- end }}
			}
			fh := files[0]

			f, err := fh.Open()
			if err != nil {
				return errors.Wrap(err, "open")
			}
			closers = append(closers, f.Close)

			{{- if $t.IsPrimitive }}
			{{ $recv }} = ht.MultipartFile{
				Name:   fh.Filename,
				File:   f,
				Size:   fh.Size,
				Header: fh.Header,
			}
			{{- else }}
			{{ $recv }}.SetTo(ht.MultipartFile{
				Name:   fh.Filename,
				File:   f,
				Size:   fh.Size,
				Header: fh.Header,
			})
			{{- end }}
			{{- else if $t.IsArray }}
			_ = ok
			{{ $recv }} = make({{ $t.Go }}, 0, len(files))
			for _, fh := range files {
				f, err := fh.Open()
				if err != nil {
					return errors.Wrap(err, "open")
				}
				closers = append(closers, f.Close)

				{{ $recv }} = append({{ $recv }}, ht.MultipartFile{
					Name:   fh.Filename,
					File:   f,
					Size:   fh.Size,
					Header: fh.Header,
				})
			}
			{{- else }}
				{{ errorf "unexpected kind %s" $t.Kind }}
			{{- end }}

			{{- if $t.NeedValidation }}
			if err := func() error {
				{{- template "validate" elem $t $recv }}
			}(); err != nil {
				return errors.Wrap(err, "validate")
			}
			{{- end }}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, {{ printf "decode %q" $p.Spec.Name | quote }})
		}
	}
    {{- end }}
{{- else }}
	{{ errorf "unexpected type: %s" $t }}
{{- end }}

{{- end }}


// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"

	"github.com/go-faster/errors"
)

// ProductionServer is a server URL template.
//
// Production server.
type ProductionServer struct {
	Region string `json:"region" yaml:"region"`
	Val    string `json:"val" yaml:"val"`
}

// MustPath returns the computed path. It panics if any error occurs.
func (s ProductionServer) MustPath() string {
	return errors.Must(s.Path())
}

// Path returns the computed path.
func (s ProductionServer) Path() (string, error) {
	raw, err := s.Build()
	if err != nil {
		return "", err
	}
	u, err := url.Parse(raw)
	if err != nil {
		return "", err
	}
	return u.Path, nil
}

// MustBuild returns the computed server URL. It panics if any error occurs.
func (s ProductionServer) MustBuild() string {
	return errors.Must(s.Build())
}

// Build returns the computed server URL.
//
// If variable is empty, it uses the default value.
// If spec defines an enum and given value is not in the enum, it returns an error.
//
// Notice that given values will not be escaped and may cause invalid URL.
func (s ProductionServer) Build() (string, error) {
	zeroOr := func(s string, def string) string {
		if s == "" {
			return def
		}
		return s
	}
	s.Region = zeroOr(s.Region, "us")
	// Validate "region"
	switch s.Region {
	case "us":
	case "eu":
	default:
		return "", errors.Errorf("param %q: unexpected value %q", "region", s.Region)
	}
	s.Val = zeroOr(s.Val, "prod")
	// Validate "val"
	switch s.Val {
	case "prod":
	case "test":
	default:
		return "", errors.Errorf("param %q: unexpected value %q", "val", s.Val)
	}
	return fmt.Sprintf("https://%s.example.com/%s/v1",
		s.Region,
		s.Val,
	), nil
}

// PrefixServer is a server URL template.
//
type PrefixServer struct {
	Val string `json:"val" yaml:"val"`
}

// MustPath returns the computed path. It panics if any error occurs.
func (s PrefixServer) MustPath() string {
	return errors.Must(s.Path())
}

// Path returns the computed path.
func (s PrefixServer) Path() (string, error) {
	raw, err := s.Build()
	if err != nil {
		return "", err
	}
	u, err := url.Parse(raw)
	if err != nil {
		return "", err
	}
	return u.Path, nil
}

// MustBuild returns the computed server URL. It panics if any error occurs.
func (s PrefixServer) MustBuild() string {
	return errors.Must(s.Build())
}

// Build returns the computed server URL.
//
// If variable is empty, it uses the default value.
// If spec defines an enum and given value is not in the enum, it returns an error.
//
// Notice that given values will not be escaped and may cause invalid URL.
func (s PrefixServer) Build() (string, error) {
	zeroOr := func(s string, def string) string {
		if s == "" {
			return def
		}
		return s
	}
	s.Val = zeroOr(s.Val, "prod")
	// Validate "val"
	switch s.Val {
	case "prod":
	case "test":
	default:
		return "", errors.Errorf("param %q: unexpected value %q", "val", s.Val)
	}
	return fmt.Sprintf("/%s/v1",
		s.Val,
	), nil
}

type serverConst string

// MustPath returns the computed path. It panics if any error occurs.
//
// Kept for common interface with server URL templates.
func (s serverConst) MustPath() string {
	return errors.Must(s.Path())
}

// Path returns the computed path.
//
// Kept for common interface with server URL templates.
func (s serverConst) Path() (string, error) {
	raw, err := s.Build()
	if err != nil {
		return "", err
	}
	u, err := url.Parse(raw)
	if err != nil {
		return "", err
	}
	return u.Path, nil
}

// MustBuild returns the server URL.
//
// Kept for common interface with server URL templates.
func (s serverConst) MustBuild() string {
	return errors.Must(s.Build())
}

// Build returns the server URL.
//
// Kept for common interface with server URL templates.
func (s serverConst) Build() (string, error) {
	return string(s), nil
}

const (
	// ConstServer is a server URL.
	//
	ConstServer serverConst = "https://cdn.example.com/v1"
)

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// MultipleContentTypesWithParametersParams is parameters of multipleContentTypesWithParameters operation.
type MultipleContentTypesWithParametersParams struct {
	Q string
	// Auto-generated parameter for the Accept header.
	Accept ht.AcceptHeader
}

func unpackMultipleContentTypesWithParametersParams(packed middleware.Parameters) (params MultipleContentTypesWithParametersParams) {
	{
		key := middleware.ParameterKey{
			Name: "q",
			In:   "query",
		}
		params.Q = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "Accept",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.Accept = v.(ht.AcceptHeader)
		}
	}
	return params
}

func decodeMultipleContentTypesWithParametersParams(args [0]string, argsEscaped bool, r *http.Request) (params MultipleContentTypesWithParametersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: q.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "q",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: Accept.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Accept",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				return params.Accept.DecodeURI(d)
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Accept",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// MultipleContentTypesWithoutParametersParams is parameters of multipleContentTypesWithoutParameters operation.
type MultipleContentTypesWithoutParametersParams struct {
	// Auto-generated parameter for the Accept header.
	Accept ht.AcceptHeader
}

func unpackMultipleContentTypesWithoutParametersParams(packed middleware.Parameters) (params MultipleContentTypesWithoutParametersParams) {
	{
		key := middleware.ParameterKey{
			Name: "Accept",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.Accept = v.(ht.AcceptHeader)
		}
	}
	return params
}

func decodeMultipleContentTypesWithoutParametersParams(args [0]string, argsEscaped bool, r *http.Request) (params MultipleContentTypesWithoutParametersParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Accept.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Accept",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				return params.Accept.DecodeURI(d)
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Accept",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

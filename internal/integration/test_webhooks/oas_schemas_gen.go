// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s Error) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val string) {
	s.Error = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) updateDeleteRes()  {}
func (*ErrorStatusCode) updateWebhookRes() {}

// Ref: #/components/schemas/Event
type Event struct {
	ID      uuid.UUID `json:"id"`
	Message string    `json:"message"`
}

// GetID returns the value of ID.
func (s Event) GetID() uuid.UUID {
	return s.ID
}

// GetMessage returns the value of Message.
func (s Event) GetMessage() string {
	return s.Message
}

// SetID sets the value of ID.
func (s *Event) SetID(val uuid.UUID) {
	s.ID = val
}

// SetMessage sets the value of Message.
func (s *Event) SetMessage(val string) {
	s.Message = val
}

// NewOptEvent returns new OptEvent with value set to v.
func NewOptEvent(v Event) OptEvent {
	return OptEvent{
		Value: v,
		Set:   true,
	}
}

// OptEvent is optional Event.
type OptEvent struct {
	Value Event
	Set   bool
}

// IsSet returns true if OptEvent was set.
func (o OptEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEvent) Reset() {
	var v Event
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEvent) SetTo(v Event) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEvent) Get() (v Event, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEvent) Or(d Event) Event {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type StatusWebhookOK struct {
	Status OptString `json:"status,omitempty"`
}

// GetStatus returns the value of Status.
func (s StatusWebhookOK) GetStatus() OptString {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *StatusWebhookOK) SetStatus(val OptString) {
	s.Status = val
}

// UpdateDeleteOK is response for UpdateDelete operation.
type UpdateDeleteOK struct{}

func (*UpdateDeleteOK) updateDeleteRes() {}

// Ref: #/components/schemas/WebhookResponse
type WebhookResponse struct {
	ID        uuid.UUID `json:"id"`
	EventType OptString `json:"event_type,omitempty"`
}

// GetID returns the value of ID.
func (s WebhookResponse) GetID() uuid.UUID {
	return s.ID
}

// GetEventType returns the value of EventType.
func (s WebhookResponse) GetEventType() OptString {
	return s.EventType
}

// SetID sets the value of ID.
func (s *WebhookResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetEventType sets the value of EventType.
func (s *WebhookResponse) SetEventType(val OptString) {
	s.EventType = val
}

func (*WebhookResponse) updateWebhookRes() {}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		PublishEvent: ogenreflect.RuntimeOperation{
			Name: "PublishEvent",
			ID:   "publishEvent",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptEvent)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Event)).Elem(),
							},
						},
					},
				},
			},
		},
	},
	Webhooks: webhooks{
		StatusWebhook: ogenreflect.RuntimeOperation{
			Name: "StatusWebhook",
			ID:   "statusWebhook",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(StatusWebhookOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(StatusWebhookOK)).Elem(),
							},
						},
					},
				},
			},
		},
		UpdateDelete: ogenreflect.RuntimeOperation{
			Name: "UpdateDelete",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UpdateDeleteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UpdateDeleteOK)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		UpdateWebhook: ogenreflect.RuntimeOperation{
			Name: "UpdateWebhook",
			ID:   "updateWebhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptEvent)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UpdateWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "event_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "event_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "X-Webhook-Token",
							In:   "header",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "X-Webhook-Token",
							In:       "header",
							Style:    "simple",
							Explode:  false,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UpdateWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*WebhookResponse)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookResponse)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths    paths
	Webhooks webhooks
}

type paths struct {
	PublishEvent ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "PublishEvent":
		return p.PublishEvent, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "publishEvent":
		return p.PublishEvent, true
	default:
		return op, false
	}
}

type webhooks struct {
	StatusWebhook ogenreflect.RuntimeOperation
	UpdateDelete  ogenreflect.RuntimeOperation
	UpdateWebhook ogenreflect.RuntimeOperation
}

func getWebhooks() webhooks {
	return API.Webhooks
}

// FindByName finds operation by ogen name.
func (w webhooks) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "StatusWebhook":
		return w.StatusWebhook, true
	case "UpdateDelete":
		return w.UpdateDelete, true
	case "UpdateWebhook":
		return w.UpdateWebhook, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (w webhooks) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "statusWebhook":
		return w.StatusWebhook, true
	case "updateWebhook":
		return w.UpdateWebhook, true
	default:
		return op, false
	}
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// UpdateWebhookParams is parameters of updateWebhook operation.
type UpdateWebhookParams struct {
	EventType     string
	XWebhookToken OptString `json:",omitempty,omitzero"`
}

func unpackUpdateWebhookParams(packed middleware.Parameters) (params UpdateWebhookParams) {
	{
		key := middleware.ParameterKey{
			Name: "event_type",
			In:   "query",
		}
		params.EventType = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Webhook-Token",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XWebhookToken = v.(OptString)
		}
	}
	return params
}

func decodeUpdateWebhookParams(args [0]string, argsEscaped bool, r *http.Request) (params UpdateWebhookParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: event_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "event_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EventType = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "event_type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: X-Webhook-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Webhook-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXWebhookTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotXWebhookTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XWebhookToken.SetTo(paramsDotXWebhookTokenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Webhook-Token",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

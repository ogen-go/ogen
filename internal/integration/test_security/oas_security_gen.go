// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBasicAuth handles basicAuth security.
	HandleBasicAuth(ctx context.Context, operationName OperationName, t BasicAuth) (context.Context, error)
	// HandleBearerToken handles bearerToken security.
	HandleBearerToken(ctx context.Context, operationName OperationName, t BearerToken) (context.Context, error)
	// HandleCookieKey handles cookieKey security.
	HandleCookieKey(ctx context.Context, operationName OperationName, t CookieKey) (context.Context, error)
	// HandleCustom handles custom security.
	HandleCustom(ctx context.Context, operationName OperationName, t Custom) (context.Context, error)
	// HandleHeaderKey handles headerKey security.
	HandleHeaderKey(ctx context.Context, operationName OperationName, t HeaderKey) (context.Context, error)
	// HandleQueryKey handles queryKey security.
	HandleQueryKey(ctx context.Context, operationName OperationName, t QueryKey) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesBasicAuth = map[string][]string{
	DisjointSecurityOperation:  []string{},
	IntersectSecurityOperation: []string{},
}

func (s *Server) securityBasicAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t BasicAuth
	if _, ok := findAuthorization(req.Header, "Basic"); !ok {
		return ctx, false, nil
	}
	username, password, ok := req.BasicAuth()
	if !ok {
		return nil, false, errors.New("invalid basic auth")
	}
	t.Username = username
	t.Password = password
	t.Roles = operationRolesBasicAuth[operationName]
	rctx, err := s.sec.HandleBasicAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesBearerToken = map[string][]string{
	IntersectSecurityOperation: []string{},
}

func (s *Server) securityBearerToken(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t BearerToken
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesBearerToken[operationName]
	rctx, err := s.sec.HandleBearerToken(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesCookieKey = map[string][]string{
	DisjointSecurityOperation: []string{},
}

func (s *Server) securityCookieKey(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t CookieKey
	const parameterName = "api_key"
	var value string
	switch cookie, err := req.Cookie(parameterName); {
	case err == nil: // if NO error
		value = cookie.Value
	case errors.Is(err, http.ErrNoCookie):
		return ctx, false, nil
	default:
		return nil, false, errors.Wrap(err, "get cookie value")
	}
	t.APIKey = value
	t.Roles = operationRolesCookieKey[operationName]
	rctx, err := s.sec.HandleCookieKey(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesCustom = map[string][]string{
	CustomSecurityOperation: []string{},
}

func (s *Server) securityCustom(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t Custom
	t.Request = req
	t.Roles = operationRolesCustom[operationName]
	rctx, err := s.sec.HandleCustom(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesHeaderKey = map[string][]string{
	DisjointSecurityOperation:  []string{},
	IntersectSecurityOperation: []string{},
}

func (s *Server) securityHeaderKey(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t HeaderKey
	const parameterName = "X-Api-Key"
	value := req.Header.Get(parameterName)
	if value == "" {
		return ctx, false, nil
	}
	t.APIKey = value
	t.Roles = operationRolesHeaderKey[operationName]
	rctx, err := s.sec.HandleHeaderKey(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesQueryKey = map[string][]string{
	DisjointSecurityOperation: []string{},
	OptionalSecurityOperation: []string{
		"admin",
	},
}

func (s *Server) securityQueryKey(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t QueryKey
	const parameterName = "api_key"
	q := req.URL.Query()
	if !q.Has(parameterName) {
		return ctx, false, nil
	}
	value := q.Get(parameterName)
	t.APIKey = value
	t.Roles = operationRolesQueryKey[operationName]
	rctx, err := s.sec.HandleQueryKey(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// BasicAuth provides basicAuth security value.
	BasicAuth(ctx context.Context, operationName OperationName) (BasicAuth, error)
	// BearerToken provides bearerToken security value.
	BearerToken(ctx context.Context, operationName OperationName) (BearerToken, error)
	// CookieKey provides cookieKey security value.
	CookieKey(ctx context.Context, operationName OperationName) (CookieKey, error)
	// Custom provides custom security value.
	Custom(ctx context.Context, operationName OperationName, req *http.Request) error
	// HeaderKey provides headerKey security value.
	HeaderKey(ctx context.Context, operationName OperationName) (HeaderKey, error)
	// QueryKey provides queryKey security value.
	QueryKey(ctx context.Context, operationName OperationName) (QueryKey, error)
}

func (s *Client) securityBasicAuth(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.BasicAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"BasicAuth\"")
	}
	req.SetBasicAuth(t.Username, t.Password)
	return nil
}
func (s *Client) securityBearerToken(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.BearerToken(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"BearerToken\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
func (s *Client) securityCookieKey(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.CookieKey(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"CookieKey\"")
	}
	req.AddCookie(&http.Cookie{
		Name:  "api_key",
		Value: t.APIKey,
	})
	return nil
}
func (s *Client) securityCustom(ctx context.Context, operationName OperationName, req *http.Request) error {
	if err := s.sec.Custom(ctx, operationName, req); err != nil {
		return errors.Wrap(err, "security source \"Custom\"")
	}
	return nil
}
func (s *Client) securityHeaderKey(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.HeaderKey(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"HeaderKey\"")
	}
	req.Header.Set("X-Api-Key", t.APIKey)
	return nil
}
func (s *Client) securityQueryKey(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.QueryKey(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"QueryKey\"")
	}
	q := req.URL.Query()
	q.Set("api_key", t.APIKey)
	req.URL.RawQuery = q.Encode()
	return nil
}

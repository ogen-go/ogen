// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		AllRequestBodies: ogenreflect.RuntimeOperation{
			Name: "AllRequestBodies",
			ID:   "allRequestBodies",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type: reflect.TypeOf(new(AllRequestBodiesReq)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AllRequestBodiesApplicationJSON)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesReqApplicationOctetStream)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesApplicationXWwwFormUrlencoded)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesMultipartFormData)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesReqTextPlain)).Elem(),
					},
					Contents: ogenreflect.Contents{
						"application/json":                  reflect.TypeOf(new(AllRequestBodiesApplicationJSON)).Elem(),
						"application/octet-stream":          reflect.TypeOf(new(AllRequestBodiesReqApplicationOctetStream)).Elem(),
						"application/x-www-form-urlencoded": reflect.TypeOf(new(AllRequestBodiesApplicationXWwwFormUrlencoded)).Elem(),
						"multipart/form-data":               reflect.TypeOf(new(AllRequestBodiesMultipartFormData)).Elem(),
						"text/plain":                        reflect.TypeOf(new(AllRequestBodiesReqTextPlain)).Elem(),
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AllRequestBodiesOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octet-stream": reflect.TypeOf(new(AllRequestBodiesOK)).Elem(),
							},
						},
					},
				},
			},
		},
		AllRequestBodiesOptional: ogenreflect.RuntimeOperation{
			Name: "AllRequestBodiesOptional",
			ID:   "allRequestBodiesOptional",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type: reflect.TypeOf(new(AllRequestBodiesOptionalReq)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AllRequestBodiesOptionalReqEmptyBody)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesOptionalApplicationJSON)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesOptionalReqApplicationOctetStream)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesOptionalApplicationXWwwFormUrlencoded)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesOptionalMultipartFormData)).Elem(),
						reflect.TypeOf(new(*AllRequestBodiesOptionalReqTextPlain)).Elem(),
					},
					Contents: ogenreflect.Contents{
						"application/json":                  reflect.TypeOf(new(AllRequestBodiesOptionalApplicationJSON)).Elem(),
						"application/octet-stream":          reflect.TypeOf(new(AllRequestBodiesOptionalReqApplicationOctetStream)).Elem(),
						"application/x-www-form-urlencoded": reflect.TypeOf(new(AllRequestBodiesOptionalApplicationXWwwFormUrlencoded)).Elem(),
						"multipart/form-data":               reflect.TypeOf(new(AllRequestBodiesOptionalMultipartFormData)).Elem(),
						"text/plain":                        reflect.TypeOf(new(AllRequestBodiesOptionalReqTextPlain)).Elem(),
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AllRequestBodiesOptionalOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octet-stream": reflect.TypeOf(new(AllRequestBodiesOptionalOK)).Elem(),
							},
						},
					},
				},
			},
		},
		Base64Request: ogenreflect.RuntimeOperation{
			Name: "Base64Request",
			ID:   "base64Request",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(Base64RequestReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Base64RequestOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"text/plain": reflect.TypeOf(new(Base64RequestOK)).Elem(),
							},
						},
					},
				},
			},
		},
		MaskContentType: ogenreflect.RuntimeOperation{
			Name: "MaskContentType",
			ID:   "maskContentType",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MaskContentTypeReqWithContentType)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MaskResponse)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MaskResponse)).Elem(),
							},
						},
					},
				},
			},
		},
		MaskContentTypeOptional: ogenreflect.RuntimeOperation{
			Name: "MaskContentTypeOptional",
			ID:   "maskContentTypeOptional",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MaskContentTypeOptionalReqWithContentType)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MaskResponse)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MaskResponse)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	AllRequestBodies         ogenreflect.RuntimeOperation
	AllRequestBodiesOptional ogenreflect.RuntimeOperation
	Base64Request            ogenreflect.RuntimeOperation
	MaskContentType          ogenreflect.RuntimeOperation
	MaskContentTypeOptional  ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "AllRequestBodies":
		return p.AllRequestBodies, true
	case "AllRequestBodiesOptional":
		return p.AllRequestBodiesOptional, true
	case "Base64Request":
		return p.Base64Request, true
	case "MaskContentType":
		return p.MaskContentType, true
	case "MaskContentTypeOptional":
		return p.MaskContentTypeOptional, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "allRequestBodies":
		return p.AllRequestBodies, true
	case "allRequestBodiesOptional":
		return p.AllRequestBodiesOptional, true
	case "base64Request":
		return p.Base64Request, true
	case "maskContentType":
		return p.MaskContentType, true
	case "maskContentTypeOptional":
		return p.MaskContentTypeOptional, true
	default:
		return op, false
	}
}

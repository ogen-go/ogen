// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ShowClient implements showClient operation.
	//
	// Get a client.
	//
	// GET /client
	ShowClient(ctx context.Context) (*Client, error)
	// ShowRoute implements showRoute operation.
	//
	// Get a route.
	//
	// GET /route
	ShowRoute(ctx context.Context) (*Route, error)
	// ShowServer implements showServer operation.
	//
	// Get server.
	//
	// GET /server
	ShowServer(ctx context.Context) (*Server, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// ApiServer implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type ApiServer struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewApiServer creates new Server.
func NewApiServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*ApiServer, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &ApiServer{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}

// WebhookHandler handles webhooks described by OpenAPI v3 specification.
type WebhookHandler interface {
	// StatusWebhook implements statusWebhook operation.
	//
	StatusWebhook(ctx context.Context) (*StatusWebhookOK, error)
}

// WebhookApiServer implements http server based on OpenAPI v3 specification and
// calls WebhookHandler to handle requests.
type WebhookApiServer struct {
	h WebhookHandler
	baseServer
}

// NewWebhookApiServer creates new WebhookServer.
func NewWebhookApiServer(h WebhookHandler, opts ...ServerOption) (*WebhookApiServer, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &WebhookApiServer{
		h:          h,
		baseServer: s,
	}, nil
}

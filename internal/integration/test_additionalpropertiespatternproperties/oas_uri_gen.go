// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// EncodeURI encodes AliveFlexData as URI form.
func (s *AliveFlexData) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("hello_world", func(e uri.Encoder) error {
		if val, ok := s.HelloWorld.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"hello_world\"")
	}
	for k, elem := range s.AdditionalProps {
		if err := e.EncodeField(k, func(e uri.Encoder) error {

			return e.EncodeValue(conv.StringToString(elem))
		}); err != nil {
			return errors.Wrapf(err, "encode field %q", k)
		}
	}
	for k, elem := range s.Pattern0Props {
		if err := e.EncodeField(k, func(e uri.Encoder) error {

			return e.EncodeValue(conv.StringToString(elem))
		}); err != nil {
			return errors.Wrapf(err, "encode field %q", k)
		}
	}
	return nil
}

var uriFieldsNameOfAliveFlexData = [1]string{
	0: "hello_world",
}

// DecodeURI decodes AliveFlexData from URI form.
func (s *AliveFlexData) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AliveFlexData to nil")
	}
	s.AdditionalProps = map[string]string{}
	s.Pattern0Props = map[string]string{}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "hello_world":
			if err := func() error {
				var sDotHelloWorldVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotHelloWorldVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.HelloWorld.SetTo(sDotHelloWorldVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hello_world\"")
			}
		default:
			var handled bool
			switch match, err := regexMap["^pat-.*"].MatchString(k); {
			case err != nil:
				return errors.Wrap(err, "execute regex")
			case match:
				handled = true
				var elem string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					elem = c
					return nil
				}(); err != nil {
					return errors.Wrapf(err, "decode field %q", k)
				}
				s.Pattern0Props[string(k)] = elem
			}
			if handled {
				return nil
			}
			var elem string
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				elem = c
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			s.AdditionalProps[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AliveFlexData")
	}

	return nil
}

// EncodeURI encodes AliveFlexDataAdditional as URI form.
func (s AliveFlexDataAdditional) EncodeURI(e uri.Encoder) error {
	for k, elem := range s {
		if err := e.EncodeField(k, func(e uri.Encoder) error {

			return e.EncodeValue(conv.StringToString(elem))
		}); err != nil {
			return errors.Wrapf(err, "encode field %q", k)
		}
	}
	return nil
}

// DecodeURI decodes AliveFlexDataAdditional from URI form.
func (s *AliveFlexDataAdditional) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AliveFlexDataAdditional to nil")
	}
	m := s.init()
	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		var elem string
		if err := func() error {
			val, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToString(val)
			if err != nil {
				return err
			}

			elem = c
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AliveFlexDataAdditional")
	}

	return nil
}

// EncodeURI encodes AliveFlexDataPattern0 as URI form.
func (s AliveFlexDataPattern0) EncodeURI(e uri.Encoder) error {
	for k, elem := range s {
		if err := e.EncodeField(k, func(e uri.Encoder) error {

			return e.EncodeValue(conv.StringToString(elem))
		}); err != nil {
			return errors.Wrapf(err, "encode field %q", k)
		}
	}
	return nil
}

// DecodeURI decodes AliveFlexDataPattern0 from URI form.
func (s *AliveFlexDataPattern0) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AliveFlexDataPattern0 to nil")
	}
	m := s.init()
	pattern := regexMap["^pat-.*"]
	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch match, err := pattern.MatchString(k); {
		case err != nil:
			return errors.Wrap(err, "execute regex")
		case !match:
			return nil
		}
		var elem string
		if err := func() error {
			val, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToString(val)
			if err != nil {
				return err
			}

			elem = c
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AliveFlexDataPattern0")
	}

	return nil
}

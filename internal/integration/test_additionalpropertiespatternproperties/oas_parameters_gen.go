// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// AliveParams is parameters of alive operation.
type AliveParams struct {
	FlexData OptAliveFlexData `json:",omitempty,omitzero"`
}

func unpackAliveParams(packed middleware.Parameters) (params AliveParams) {
	{
		key := middleware.ParameterKey{
			Name: "flexData",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FlexData = v.(OptAliveFlexData)
		}
	}
	return params
}

func decodeAliveParams(args [0]string, argsEscaped bool, r *http.Request) (params AliveParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: flexData.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "flexData",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "hello_world", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFlexDataVal AliveFlexData
				if err := func() error {
					return paramsDotFlexDataVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.FlexData.SetTo(paramsDotFlexDataVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "flexData",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

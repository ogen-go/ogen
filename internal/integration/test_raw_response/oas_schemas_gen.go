// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/http"
)

type GetMixedDataOKApplicationJSON struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *GetMixedDataOKApplicationJSON) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *GetMixedDataOKApplicationJSON) SetMessage(val OptString) {
	s.Message = val
}

func (*GetMixedDataOKApplicationJSON) getMixedDataRes() {}

type GetMixedDataOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetMixedDataOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetMixedDataOKRawApplicationOctetStream represents raw HTTP response for GetMixedData application/octet-stream.
type GetMixedDataOKRawApplicationOctetStream struct {
	Response *http.Response `json:"-"`
}

// GetResponse returns the value of Response.
func (s *GetMixedDataOKRawApplicationOctetStream) GetResponse() *http.Response {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *GetMixedDataOKRawApplicationOctetStream) SetResponse(val *http.Response) {
	s.Response = val
}

func (*GetMixedDataOKRawApplicationOctetStream) getMixedDataRes() {}

type GetNormalDataOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *GetNormalDataOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *GetNormalDataOK) SetMessage(val OptString) {
	s.Message = val
}

type GetRawDataOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *GetRawDataOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *GetRawDataOK) SetMessage(val OptString) {
	s.Message = val
}

// GetRawDataOKRawApplicationJSON represents raw HTTP response for GetRawData application/json.
type GetRawDataOKRawApplicationJSON struct {
	Response *http.Response `json:"-"`
}

// GetResponse returns the value of Response.
func (s *GetRawDataOKRawApplicationJSON) GetResponse() *http.Response {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *GetRawDataOKRawApplicationJSON) SetResponse(val *http.Response) {
	s.Response = val
}

func (*GetRawDataOKRawApplicationJSON) getRawDataRes() {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		TestFormURLEncoded: ogenreflect.RuntimeOperation{
			Name: "TestFormURLEncoded",
			ID:   "testFormURLEncoded",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TestForm)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TestFormURLEncodedOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TestMultipart: ogenreflect.RuntimeOperation{
			Name: "TestMultipart",
			ID:   "testMultipart",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TestForm)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TestMultipartOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TestMultipartUpload: ogenreflect.RuntimeOperation{
			Name: "TestMultipartUpload",
			ID:   "testMultipartUpload",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TestMultipartUploadReqForm)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TestMultipartUploadOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TestMultipartUploadOK)).Elem(),
							},
						},
					},
				},
			},
		},
		TestShareFormSchema: ogenreflect.RuntimeOperation{
			Name: "TestShareFormSchema",
			ID:   "testShareFormSchema",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type: reflect.TypeOf(new(TestShareFormSchemaReq)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SharedRequest)).Elem(),
						reflect.TypeOf(new(*SharedRequestForm)).Elem(),
					},
					Contents: ogenreflect.Contents{
						"application/json":    reflect.TypeOf(new(SharedRequest)).Elem(),
						"multipart/form-data": reflect.TypeOf(new(SharedRequestForm)).Elem(),
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TestShareFormSchemaOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	TestFormURLEncoded  ogenreflect.RuntimeOperation
	TestMultipart       ogenreflect.RuntimeOperation
	TestMultipartUpload ogenreflect.RuntimeOperation
	TestShareFormSchema ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "TestFormURLEncoded":
		return p.TestFormURLEncoded, true
	case "TestMultipart":
		return p.TestMultipart, true
	case "TestMultipartUpload":
		return p.TestMultipartUpload, true
	case "TestShareFormSchema":
		return p.TestShareFormSchema, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "testFormURLEncoded":
		return p.TestFormURLEncoded, true
	case "testMultipart":
		return p.TestMultipart, true
	case "testMultipartUpload":
		return p.TestMultipartUpload, true
	case "testShareFormSchema":
		return p.TestShareFormSchema, true
	default:
		return op, false
	}
}

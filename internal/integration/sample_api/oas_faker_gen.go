// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// SetFake set fake values.
func (s *AnyTest) SetFake() {
	{
		{
			s.Empty = []byte("null")
		}
	}
	{
		{
			s.AnyMap.SetFake()
		}
	}
	{
		{
			s.AnyArray = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.AnyArray = append(s.AnyArray, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *AnyTestAnyMap) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ArrayTest) SetFake() {
	{
		{
			s.Required = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Required = append(s.Required, elem)
			}
		}
	}
	{
		{
			s.Optional = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Optional = append(s.Optional, elem)
			}
		}
	}
	{
		{
			s.NullableRequired = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.NullableRequired = append(s.NullableRequired, elem)
			}
		}
	}
	{
		{
			s.NullableOptional.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Data) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Hostname = "string"
		}
	}
	{
		{
			s.Format = "string"
		}
	}
	{
		{
			s.Base64 = []byte("[]byte")
		}
	}
	{
		{
			s.NullableEnum.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DataDescription) SetFake() {
	var variant DescriptionDetailed

	{
		variant.SetFake()
	}
	s.SetDescriptionDetailed(variant)
}

// SetFake set fake values.
func (s *DefaultTest) SetFake() {
	{
		{
			s.Required = "string"
		}
	}
	{
		{
			s.Str.SetFake()
		}
	}
	{
		{
			s.NullStr.SetFake()
		}
	}
	{
		{
			s.Enum.SetFake()
		}
	}
	{
		{
			s.UUID.SetFake()
		}
	}
	{
		{
			s.IP.SetFake()
		}
	}
	{
		{
			s.IPV4.SetFake()
		}
	}
	{
		{
			s.IPV6.SetFake()
		}
	}
	{
		{
			s.URI.SetFake()
		}
	}
	{
		{
			s.Birthday.SetFake()
		}
	}
	{
		{
			s.Rate.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Hostname.SetFake()
		}
	}
	{
		{
			s.Format.SetFake()
		}
	}
	{
		{
			s.Base64 = []byte("[]byte")
		}
	}
}

// SetFake set fake values.
func (s *DefaultTestEnum) SetFake() {
	*s = DefaultTestEnumBig
}

// SetFake set fake values.
func (s *DescriptionDetailed) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Count = int(0)
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DescriptionSimple) SetFake() {
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *Error) SetFake() {
	{
		{
			s.Code = int64(0)
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *ID) SetFake() {
	var variant string

	{
		variant = "string"
	}
	s.SetString(variant)
}

// SetFake set fake values.
func (s *InlineDiscriminatorOneOf) SetFake() {
	{
		{
			s.Common = "string"
		}
	}
	{
		{
			s.OneOf.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *InlineDiscriminatorOneOfSum) SetFake() {
	var variant InlineOneOfBar

	{
		variant.SetFake()
	}
	s.SetInlineOneOfBar(variant)
}

// SetFake set fake values.
func (s *InlineOneOfBar) SetFake() {
	{
		{
			s.Kind.SetFake()
		}
	}
	{
		{
			s.Bar.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *InlineOneOfFoo) SetFake() {
	{
		{
			s.Kind.SetFake()
		}
	}
	{
		{
			s.Foo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *InlineUniqueFieldsOneOf) SetFake() {
	{
		{
			s.Common = "string"
		}
	}
	{
		{
			s.OneOf.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *InlineUniqueFieldsOneOfSum) SetFake() {
	var variant InlineOneOfFoo

	{
		variant.SetFake()
	}
	s.SetInlineOneOfFoo(variant)
}

// SetFake set fake values.
func (s *Issue1310) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Details.SetFake()
		}
	}
	{
		{
			s.Properties.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Issue1310Properties) SetFake() {
}

// SetFake set fake values.
func (s *Issue143) SetFake() {
	var variant Issue1430

	{
		variant.SetFake()
	}
	s.SetIssue1430(variant)
}

// SetFake set fake values.
func (s *Issue1430) SetFake() {
	{
		{
			s.CommonMinus1 = "string"
		}
	}
	{
		{
			s.CommonMinus2 = int(0)
		}
	}
	{
		{
			s.UniqueMinus1 = "string"
		}
	}
}

// SetFake set fake values.
func (s *Issue1431) SetFake() {
	{
		{
			s.CommonMinus1 = "string"
		}
	}
	{
		{
			s.CommonMinus2 = int(0)
		}
	}
	{
		{
			s.UniqueMinus2 = "string"
		}
	}
}

// SetFake set fake values.
func (s *Issue1432) SetFake() {
	{
		{
			s.CommonMinus1 = "string"
		}
	}
	{
		{
			s.CommonMinus2 = int(0)
		}
	}
	{
		{
			s.CommonMinus3.SetFake()
		}
	}
	{
		{
			s.UniqueMinus3 = "string"
		}
	}
}

// SetFake set fake values.
func (s *Issue1433) SetFake() {
	{
		{
			s.CommonMinus3.SetFake()
		}
	}
	{
		{
			s.UniqueMinus4 = "string"
		}
	}
}

// SetFake set fake values.
func (s *Issue1461) SetFake() {
	{
		{
			s.RequiredTest.SetFake()
		}
	}
	{
		{
			s.OptionalTest.SetFake()
		}
	}
	{
		{
			s.NullableTest.SetFake()
		}
	}
	{
		{
			s.NullableOptionalTest.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Issue1461NullableOptionalTest) SetFake() {
	{
		{
			s.Banana.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Issue1461NullableTest) SetFake() {
	{
		{
			s.Banana = nil
			for i := 0; i < 2; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Banana = append(s.Banana, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Issue1461OptionalTest) SetFake() {
	{
		{
			s.Banana = nil
			for i := 0; i < 2; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Banana = append(s.Banana, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Issue1461RequiredTest) SetFake() {
	{
		{
			s.Banana = nil
			for i := 0; i < 2; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Banana = append(s.Banana, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Issue943) SetFake() {
	var variant Issue943Variant1

	{
		variant.SetFake()
	}
	s.SetIssue943Variant1(variant)
}

// SetFake set fake values.
func (s *Issue943Map) SetFake() {
	{
		{
			s.Selector = "string"
		}
	}
	{
		{
			s.Pattern0Props.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Issue943MapPattern0) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Issue943Variant1) SetFake() {
	{
		{
			s.Selector = "string"
		}
	}
	{
		{
			s.Variant1Field = int(0)
		}
	}
}

// SetFake set fake values.
func (s *Issue943Variant2) SetFake() {
	{
		{
			s.Selector = "string"
		}
	}
	{
		{
			s.Variant2Field = true
		}
	}
}

// SetFake set fake values.
func (s *MapWithProperties) SetFake() {
	{
		{
			s.Required = int(0)
		}
	}
	{
		{
			s.Optional.SetFake()
		}
	}
	{
		{
			s.SubMap.SetFake()
		}
	}
	{
		{
			s.InlinedSubMap.SetFake()
		}
	}
	{
		{
			s.MapValidation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MapWithPropertiesAdditional) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *MapWithPropertiesInlinedSubMap) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *MaxPropertiesTest) SetFake() {
	{
		{
			s.Required = int(0)
		}
	}
	{
		{
			s.OptionalA.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MergeDiscriminatorOneOf) SetFake() {
	{
		{
			s.Common = "string"
		}
	}
	{
		{
			s.OneOf.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MergeDiscriminatorOneOfSum) SetFake() {
	var variant InlineOneOfBar

	{
		variant.SetFake()
	}
	s.SetInlineOneOfBar(variant)
}

// SetFake set fake values.
func (s *MergeUniqueFieldsOneOf) SetFake() {
	{
		{
			s.Common = "string"
		}
	}
	{
		{
			s.OneOf.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MergeUniqueFieldsOneOfSum) SetFake() {
	var variant InlineOneOfFoo

	{
		variant.SetFake()
	}
	s.SetInlineOneOfFoo(variant)
}

// SetFake set fake values.
func (s *NilInt) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableEnumsBoth) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableEnumsOnlyNullValue) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableEnumsOnlyNullable) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilString) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NoAdditionalPropertiesTest) SetFake() {
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.Empty = nil
		}
	}
	{
		{
			s.OneProperty.SetFake()
		}
	}
	{
		{
			s.OnlyPatterned.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullValue) SetFake() {
	var unwrapped struct{}
	{
		unwrapped = struct{}{}
	}
	*s = NullValue(unwrapped)
}

// SetFake set fake values.
func (s *NullableEnums) SetFake() {
	{
		{
			s.OnlyNullable.SetFake()
		}
	}
	{
		{
			s.OnlyNullValue.SetFake()
		}
	}
	{
		{
			s.Both.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableEnumsBoth) SetFake() {
	*s = NullableEnumsBothAsc
}

// SetFake set fake values.
func (s *NullableEnumsOnlyNullValue) SetFake() {
	*s = NullableEnumsOnlyNullValueAsc
}

// SetFake set fake values.
func (s *NullableEnumsOnlyNullable) SetFake() {
	*s = NullableEnumsOnlyNullableAsc
}

// SetFake set fake values.
func (s *OneOfBooleanSumNullables) SetFake() {
	var variant bool

	{
		variant = true
	}
	s.SetBool(variant)
}

// SetFake set fake values.
func (s *OneOfBugs) SetFake() {
	{
		{
			s.Issue143.SetFake()
		}
	}
	{
		{
			s.AdditionalMinusFields.SetFake()
		}
	}
	{
		{
			s.OneOfMinusUUIDMinusIntMinusEnum.SetFake()
		}
	}
	{
		{
			s.OneOfMinusMappingMinusReference.SetFake()
		}
	}
	{
		{
			s.Issue943.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OneOfMappingReference) SetFake() {
	var variant OneOfMappingReferenceB

	{
		variant.SetFake()
	}
	s.SetOneOfMappingReferenceB(variant)
}

// SetFake set fake values.
func (s *OneOfMappingReferenceA) SetFake() {
	{
		{
			s.InfoType.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OneOfMappingReferenceB) SetFake() {
	{
		{
			s.InfoType.SetFake()
		}
	}
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.Data = nil
		}
	}
	{
		{
			s.Info.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OneOfMappingReferenceBData) SetFake() {
}

// SetFake set fake values.
func (s *OneOfNullables) SetFake() {
	var variant struct{}

	{
		variant = struct{}{}
	}
	s.SetNull(variant)
}

// SetFake set fake values.
func (s *OneOfUUIDAndIntEnum) SetFake() {
	var variant uuid.UUID

	{
		variant = uuid.New()
	}
	s.SetUUID(variant)
}

// SetFake set fake values.
func (s *OneOfUUIDAndIntEnum1) SetFake() {
	*s = OneOfUUIDAndIntEnum10
}

// SetFake set fake values.
func (s *OneOfWithNullable) SetFake() {
	var variant struct{}

	{
		variant = struct{}{}
	}
	s.SetNull(variant)
}

// SetFake set fake values.
func (s *OnePropertyObject) SetFake() {
	{
		{
			s.Foo = "string"
		}
	}
}

// SetFake set fake values.
func (s *OneVariantHasNoUniqueFields) SetFake() {
	var variant OneVariantHasNoUniqueFields0

	{
		variant.SetFake()
	}
	s.SetOneVariantHasNoUniqueFields0(variant)
}

// SetFake set fake values.
func (s *OneVariantHasNoUniqueFields0) SetFake() {
	{
		{
			s.A = "string"
		}
	}
	{
		{
			s.B.SetFake()
		}
	}
	{
		{
			s.C = "string"
		}
	}
}

// SetFake set fake values.
func (s *OneVariantHasNoUniqueFields1) SetFake() {
	{
		{
			s.A = "string"
		}
	}
	{
		{
			s.B.SetFake()
		}
	}
	{
		{
			s.C = "string"
		}
	}
	{
		{
			s.D.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OnlyEmptyObject) SetFake() {
}

// SetFake set fake values.
func (s *OnlyPatternedPropsObject) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *OptAnyTest) SetFake() {
	var elem AnyTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAnyTestAnyMap) SetFake() {
	var elem AnyTestAnyMap
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptArrayTest) SetFake() {
	var elem ArrayTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptData) SetFake() {
	var elem Data
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDate) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDateTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDefaultTestEnum) SetFake() {
	var elem DefaultTestEnum
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDuration) SetFake() {
	var elem time.Duration
	{
		elem = time.Duration(5 * time.Second)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFloat64) SetFake() {
	var elem float64
	{
		elem = float64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptID) SetFake() {
	var elem ID
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIP) SetFake() {
	var elem netip.Addr
	{
		elem = netip.MustParseAddr("127.0.0.1")
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIPv4) SetFake() {
	var elem netip.Addr
	{
		elem = netip.MustParseAddr("127.0.0.1")
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIPv6) SetFake() {
	var elem netip.Addr
	{
		elem = netip.MustParseAddr("::1")
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInlineDiscriminatorOneOf) SetFake() {
	var elem InlineDiscriminatorOneOf
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInlineUniqueFieldsOneOf) SetFake() {
	var elem InlineUniqueFieldsOneOf
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt32) SetFake() {
	var elem int32
	{
		elem = int32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssue1310Properties) SetFake() {
	var elem *Issue1310Properties
	{ // Keep pointer nil to prevent infinite recursion.
		elem = nil
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssue1461NullableOptionalTest) SetFake() {
	var elem Issue1461NullableOptionalTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssue1461NullableTest) SetFake() {
	var elem Issue1461NullableTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssue1461OptionalTest) SetFake() {
	var elem Issue1461OptionalTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssue1461RequiredTest) SetFake() {
	var elem Issue1461RequiredTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssue943) SetFake() {
	var elem Issue943
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMapWithProperties) SetFake() {
	var elem MapWithProperties
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMapWithPropertiesInlinedSubMap) SetFake() {
	var elem MapWithPropertiesInlinedSubMap
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMaxPropertiesTest) SetFake() {
	var elem MaxPropertiesTest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMergeDiscriminatorOneOf) SetFake() {
	var elem MergeDiscriminatorOneOf
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMergeUniqueFieldsOneOf) SetFake() {
	var elem MergeUniqueFieldsOneOf
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNilString) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNullValue) SetFake() {
	var elem NullValue
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNullableEnums) SetFake() {
	var elem NullableEnums
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOneOfMappingReference) SetFake() {
	var elem OneOfMappingReference
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOneOfUUIDAndIntEnum) SetFake() {
	var elem OneOfUUIDAndIntEnum
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOnePropertyObject) SetFake() {
	var elem OnePropertyObject
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOnlyPatternedPropsObject) SetFake() {
	var elem OnlyPatternedPropsObject
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPet) SetFake() {
	var elem Pet
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPetName) SetFake() {
	var elem PetName
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPetType) SetFake() {
	var elem PetType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringMap) SetFake() {
	var elem StringMap
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringStringMap) SetFake() {
	var elem StringStringMap
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptURI) SetFake() {
	var elem url.URL
	{
		elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUUID) SetFake() {
	var elem uuid.UUID
	{
		elem = uuid.New()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptValidationStringMap) SetFake() {
	var elem ValidationStringMap
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *PatternRecursiveMap) SetFake() {
	var (
		elem PatternRecursiveMap
		m    map[string]PatternRecursiveMap = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Pet) SetFake() {
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.Primary = nil
		}
	}
	{
		{
			s.ID = int64(0)
		}
	}
	{
		{
			s.UniqueID = uuid.New()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Kind.SetFake()
		}
	}
	{
		{
			s.Tag.SetFake()
		}
	}
	{
		{
			s.IP = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.IPV4 = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.IPV6 = netip.MustParseAddr("::1")
		}
	}
	{
		{
			s.URI = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Birthday = time.Now()
		}
	}
	{
		{
			s.Rate = time.Duration(5 * time.Second)
		}
	}
	{
		{
			s.Nickname.SetFake()
		}
	}
	{
		{
			s.NullStr.SetFake()
		}
	}
	{
		{
			s.Friends = nil
			for i := 0; i < 0; i++ {
				var elem Pet
				{
					elem.SetFake()
				}
				s.Friends = append(s.Friends, elem)
			}
		}
	}
	{
		{
			s.Next.SetFake()
		}
	}
	{
		{
			s.TestInteger1.SetFake()
		}
	}
	{
		{
			s.TestFloat1.SetFake()
		}
	}
	{
		{
			s.TestArray1 = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.TestArray1 = append(s.TestArray1, elem)
			}
		}
	}
	{
		{
			s.TestArray2.SetFake()
		}
	}
	{
		{
			s.TestMap.SetFake()
		}
	}
	{
		{
			s.TestMapWithProps.SetFake()
		}
	}
	{
		{
			s.TestAny.SetFake()
		}
	}
	{
		{
			s.TestMaxProperties.SetFake()
		}
	}
	{
		{
			s.TestDate.SetFake()
		}
	}
	{
		{
			s.TestDuration.SetFake()
		}
	}
	{
		{
			s.TestTime.SetFake()
		}
	}
	{
		{
			s.TestDateTime.SetFake()
		}
	}
	{
		{
			s.NullValue.SetFake()
		}
	}
	{
		{
			s.ExtraTags.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PetGetDef) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *PetKind) SetFake() {
	*s = PetKindBig
}

// SetFake set fake values.
func (s *PetName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = PetName(unwrapped)
}

// SetFake set fake values.
func (s *PetType) SetFake() {
	*s = PetTypeFifa
}

// SetFake set fake values.
func (s *RecursiveArray) SetFake() {
	var unwrapped []RecursiveArray
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem RecursiveArray
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = RecursiveArray(unwrapped)
}

// SetFake set fake values.
func (s *RecursiveMap) SetFake() {
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.OptionalRecursiveField = nil
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RecursiveMapAdditional) SetFake() {
	var (
		elem RecursiveMap
		m    map[string]RecursiveMap = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *StringIntMap) SetFake() {
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
	{
		{
			s.Pattern0Props.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *StringIntMapAdditional) SetFake() {
	var (
		elem int
		m    map[string]int = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *StringIntMapPattern0) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *StringMap) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *StringStringMap) SetFake() {
	var (
		elem StringMap
		m    map[string]StringMap = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *TestFloatValidation) SetFake() {
	{
		{
			s.Minmax = float64(0)
		}
	}
	{
		{
			s.MultipleOf = float64(0)
		}
	}
}

// SetFake set fake values.
func (s *TestInlineOneOf) SetFake() {
	{
		{
			s.InlineDiscriminator.SetFake()
		}
	}
	{
		{
			s.MergeDiscriminator.SetFake()
		}
	}
	{
		{
			s.InlineUniqueFields.SetFake()
		}
	}
	{
		{
			s.MergeUniqueFields.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TestNullableOneofsCreated) SetFake() {
	var unwrapped OneOfWithNullable
	{
		unwrapped.SetFake()
	}
	*s = TestNullableOneofsCreated(unwrapped)
}

// SetFake set fake values.
func (s *TestNullableOneofsOK) SetFake() {
	var unwrapped OneOfWithNullable
	{
		unwrapped.SetFake()
	}
	*s = TestNullableOneofsOK(unwrapped)
}

// SetFake set fake values.
func (s *TupleNamedTest) SetFake() {
	{
		{
			s.Integer = int(0)
		}
	}
	{
		{
			s.Boolean = true
		}
	}
	{
		{
			s.V2 = "string"
		}
	}
	{
		{
			s.V3 = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.V3 = append(s.V3, elem)
			}
		}
	}
	{
		{
			s.V4.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TupleNamedTestV4) SetFake() {
	{
		{
			s.Foo = "string"
		}
	}
	{
		{
			s.Bar.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TupleTest) SetFake() {
	{
		{
			s.V0 = int(0)
		}
	}
	{
		{
			s.V1 = true
		}
	}
	{
		{
			s.V2 = "string"
		}
	}
	{
		{
			s.V3 = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.V3 = append(s.V3, elem)
			}
		}
	}
	{
		{
			s.V4.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TupleTestV4) SetFake() {
	{
		{
			s.Foo = "string"
		}
	}
	{
		{
			s.Bar.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UniqueItemsTest) SetFake() {
	{
		{
			s.RequiredUnique = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredUnique = append(s.RequiredUnique, elem)
			}
		}
	}
	{
		{
			s.NullableOptionalUnique.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ValidationStringMap) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 1; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

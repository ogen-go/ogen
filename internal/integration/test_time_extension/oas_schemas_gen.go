// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

type Alias time.Time

// NewOptAlias returns new OptAlias with value set to v.
func NewOptAlias(v Alias) OptAlias {
	return OptAlias{
		Value: v,
		Set:   true,
	}
}

// OptAlias is optional Alias.
type OptAlias struct {
	Value Alias
	Set   bool
}

// IsSet returns true if OptAlias was set.
func (o OptAlias) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlias) Reset() {
	var v Alias
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlias) SetTo(v Alias) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlias) Get() (v Alias, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlias) Or(d Alias) Alias {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OptionalOK struct {
	Date     OptDate     `json:"date"`
	Time     OptTime     `json:"time"`
	DateTime OptDateTime `json:"dateTime"`
	Alias    OptAlias    `json:"alias"`
}

// GetDate returns the value of Date.
func (s *OptionalOK) GetDate() OptDate {
	return s.Date
}

// GetTime returns the value of Time.
func (s *OptionalOK) GetTime() OptTime {
	return s.Time
}

// GetDateTime returns the value of DateTime.
func (s *OptionalOK) GetDateTime() OptDateTime {
	return s.DateTime
}

// GetAlias returns the value of Alias.
func (s *OptionalOK) GetAlias() OptAlias {
	return s.Alias
}

// SetDate sets the value of Date.
func (s *OptionalOK) SetDate(val OptDate) {
	s.Date = val
}

// SetTime sets the value of Time.
func (s *OptionalOK) SetTime(val OptTime) {
	s.Time = val
}

// SetDateTime sets the value of DateTime.
func (s *OptionalOK) SetDateTime(val OptDateTime) {
	s.DateTime = val
}

// SetAlias sets the value of Alias.
func (s *OptionalOK) SetAlias(val OptAlias) {
	s.Alias = val
}

type RequiredOK struct {
	Date     time.Time `json:"date"`
	Time     time.Time `json:"time"`
	DateTime time.Time `json:"dateTime"`
	Alias    Alias     `json:"alias"`
}

// GetDate returns the value of Date.
func (s *RequiredOK) GetDate() time.Time {
	return s.Date
}

// GetTime returns the value of Time.
func (s *RequiredOK) GetTime() time.Time {
	return s.Time
}

// GetDateTime returns the value of DateTime.
func (s *RequiredOK) GetDateTime() time.Time {
	return s.DateTime
}

// GetAlias returns the value of Alias.
func (s *RequiredOK) GetAlias() Alias {
	return s.Alias
}

// SetDate sets the value of Date.
func (s *RequiredOK) SetDate(val time.Time) {
	s.Date = val
}

// SetTime sets the value of Time.
func (s *RequiredOK) SetTime(val time.Time) {
	s.Time = val
}

// SetDateTime sets the value of DateTime.
func (s *RequiredOK) SetDateTime(val time.Time) {
	s.DateTime = val
}

// SetAlias sets the value of Alias.
func (s *RequiredOK) SetAlias(val Alias) {
	s.Alias = val
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/google/uuid"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		DataGetFormat: ogenreflect.RuntimeOperation{
			Name: "DataGetFormat",
			ID:   "dataGetFormat",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DataGetFormatParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "foo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "foo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "bar",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "bar",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "baz",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "baz",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "kek",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "kek",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
		DefaultTest: ogenreflect.RuntimeOperation{
			Name: "DefaultTest",
			ID:   "defaultTest",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(DefaultTest)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DefaultTestParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "default",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "default",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(int32)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(int32)).Elem(),
							},
						},
					},
				},
			},
		},
		ErrorGet: ogenreflect.RuntimeOperation{
			Name: "ErrorGet",
			ID:   "errorGet",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ErrorStatusCode)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		FoobarGet: ogenreflect.RuntimeOperation{
			Name: "FoobarGet",
			ID:   "foobarGet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(FoobarGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "inlinedParam",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "inlinedParam",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "skip",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int32)).Elem(),
							Name:     "skip",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(FoobarGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Pet)).Elem(),
						reflect.TypeOf(new(*NotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		FoobarPost: ogenreflect.RuntimeOperation{
			Name: "FoobarPost",
			ID:   "foobarPost",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptPet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(FoobarPostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Pet)).Elem(),
						reflect.TypeOf(new(*NotFound)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		FoobarPut: ogenreflect.RuntimeOperation{
			Name: "FoobarPut",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(FoobarPutDef)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		NoAdditionalPropertiesTest: ogenreflect.RuntimeOperation{
			Name: "NoAdditionalPropertiesTest",
			ID:   "noAdditionalPropertiesTest",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(NoAdditionalPropertiesTest)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(NoAdditionalPropertiesTest)).Elem(),
							},
						},
					},
				},
			},
		},
		NullableDefaultResponse: ogenreflect.RuntimeOperation{
			Name: "NullableDefaultResponse",
			ID:   "nullableDefaultResponse",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(NilIntStatusCode)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(NilIntStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		OneofBug: ogenreflect.RuntimeOperation{
			Name: "OneofBug",
			ID:   "oneofBug",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OneOfBugs)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OneofBugOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		PatternRecursiveMapGet: ogenreflect.RuntimeOperation{
			Name: "PatternRecursiveMapGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PatternRecursiveMap)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PatternRecursiveMap)).Elem(),
							},
						},
					},
				},
			},
		},
		PetCreate: ogenreflect.RuntimeOperation{
			Name: "PetCreate",
			ID:   "petCreate",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptPet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Pet)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
					},
				},
			},
		},
		PetFriendsNamesByID: ogenreflect.RuntimeOperation{
			Name: "PetFriendsNamesByID",
			ID:   "petFriendsNamesByID",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetFriendsNamesByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]string)).Elem(),
							},
						},
					},
				},
			},
		},
		PetGet: ogenreflect.RuntimeOperation{
			Name: "PetGet",
			ID:   "petGet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "petID",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "petID",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "x-tags",
							In:   "header",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new([]uuid.UUID)).Elem(),
							Name:     "x-tags",
							In:       "header",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "x-scope",
							In:   "header",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new([]string)).Elem(),
							Name:     "x-scope",
							In:       "header",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "token",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "token",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PetGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Pet)).Elem(),
						reflect.TypeOf(new(*PetGetDefStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetGetDefStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PetGetAvatarByID: ogenreflect.RuntimeOperation{
			Name: "PetGetAvatarByID",
			ID:   "petGetAvatarByID",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetGetAvatarByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "petID",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "petID",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PetGetAvatarByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetGetAvatarByIDOK)).Elem(),
						reflect.TypeOf(new(*NotFound)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octet-stream": reflect.TypeOf(new(PetGetAvatarByIDOK)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PetGetAvatarByName: ogenreflect.RuntimeOperation{
			Name: "PetGetAvatarByName",
			ID:   "petGetAvatarByName",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetGetAvatarByNameParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PetGetAvatarByNameRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetGetAvatarByNameOK)).Elem(),
						reflect.TypeOf(new(*NotFound)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octet-stream": reflect.TypeOf(new(PetGetAvatarByNameOK)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PetGetByName: ogenreflect.RuntimeOperation{
			Name: "PetGetByName",
			ID:   "petGetByName",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetGetByNameParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Pet)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
					},
				},
			},
		},
		PetNameByID: ogenreflect.RuntimeOperation{
			Name: "PetNameByID",
			ID:   "petNameByID",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetNameByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
		PetUpdateNameAliasPost: ogenreflect.RuntimeOperation{
			Name: "PetUpdateNameAliasPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptPetName)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PetUpdateNameAliasPostDef)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		PetUpdateNamePost: ogenreflect.RuntimeOperation{
			Name: "PetUpdateNamePost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptString)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PetUpdateNamePostDef)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		PetUploadAvatarByID: ogenreflect.RuntimeOperation{
			Name: "PetUploadAvatarByID",
			ID:   "petUploadAvatarByID",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PetUploadAvatarByIDReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PetUploadAvatarByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "petID",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "petID",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PetUploadAvatarByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetUploadAvatarByIDOK)).Elem(),
						reflect.TypeOf(new(*NotFound)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		RecursiveArrayGet: ogenreflect.RuntimeOperation{
			Name: "RecursiveArrayGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RecursiveArray)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RecursiveArray)).Elem(),
							},
						},
					},
				},
			},
		},
		RecursiveMapGet: ogenreflect.RuntimeOperation{
			Name: "RecursiveMapGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RecursiveMap)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RecursiveMap)).Elem(),
							},
						},
					},
				},
			},
		},
		SecurityTest: ogenreflect.RuntimeOperation{
			Name: "SecurityTest",
			ID:   "securityTest",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
		StringIntMapGet: ogenreflect.RuntimeOperation{
			Name: "StringIntMapGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(StringIntMap)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(StringIntMap)).Elem(),
							},
						},
					},
				},
			},
		},
		TestFloatValidation: ogenreflect.RuntimeOperation{
			Name: "TestFloatValidation",
			ID:   "testFloatValidation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TestFloatValidation)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TestFloatValidationOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TestNullableOneofs: ogenreflect.RuntimeOperation{
			Name: "TestNullableOneofs",
			ID:   "testNullableOneofs",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TestNullableOneofsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TestNullableOneofsApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*TestNullableOneofsApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*OneOfBooleanSumNullables)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TestNullableOneofsApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TestNullableOneofsApplicationJSONCreated)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OneOfBooleanSumNullables)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	DataGetFormat              ogenreflect.RuntimeOperation
	DefaultTest                ogenreflect.RuntimeOperation
	ErrorGet                   ogenreflect.RuntimeOperation
	FoobarGet                  ogenreflect.RuntimeOperation
	FoobarPost                 ogenreflect.RuntimeOperation
	FoobarPut                  ogenreflect.RuntimeOperation
	NoAdditionalPropertiesTest ogenreflect.RuntimeOperation
	NullableDefaultResponse    ogenreflect.RuntimeOperation
	OneofBug                   ogenreflect.RuntimeOperation
	PatternRecursiveMapGet     ogenreflect.RuntimeOperation
	PetCreate                  ogenreflect.RuntimeOperation
	PetFriendsNamesByID        ogenreflect.RuntimeOperation
	PetGet                     ogenreflect.RuntimeOperation
	PetGetAvatarByID           ogenreflect.RuntimeOperation
	PetGetAvatarByName         ogenreflect.RuntimeOperation
	PetGetByName               ogenreflect.RuntimeOperation
	PetNameByID                ogenreflect.RuntimeOperation
	PetUpdateNameAliasPost     ogenreflect.RuntimeOperation
	PetUpdateNamePost          ogenreflect.RuntimeOperation
	PetUploadAvatarByID        ogenreflect.RuntimeOperation
	RecursiveArrayGet          ogenreflect.RuntimeOperation
	RecursiveMapGet            ogenreflect.RuntimeOperation
	SecurityTest               ogenreflect.RuntimeOperation
	StringIntMapGet            ogenreflect.RuntimeOperation
	TestFloatValidation        ogenreflect.RuntimeOperation
	TestNullableOneofs         ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "DataGetFormat":
		return p.DataGetFormat, true
	case "DefaultTest":
		return p.DefaultTest, true
	case "ErrorGet":
		return p.ErrorGet, true
	case "FoobarGet":
		return p.FoobarGet, true
	case "FoobarPost":
		return p.FoobarPost, true
	case "FoobarPut":
		return p.FoobarPut, true
	case "NoAdditionalPropertiesTest":
		return p.NoAdditionalPropertiesTest, true
	case "NullableDefaultResponse":
		return p.NullableDefaultResponse, true
	case "OneofBug":
		return p.OneofBug, true
	case "PatternRecursiveMapGet":
		return p.PatternRecursiveMapGet, true
	case "PetCreate":
		return p.PetCreate, true
	case "PetFriendsNamesByID":
		return p.PetFriendsNamesByID, true
	case "PetGet":
		return p.PetGet, true
	case "PetGetAvatarByID":
		return p.PetGetAvatarByID, true
	case "PetGetAvatarByName":
		return p.PetGetAvatarByName, true
	case "PetGetByName":
		return p.PetGetByName, true
	case "PetNameByID":
		return p.PetNameByID, true
	case "PetUpdateNameAliasPost":
		return p.PetUpdateNameAliasPost, true
	case "PetUpdateNamePost":
		return p.PetUpdateNamePost, true
	case "PetUploadAvatarByID":
		return p.PetUploadAvatarByID, true
	case "RecursiveArrayGet":
		return p.RecursiveArrayGet, true
	case "RecursiveMapGet":
		return p.RecursiveMapGet, true
	case "SecurityTest":
		return p.SecurityTest, true
	case "StringIntMapGet":
		return p.StringIntMapGet, true
	case "TestFloatValidation":
		return p.TestFloatValidation, true
	case "TestNullableOneofs":
		return p.TestNullableOneofs, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "dataGetFormat":
		return p.DataGetFormat, true
	case "defaultTest":
		return p.DefaultTest, true
	case "errorGet":
		return p.ErrorGet, true
	case "foobarGet":
		return p.FoobarGet, true
	case "foobarPost":
		return p.FoobarPost, true
	case "noAdditionalPropertiesTest":
		return p.NoAdditionalPropertiesTest, true
	case "nullableDefaultResponse":
		return p.NullableDefaultResponse, true
	case "oneofBug":
		return p.OneofBug, true
	case "petCreate":
		return p.PetCreate, true
	case "petFriendsNamesByID":
		return p.PetFriendsNamesByID, true
	case "petGet":
		return p.PetGet, true
	case "petGetAvatarByID":
		return p.PetGetAvatarByID, true
	case "petGetAvatarByName":
		return p.PetGetAvatarByName, true
	case "petGetByName":
		return p.PetGetByName, true
	case "petNameByID":
		return p.PetNameByID, true
	case "petUploadAvatarByID":
		return p.PetUploadAvatarByID, true
	case "securityTest":
		return p.SecurityTest, true
	case "testFloatValidation":
		return p.TestFloatValidation, true
	case "testNullableOneofs":
		return p.TestNullableOneofs, true
	default:
		return op, false
	}
}

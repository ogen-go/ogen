// Code generated by ogen, DO NOT EDIT.

package api

import (
	decimal2 "github.com/ogen-go/ogen/_testdata/testtypes/bar/decimal"
	"github.com/ogen-go/ogen/_testdata/testtypes/foo/decimal"
)

// NewOptDecimal returns new OptDecimal with value set to v.
func NewOptDecimal(v decimal.Decimal) OptDecimal {
	return OptDecimal{
		Value: v,
		Set:   true,
	}
}

// OptDecimal is optional decimal.Decimal.
type OptDecimal struct {
	Value decimal.Decimal
	Set   bool
}

// IsSet returns true if OptDecimal was set.
func (o OptDecimal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDecimal) Reset() {
	var v decimal.Decimal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDecimal) SetTo(v decimal.Decimal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDecimal) Get() (v decimal.Decimal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDecimal) Or(d decimal.Decimal) decimal.Decimal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDecimal2 returns new OptDecimal2 with value set to v.
func NewOptDecimal2(v decimal2.Decimal) OptDecimal2 {
	return OptDecimal2{
		Value: v,
		Set:   true,
	}
}

// OptDecimal2 is optional decimal2.Decimal.
type OptDecimal2 struct {
	Value decimal2.Decimal
	Set   bool
}

// IsSet returns true if OptDecimal2 was set.
func (o OptDecimal2) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDecimal2) Reset() {
	var v decimal2.Decimal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDecimal2) SetTo(v decimal2.Decimal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDecimal2) Get() (v decimal2.Decimal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDecimal2) Or(d decimal2.Decimal) decimal2.Decimal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OptionalOK struct {
	Foo OptDecimal  `json:"foo"`
	Bar OptDecimal2 `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *OptionalOK) GetFoo() OptDecimal {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *OptionalOK) GetBar() OptDecimal2 {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *OptionalOK) SetFoo(val OptDecimal) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *OptionalOK) SetBar(val OptDecimal2) {
	s.Bar = val
}

type RequiredOK struct {
	Foo decimal.Decimal  `json:"foo"`
	Bar decimal2.Decimal `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *RequiredOK) GetFoo() decimal.Decimal {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *RequiredOK) GetBar() decimal2.Decimal {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *RequiredOK) SetFoo(val decimal.Decimal) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *RequiredOK) SetBar(val decimal2.Decimal) {
	s.Bar = val
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	decimal2 "github.com/ogen-go/ogen/_testdata/testtypes/bar/decimal"
	"github.com/ogen-go/ogen/_testdata/testtypes/foo/decimal"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode encodes decimal.Decimal as json.
func (o OptDecimal) Encode(e *jx.Encoder, format func(*jx.Encoder, decimal.Decimal)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes decimal.Decimal from json.
func (o *OptDecimal) Decode(d *jx.Decoder, format func(*jx.Decoder) (decimal.Decimal, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDecimal to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDecimal) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeExternal)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDecimal) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeExternal[decimal.Decimal])
}

// Encode encodes decimal2.Decimal as json.
func (o OptDecimal2) Encode(e *jx.Encoder, format func(*jx.Encoder, decimal2.Decimal)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes decimal2.Decimal from json.
func (o *OptDecimal2) Decode(d *jx.Decoder, format func(*jx.Decoder) (decimal2.Decimal, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDecimal2 to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDecimal2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeExternal)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDecimal2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeExternal[decimal2.Decimal])
}

// Encode implements json.Marshaler.
func (s *OptionalOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OptionalOK) encodeFields(e *jx.Encoder) {
	{
		if s.Foo.Set {
			e.FieldStart("foo")
			s.Foo.Encode(e, json.EncodeExternal)
		}
	}
	{
		if s.Bar.Set {
			e.FieldStart("bar")
			s.Bar.Encode(e, json.EncodeExternal)
		}
	}
}

var jsonFieldsNameOfOptionalOK = [2]string{
	0: "foo",
	1: "bar",
}

// Decode decodes OptionalOK from json.
func (s *OptionalOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OptionalOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "foo":
			if err := func() error {
				s.Foo.Reset()
				if err := s.Foo.Decode(d, json.DecodeExternal[decimal.Decimal]); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"foo\"")
			}
		case "bar":
			if err := func() error {
				s.Bar.Reset()
				if err := s.Bar.Decode(d, json.DecodeExternal[decimal2.Decimal]); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bar\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OptionalOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OptionalOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptionalOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RequiredOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RequiredOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("foo")
		json.EncodeExternal(e, s.Foo)
	}
	{
		e.FieldStart("bar")
		json.EncodeExternal(e, s.Bar)
	}
}

var jsonFieldsNameOfRequiredOK = [2]string{
	0: "foo",
	1: "bar",
}

// Decode decodes RequiredOK from json.
func (s *RequiredOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RequiredOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "foo":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeExternal[decimal.Decimal](d)
				s.Foo = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"foo\"")
			}
		case "bar":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeExternal[decimal2.Decimal](d)
				s.Bar = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bar\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RequiredOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfRequiredOK) {
					name = jsonFieldsNameOfRequiredOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RequiredOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RequiredOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *AnyTest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AnyTest) encodeFields(e *jx.Encoder) {
	{
		if len(s.Empty) != 0 {
			e.FieldStart("empty")
			e.Raw(s.Empty)
		}
	}
	{
		if s.AnyMap.Set {
			e.FieldStart("any_map")
			s.AnyMap.Encode(e)
		}
	}
	{
		if s.AnyArray != nil {
			e.FieldStart("any_array")
			e.ArrStart()
			for _, elem := range s.AnyArray {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAnyTest = [3]string{
	0: "empty",
	1: "any_map",
	2: "any_array",
}

// Decode decodes AnyTest from json.
func (s *AnyTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnyTest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "empty":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Empty = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"empty\"")
			}
		case "any_map":
			if err := func() error {
				s.AnyMap.Reset()
				if err := s.AnyMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"any_map\"")
			}
		case "any_array":
			if err := func() error {
				s.AnyArray = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.AnyArray = append(s.AnyArray, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"any_array\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnyTest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AnyTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnyTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s AnyTestAnyMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s AnyTestAnyMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes AnyTestAnyMap from json.
func (s *AnyTestAnyMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnyTestAnyMap to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnyTestAnyMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AnyTestAnyMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnyTestAnyMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ArrayTest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ArrayTest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("required")
		e.ArrStart()
		for _, elem := range s.Required {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.Optional != nil {
			e.FieldStart("optional")
			e.ArrStart()
			for _, elem := range s.Optional {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		e.FieldStart("nullable_required")
		if s.NullableRequired == nil {
			e.Null()
		} else {
			e.ArrStart()
			for _, elem := range s.NullableRequired {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NullableOptional.Set {
			e.FieldStart("nullable_optional")
			s.NullableOptional.Encode(e)
		}
	}
}

var jsonFieldsNameOfArrayTest = [4]string{
	0: "required",
	1: "optional",
	2: "nullable_required",
	3: "nullable_optional",
}

// Decode decodes ArrayTest from json.
func (s *ArrayTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ArrayTest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Required = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Required = append(s.Required, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "optional":
			if err := func() error {
				s.Optional = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Optional = append(s.Optional, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional\"")
			}
		case "nullable_required":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				switch tt := d.Next(); tt {
				case jx.Null:
					if err := d.Skip(); err != nil {
						return err
					}
				default:
					s.NullableRequired = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elem string
						v, err := d.Str()
						elem = string(v)
						if err != nil {
							return err
						}
						s.NullableRequired = append(s.NullableRequired, elem)
						return nil
					}); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_required\"")
			}
		case "nullable_optional":
			if err := func() error {
				s.NullableOptional.Reset()
				if err := s.NullableOptional.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_optional\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ArrayTest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfArrayTest) {
					name = jsonFieldsNameOfArrayTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ArrayTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ArrayTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Data) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Data) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		s.ID.Encode(e)
	}
	{
		e.FieldStart("description")
		s.Description.Encode(e)
	}
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		e.FieldStart("hostname")
		e.Str(s.Hostname)
	}
	{
		e.FieldStart("format")
		e.Str(s.Format)
	}
	{
		e.FieldStart("base64")
		e.Base64(s.Base64)
	}
	{
		if s.NullableEnum.Set {
			e.FieldStart("nullable_enum")
			s.NullableEnum.Encode(e)
		}
	}
}

var jsonFieldsNameOfData = [7]string{
	0: "id",
	1: "description",
	2: "email",
	3: "hostname",
	4: "format",
	5: "base64",
	6: "nullable_enum",
}

// Decode decodes Data from json.
func (s *Data) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Data to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "description":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "email":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "hostname":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Hostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostname\"")
			}
		case "format":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Format = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"format\"")
			}
		case "base64":
			if err := func() error {
				v, err := d.Base64()
				s.Base64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"base64\"")
			}
		case "nullable_enum":
			if err := func() error {
				s.NullableEnum.Reset()
				if err := s.NullableEnum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_enum\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Data")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfData) {
					name = jsonFieldsNameOfData[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Data) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Data) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataDescription as json.
func (s DataDescription) Encode(e *jx.Encoder) {
	switch s.Type {
	case DescriptionDetailedDataDescription:
		s.DescriptionDetailed.Encode(e)
	case DescriptionSimpleDataDescription:
		s.DescriptionSimple.Encode(e)
	}
}

func (s DataDescription) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case DescriptionDetailedDataDescription:
		s.DescriptionDetailed.encodeFields(e)
	case DescriptionSimpleDataDescription:
		s.DescriptionSimple.encodeFields(e)
	}
}

// Decode decodes DataDescription from json.
func (s *DataDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDescription to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "name":
				match := DescriptionDetailedDataDescription
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "count":
				match := DescriptionDetailedDataDescription
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "id":
				match := DescriptionDetailedDataDescription
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "description":
				match := DescriptionSimpleDataDescription
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case DescriptionDetailedDataDescription:
		if err := s.DescriptionDetailed.Decode(d); err != nil {
			return err
		}
	case DescriptionSimpleDataDescription:
		if err := s.DescriptionSimple.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DataDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DefaultTest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DefaultTest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("required")
		e.Str(s.Required)
	}
	{
		if s.Str.Set {
			e.FieldStart("str")
			s.Str.Encode(e)
		}
	}
	{
		if s.NullStr.Set {
			e.FieldStart("nullStr")
			s.NullStr.Encode(e)
		}
	}
	{
		if s.Enum.Set {
			e.FieldStart("enum")
			s.Enum.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.IPV4.Set {
			e.FieldStart("ip_v4")
			s.IPV4.Encode(e)
		}
	}
	{
		if s.IPV6.Set {
			e.FieldStart("ip_v6")
			s.IPV6.Encode(e)
		}
	}
	{
		if s.URI.Set {
			e.FieldStart("uri")
			s.URI.Encode(e)
		}
	}
	{
		if s.Birthday.Set {
			e.FieldStart("birthday")
			s.Birthday.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.Rate.Set {
			e.FieldStart("rate")
			s.Rate.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.Hostname.Set {
			e.FieldStart("hostname")
			s.Hostname.Encode(e)
		}
	}
	{
		if s.Format.Set {
			e.FieldStart("format")
			s.Format.Encode(e)
		}
	}
	{
		e.FieldStart("base64")
		e.Base64(s.Base64)
	}
}

var jsonFieldsNameOfDefaultTest = [15]string{
	0:  "required",
	1:  "str",
	2:  "nullStr",
	3:  "enum",
	4:  "uuid",
	5:  "ip",
	6:  "ip_v4",
	7:  "ip_v6",
	8:  "uri",
	9:  "birthday",
	10: "rate",
	11: "email",
	12: "hostname",
	13: "format",
	14: "base64",
}

// Decode decodes DefaultTest from json.
func (s *DefaultTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DefaultTest to nil")
	}
	var requiredBitSet [2]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Required = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "str":
			if err := func() error {
				s.Str.Reset()
				if err := s.Str.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"str\"")
			}
		case "nullStr":
			if err := func() error {
				s.NullStr.Reset()
				if err := s.NullStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullStr\"")
			}
		case "enum":
			if err := func() error {
				s.Enum.Reset()
				if err := s.Enum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enum\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "ip_v4":
			if err := func() error {
				s.IPV4.Reset()
				if err := s.IPV4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v4\"")
			}
		case "ip_v6":
			if err := func() error {
				s.IPV6.Reset()
				if err := s.IPV6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v6\"")
			}
		case "uri":
			if err := func() error {
				s.URI.Reset()
				if err := s.URI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uri\"")
			}
		case "birthday":
			if err := func() error {
				s.Birthday.Reset()
				if err := s.Birthday.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostname\"")
			}
		case "format":
			if err := func() error {
				s.Format.Reset()
				if err := s.Format.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"format\"")
			}
		case "base64":
			if err := func() error {
				v, err := d.Base64()
				s.Base64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"base64\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DefaultTest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDefaultTest) {
					name = jsonFieldsNameOfDefaultTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DefaultTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DefaultTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DefaultTestEnum as json.
func (s DefaultTestEnum) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DefaultTestEnum from json.
func (s *DefaultTestEnum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DefaultTestEnum to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DefaultTestEnum(v) {
	case DefaultTestEnumBig:
		*s = DefaultTestEnumBig
	case DefaultTestEnumSmol:
		*s = DefaultTestEnumSmol
	default:
		*s = DefaultTestEnum(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DefaultTestEnum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DefaultTestEnum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DescriptionDetailed) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DescriptionDetailed) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfDescriptionDetailed = [3]string{
	0: "name",
	1: "count",
	2: "id",
}

// Decode decodes DescriptionDetailed from json.
func (s *DescriptionDetailed) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescriptionDetailed to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DescriptionDetailed")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDescriptionDetailed) {
					name = jsonFieldsNameOfDescriptionDetailed[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DescriptionDetailed) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DescriptionDetailed) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DescriptionSimple) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DescriptionSimple) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("description")
		e.Str(s.Description)
	}
}

var jsonFieldsNameOfDescriptionSimple = [1]string{
	0: "description",
}

// Decode decodes DescriptionSimple from json.
func (s *DescriptionSimple) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescriptionSimple to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Description = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DescriptionSimple")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDescriptionSimple) {
					name = jsonFieldsNameOfDescriptionSimple[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DescriptionSimple) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DescriptionSimple) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Error) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Error) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("code")
		e.Int64(s.Code)
	}
	{
		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfError = [2]string{
	0: "code",
	1: "message",
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Error to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int64()
				s.Code = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Error")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfError) {
					name = jsonFieldsNameOfError[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Error) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Error) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ID as json.
func (s ID) Encode(e *jx.Encoder) {
	switch s.Type {
	case StringID:
		e.Str(s.String)
	case IntID:
		e.Int(s.Int)
	}
}

// Decode decodes ID from json.
func (s *ID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ID to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntID
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringID
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InlineDiscriminatorOneOf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InlineDiscriminatorOneOf) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common")
		e.Str(s.Common)
	}
	s.OneOf.encodeFields(e)
}

var jsonFieldsNameOfInlineDiscriminatorOneOf = [1]string{
	0: "common",
}

// Decode decodes InlineDiscriminatorOneOf from json.
func (s *InlineDiscriminatorOneOf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InlineDiscriminatorOneOf to nil")
	}
	if err := d.Capture(func(d *jx.Decoder) error {
		return s.OneOf.Decode(d)
	}); err != nil {
		return errors.Wrap(err, "decode field OneOf")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Common = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InlineDiscriminatorOneOf")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfInlineDiscriminatorOneOf) {
					name = jsonFieldsNameOfInlineDiscriminatorOneOf[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InlineDiscriminatorOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InlineDiscriminatorOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InlineDiscriminatorOneOfSum as json.
func (s InlineDiscriminatorOneOfSum) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s InlineDiscriminatorOneOfSum) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case InlineOneOfBarInlineDiscriminatorOneOfSum:
		e.FieldStart("kind")
		e.Str("bar")
		s.InlineOneOfBar.encodeFields(e)
	case InlineOneOfFooInlineDiscriminatorOneOfSum:
		e.FieldStart("kind")
		e.Str("foo")
		s.InlineOneOfFoo.encodeFields(e)
	}
}

// Decode decodes InlineDiscriminatorOneOfSum from json.
func (s *InlineDiscriminatorOneOfSum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InlineDiscriminatorOneOfSum to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "kind":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "bar":
					s.Type = InlineOneOfBarInlineDiscriminatorOneOfSum
					found = true
				case "foo":
					s.Type = InlineOneOfFooInlineDiscriminatorOneOfSum
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case InlineOneOfFooInlineDiscriminatorOneOfSum:
		if err := s.InlineOneOfFoo.Decode(d); err != nil {
			return err
		}
	case InlineOneOfBarInlineDiscriminatorOneOfSum:
		if err := s.InlineOneOfBar.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InlineDiscriminatorOneOfSum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InlineDiscriminatorOneOfSum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InlineOneOfBar) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InlineOneOfBar) encodeFields(e *jx.Encoder) {
	{
		if s.Bar.Set {
			e.FieldStart("bar")
			s.Bar.Encode(e)
		}
	}
}

var jsonFieldsNameOfInlineOneOfBar = [1]string{
	0: "bar",
}

// Decode decodes InlineOneOfBar from json.
func (s *InlineOneOfBar) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InlineOneOfBar to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bar":
			if err := func() error {
				s.Bar.Reset()
				if err := s.Bar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bar\"")
			}
		case "kind":
			return d.Skip()
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InlineOneOfBar")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InlineOneOfBar) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InlineOneOfBar) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InlineOneOfFoo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InlineOneOfFoo) encodeFields(e *jx.Encoder) {
	{
		if s.Foo.Set {
			e.FieldStart("foo")
			s.Foo.Encode(e)
		}
	}
}

var jsonFieldsNameOfInlineOneOfFoo = [1]string{
	0: "foo",
}

// Decode decodes InlineOneOfFoo from json.
func (s *InlineOneOfFoo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InlineOneOfFoo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "foo":
			if err := func() error {
				s.Foo.Reset()
				if err := s.Foo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"foo\"")
			}
		case "kind":
			return d.Skip()
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InlineOneOfFoo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InlineOneOfFoo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InlineOneOfFoo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InlineUniqueFieldsOneOf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InlineUniqueFieldsOneOf) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common")
		e.Str(s.Common)
	}
	s.OneOf.encodeFields(e)
}

var jsonFieldsNameOfInlineUniqueFieldsOneOf = [1]string{
	0: "common",
}

// Decode decodes InlineUniqueFieldsOneOf from json.
func (s *InlineUniqueFieldsOneOf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InlineUniqueFieldsOneOf to nil")
	}
	if err := d.Capture(func(d *jx.Decoder) error {
		return s.OneOf.Decode(d)
	}); err != nil {
		return errors.Wrap(err, "decode field OneOf")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Common = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InlineUniqueFieldsOneOf")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfInlineUniqueFieldsOneOf) {
					name = jsonFieldsNameOfInlineUniqueFieldsOneOf[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InlineUniqueFieldsOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InlineUniqueFieldsOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InlineUniqueFieldsOneOfSum as json.
func (s InlineUniqueFieldsOneOfSum) Encode(e *jx.Encoder) {
	switch s.Type {
	case InlineOneOfFooInlineUniqueFieldsOneOfSum:
		s.InlineOneOfFoo.Encode(e)
	case InlineOneOfBarInlineUniqueFieldsOneOfSum:
		s.InlineOneOfBar.Encode(e)
	}
}

func (s InlineUniqueFieldsOneOfSum) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case InlineOneOfFooInlineUniqueFieldsOneOfSum:
		s.InlineOneOfFoo.encodeFields(e)
	case InlineOneOfBarInlineUniqueFieldsOneOfSum:
		s.InlineOneOfBar.encodeFields(e)
	}
}

// Decode decodes InlineUniqueFieldsOneOfSum from json.
func (s *InlineUniqueFieldsOneOfSum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InlineUniqueFieldsOneOfSum to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "foo":
				match := InlineOneOfFooInlineUniqueFieldsOneOfSum
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bar":
				match := InlineOneOfBarInlineUniqueFieldsOneOfSum
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case InlineOneOfFooInlineUniqueFieldsOneOfSum:
		if err := s.InlineOneOfFoo.Decode(d); err != nil {
			return err
		}
	case InlineOneOfBarInlineUniqueFieldsOneOfSum:
		if err := s.InlineOneOfBar.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InlineUniqueFieldsOneOfSum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InlineUniqueFieldsOneOfSum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Issue143 as json.
func (s Issue143) Encode(e *jx.Encoder) {
	switch s.Type {
	case Issue1430Issue143:
		s.Issue1430.Encode(e)
	case Issue1431Issue143:
		s.Issue1431.Encode(e)
	case Issue1432Issue143:
		s.Issue1432.Encode(e)
	case Issue1433Issue143:
		s.Issue1433.Encode(e)
	}
}

func (s Issue143) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case Issue1430Issue143:
		s.Issue1430.encodeFields(e)
	case Issue1431Issue143:
		s.Issue1431.encodeFields(e)
	case Issue1432Issue143:
		s.Issue1432.encodeFields(e)
	case Issue1433Issue143:
		s.Issue1433.encodeFields(e)
	}
}

// Decode decodes Issue143 from json.
func (s *Issue143) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue143 to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "unique-1":
				match := Issue1430Issue143
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "unique-2":
				match := Issue1431Issue143
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "unique-3":
				match := Issue1432Issue143
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "unique-4":
				match := Issue1433Issue143
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case Issue1430Issue143:
		if err := s.Issue1430.Decode(d); err != nil {
			return err
		}
	case Issue1431Issue143:
		if err := s.Issue1431.Decode(d); err != nil {
			return err
		}
	case Issue1432Issue143:
		if err := s.Issue1432.Decode(d); err != nil {
			return err
		}
	case Issue1433Issue143:
		if err := s.Issue1433.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Issue143) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue143) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue1430) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue1430) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common-1")
		e.Str(s.CommonMinus1)
	}
	{
		e.FieldStart("common-2")
		e.Int(s.CommonMinus2)
	}
	{
		e.FieldStart("unique-1")
		e.Str(s.UniqueMinus1)
	}
}

var jsonFieldsNameOfIssue1430 = [3]string{
	0: "common-1",
	1: "common-2",
	2: "unique-1",
}

// Decode decodes Issue1430 from json.
func (s *Issue1430) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1430 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CommonMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-1\"")
			}
		case "common-2":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.CommonMinus2 = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-2\"")
			}
		case "unique-1":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-1\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1430")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1430) {
					name = jsonFieldsNameOfIssue1430[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue1430) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue1430) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue1431) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue1431) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common-1")
		e.Str(s.CommonMinus1)
	}
	{
		e.FieldStart("common-2")
		e.Int(s.CommonMinus2)
	}
	{
		e.FieldStart("unique-2")
		e.Str(s.UniqueMinus2)
	}
}

var jsonFieldsNameOfIssue1431 = [3]string{
	0: "common-1",
	1: "common-2",
	2: "unique-2",
}

// Decode decodes Issue1431 from json.
func (s *Issue1431) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1431 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CommonMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-1\"")
			}
		case "common-2":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.CommonMinus2 = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-2\"")
			}
		case "unique-2":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus2 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-2\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1431")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1431) {
					name = jsonFieldsNameOfIssue1431[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue1431) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue1431) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue1432) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue1432) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common-1")
		e.Str(s.CommonMinus1)
	}
	{
		e.FieldStart("common-2")
		e.Int(s.CommonMinus2)
	}
	{
		if s.CommonMinus3.Set {
			e.FieldStart("common-3")
			s.CommonMinus3.Encode(e)
		}
	}
	{
		e.FieldStart("unique-3")
		e.Str(s.UniqueMinus3)
	}
}

var jsonFieldsNameOfIssue1432 = [4]string{
	0: "common-1",
	1: "common-2",
	2: "common-3",
	3: "unique-3",
}

// Decode decodes Issue1432 from json.
func (s *Issue1432) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1432 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CommonMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-1\"")
			}
		case "common-2":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.CommonMinus2 = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-2\"")
			}
		case "common-3":
			if err := func() error {
				s.CommonMinus3.Reset()
				if err := s.CommonMinus3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-3\"")
			}
		case "unique-3":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus3 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1432")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1432) {
					name = jsonFieldsNameOfIssue1432[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue1432) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue1432) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue1433) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue1433) encodeFields(e *jx.Encoder) {
	{
		if s.CommonMinus3.Set {
			e.FieldStart("common-3")
			s.CommonMinus3.Encode(e)
		}
	}
	{
		e.FieldStart("unique-4")
		e.Str(s.UniqueMinus4)
	}
}

var jsonFieldsNameOfIssue1433 = [2]string{
	0: "common-3",
	1: "unique-4",
}

// Decode decodes Issue1433 from json.
func (s *Issue1433) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1433 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-3":
			if err := func() error {
				s.CommonMinus3.Reset()
				if err := s.CommonMinus3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-3\"")
			}
		case "unique-4":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus4 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-4\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1433")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1433) {
					name = jsonFieldsNameOfIssue1433[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue1433) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue1433) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Issue943 as json.
func (s Issue943) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s Issue943) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case Issue943Variant1Issue943:
		e.FieldStart("selector")
		e.Str("variant1")
		s.Issue943Variant1.encodeFields(e)
	case Issue943Variant2Issue943:
		e.FieldStart("selector")
		e.Str("variant2")
		s.Issue943Variant2.encodeFields(e)
	case Issue943MapIssue943:
		e.FieldStart("selector")
		e.Str("variant3")
		s.Issue943Map.encodeFields(e)
	}
}

// Decode decodes Issue943 from json.
func (s *Issue943) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue943 to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "selector":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "variant1":
					s.Type = Issue943Variant1Issue943
					found = true
				case "variant2":
					s.Type = Issue943Variant2Issue943
					found = true
				case "variant3":
					s.Type = Issue943MapIssue943
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case Issue943Variant1Issue943:
		if err := s.Issue943Variant1.Decode(d); err != nil {
			return err
		}
	case Issue943Variant2Issue943:
		if err := s.Issue943Variant2.Decode(d); err != nil {
			return err
		}
	case Issue943MapIssue943:
		if err := s.Issue943Map.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Issue943) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue943) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue943Map) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue943Map) encodeFields(e *jx.Encoder) {
	for k, elem := range s.Pattern0Props {
		e.FieldStart(k)

		e.Str(elem)
	}
}

var jsonFieldsNameOfIssue943Map = [0]string{}

// Decode decodes Issue943Map from json.
func (s *Issue943Map) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue943Map to nil")
	}
	s.Pattern0Props = map[string]string{}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "selector":
			return d.Skip()
		default:
			var handled bool
			switch match, err := regexMap["^variant3_[^\r\n\u2028\u2029]*"].Match(k); {
			case err != nil:
				return errors.Wrap(err, "execute regex")
			case match:
				handled = true
				var elem string
				if err := func() error {
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return errors.Wrapf(err, "decode field %q", k)
				}
				s.Pattern0Props[string(k)] = elem
			}
			if handled {
				return nil
			}
			return errors.Errorf("unexpected field %q", k)
		}
	}); err != nil {
		return errors.Wrap(err, "decode Issue943Map")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue943Map) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue943Map) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Issue943MapPattern0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s Issue943MapPattern0) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes Issue943MapPattern0 from json.
func (s *Issue943MapPattern0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue943MapPattern0 to nil")
	}
	m := s.init()
	pattern := regexMap["^variant3_[^\r\n\u2028\u2029]*"]
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch match, err := pattern.Match(k); {
		case err != nil:
			return errors.Wrap(err, "execute regex")
		case !match:
			return d.Skip()
		}
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue943MapPattern0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Issue943MapPattern0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue943MapPattern0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue943Variant1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue943Variant1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("variant1_field")
		e.Int(s.Variant1Field)
	}
}

var jsonFieldsNameOfIssue943Variant1 = [1]string{
	0: "variant1_field",
}

// Decode decodes Issue943Variant1 from json.
func (s *Issue943Variant1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue943Variant1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "variant1_field":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Variant1Field = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"variant1_field\"")
			}
		case "selector":
			return d.Skip()
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue943Variant1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue943Variant1) {
					name = jsonFieldsNameOfIssue943Variant1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue943Variant1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue943Variant1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Issue943Variant2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Issue943Variant2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("variant2_field")
		e.Bool(s.Variant2Field)
	}
}

var jsonFieldsNameOfIssue943Variant2 = [1]string{
	0: "variant2_field",
}

// Decode decodes Issue943Variant2 from json.
func (s *Issue943Variant2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue943Variant2 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "variant2_field":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Bool()
				s.Variant2Field = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"variant2_field\"")
			}
		case "selector":
			return d.Skip()
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue943Variant2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue943Variant2) {
					name = jsonFieldsNameOfIssue943Variant2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Issue943Variant2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Issue943Variant2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MapWithProperties) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MapWithProperties) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("required")
		e.Int(s.Required)
	}
	{
		if s.Optional.Set {
			e.FieldStart("optional")
			s.Optional.Encode(e)
		}
	}
	{
		if s.SubMap.Set {
			e.FieldStart("sub_map")
			s.SubMap.Encode(e)
		}
	}
	{
		if s.InlinedSubMap.Set {
			e.FieldStart("inlined_sub_map")
			s.InlinedSubMap.Encode(e)
		}
	}
	{
		if s.MapValidation.Set {
			e.FieldStart("map_validation")
			s.MapValidation.Encode(e)
		}
	}
	for k, elem := range s.AdditionalProps {
		e.FieldStart(k)

		e.Str(elem)
	}
}

var jsonFieldsNameOfMapWithProperties = [5]string{
	0: "required",
	1: "optional",
	2: "sub_map",
	3: "inlined_sub_map",
	4: "map_validation",
}

// Decode decodes MapWithProperties from json.
func (s *MapWithProperties) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MapWithProperties to nil")
	}
	var requiredBitSet [1]uint8
	var propertiesCount int
	s.AdditionalProps = map[string]string{}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		propertiesCount++
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Required = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional\"")
			}
		case "sub_map":
			if err := func() error {
				s.SubMap.Reset()
				if err := s.SubMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_map\"")
			}
		case "inlined_sub_map":
			if err := func() error {
				s.InlinedSubMap.Reset()
				if err := s.InlinedSubMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inlined_sub_map\"")
			}
		case "map_validation":
			if err := func() error {
				s.MapValidation.Reset()
				if err := s.MapValidation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"map_validation\"")
			}
		default:
			var elem string
			if err := func() error {
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			s.AdditionalProps[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MapWithProperties")
	}
	// Validate properties count.
	if err := (validate.Object{
		MinProperties:    0,
		MinPropertiesSet: false,
		MaxProperties:    7,
		MaxPropertiesSet: true,
	}).ValidateProperties(propertiesCount); err != nil {
		return errors.Wrap(err, "object")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMapWithProperties) {
					name = jsonFieldsNameOfMapWithProperties[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MapWithProperties) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MapWithProperties) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s MapWithPropertiesAdditional) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s MapWithPropertiesAdditional) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes MapWithPropertiesAdditional from json.
func (s *MapWithPropertiesAdditional) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MapWithPropertiesAdditional to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MapWithPropertiesAdditional")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MapWithPropertiesAdditional) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MapWithPropertiesAdditional) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s MapWithPropertiesInlinedSubMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s MapWithPropertiesInlinedSubMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes MapWithPropertiesInlinedSubMap from json.
func (s *MapWithPropertiesInlinedSubMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MapWithPropertiesInlinedSubMap to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MapWithPropertiesInlinedSubMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MapWithPropertiesInlinedSubMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MapWithPropertiesInlinedSubMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MaxPropertiesTest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MaxPropertiesTest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("required")
		e.Int(s.Required)
	}
	{
		if s.OptionalA.Set {
			e.FieldStart("optional_a")
			s.OptionalA.Encode(e)
		}
	}
	{
		if s.OptionalB.Set {
			e.FieldStart("optional_b")
			s.OptionalB.Encode(e)
		}
	}
	{
		if s.OptionalC.Set {
			e.FieldStart("optional_c")
			s.OptionalC.Encode(e)
		}
	}
}

var jsonFieldsNameOfMaxPropertiesTest = [4]string{
	0: "required",
	1: "optional_a",
	2: "optional_b",
	3: "optional_c",
}

// Decode decodes MaxPropertiesTest from json.
func (s *MaxPropertiesTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MaxPropertiesTest to nil")
	}
	var requiredBitSet [1]uint8
	var propertiesCount int

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		propertiesCount++
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Required = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "optional_a":
			if err := func() error {
				s.OptionalA.Reset()
				if err := s.OptionalA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_a\"")
			}
		case "optional_b":
			if err := func() error {
				s.OptionalB.Reset()
				if err := s.OptionalB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_b\"")
			}
		case "optional_c":
			if err := func() error {
				s.OptionalC.Reset()
				if err := s.OptionalC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_c\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MaxPropertiesTest")
	}
	// Validate properties count.
	if err := (validate.Object{
		MinProperties:    2,
		MinPropertiesSet: true,
		MaxProperties:    2,
		MaxPropertiesSet: true,
	}).ValidateProperties(propertiesCount); err != nil {
		return errors.Wrap(err, "object")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMaxPropertiesTest) {
					name = jsonFieldsNameOfMaxPropertiesTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MaxPropertiesTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MaxPropertiesTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MergeDiscriminatorOneOf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MergeDiscriminatorOneOf) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common")
		e.Str(s.Common)
	}
	s.OneOf.encodeFields(e)
}

var jsonFieldsNameOfMergeDiscriminatorOneOf = [1]string{
	0: "common",
}

// Decode decodes MergeDiscriminatorOneOf from json.
func (s *MergeDiscriminatorOneOf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MergeDiscriminatorOneOf to nil")
	}
	if err := d.Capture(func(d *jx.Decoder) error {
		return s.OneOf.Decode(d)
	}); err != nil {
		return errors.Wrap(err, "decode field OneOf")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Common = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MergeDiscriminatorOneOf")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMergeDiscriminatorOneOf) {
					name = jsonFieldsNameOfMergeDiscriminatorOneOf[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MergeDiscriminatorOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MergeDiscriminatorOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MergeDiscriminatorOneOfSum as json.
func (s MergeDiscriminatorOneOfSum) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s MergeDiscriminatorOneOfSum) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case InlineOneOfBarMergeDiscriminatorOneOfSum:
		e.FieldStart("kind")
		e.Str("bar")
		s.InlineOneOfBar.encodeFields(e)
	case InlineOneOfFooMergeDiscriminatorOneOfSum:
		e.FieldStart("kind")
		e.Str("foo")
		s.InlineOneOfFoo.encodeFields(e)
	}
}

// Decode decodes MergeDiscriminatorOneOfSum from json.
func (s *MergeDiscriminatorOneOfSum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MergeDiscriminatorOneOfSum to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "kind":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "bar":
					s.Type = InlineOneOfBarMergeDiscriminatorOneOfSum
					found = true
				case "foo":
					s.Type = InlineOneOfFooMergeDiscriminatorOneOfSum
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case InlineOneOfFooMergeDiscriminatorOneOfSum:
		if err := s.InlineOneOfFoo.Decode(d); err != nil {
			return err
		}
	case InlineOneOfBarMergeDiscriminatorOneOfSum:
		if err := s.InlineOneOfBar.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MergeDiscriminatorOneOfSum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MergeDiscriminatorOneOfSum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MergeUniqueFieldsOneOf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MergeUniqueFieldsOneOf) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("common")
		e.Str(s.Common)
	}
	s.OneOf.encodeFields(e)
}

var jsonFieldsNameOfMergeUniqueFieldsOneOf = [1]string{
	0: "common",
}

// Decode decodes MergeUniqueFieldsOneOf from json.
func (s *MergeUniqueFieldsOneOf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MergeUniqueFieldsOneOf to nil")
	}
	if err := d.Capture(func(d *jx.Decoder) error {
		return s.OneOf.Decode(d)
	}); err != nil {
		return errors.Wrap(err, "decode field OneOf")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Common = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MergeUniqueFieldsOneOf")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMergeUniqueFieldsOneOf) {
					name = jsonFieldsNameOfMergeUniqueFieldsOneOf[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MergeUniqueFieldsOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MergeUniqueFieldsOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MergeUniqueFieldsOneOfSum as json.
func (s MergeUniqueFieldsOneOfSum) Encode(e *jx.Encoder) {
	switch s.Type {
	case InlineOneOfFooMergeUniqueFieldsOneOfSum:
		s.InlineOneOfFoo.Encode(e)
	case InlineOneOfBarMergeUniqueFieldsOneOfSum:
		s.InlineOneOfBar.Encode(e)
	}
}

func (s MergeUniqueFieldsOneOfSum) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case InlineOneOfFooMergeUniqueFieldsOneOfSum:
		s.InlineOneOfFoo.encodeFields(e)
	case InlineOneOfBarMergeUniqueFieldsOneOfSum:
		s.InlineOneOfBar.encodeFields(e)
	}
}

// Decode decodes MergeUniqueFieldsOneOfSum from json.
func (s *MergeUniqueFieldsOneOfSum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MergeUniqueFieldsOneOfSum to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "foo":
				match := InlineOneOfFooMergeUniqueFieldsOneOfSum
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bar":
				match := InlineOneOfBarMergeUniqueFieldsOneOfSum
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case InlineOneOfFooMergeUniqueFieldsOneOfSum:
		if err := s.InlineOneOfFoo.Decode(d); err != nil {
			return err
		}
	case InlineOneOfBarMergeUniqueFieldsOneOfSum:
		if err := s.InlineOneOfBar.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MergeUniqueFieldsOneOfSum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MergeUniqueFieldsOneOfSum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o NilInt) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *NilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnumsBoth as json.
func (o NilNullableEnumsBoth) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes NullableEnumsBoth from json.
func (o *NilNullableEnumsBoth) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNullableEnumsBoth to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NullableEnumsBoth
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilNullableEnumsBoth) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilNullableEnumsBoth) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnumsOnlyNullValue as json.
func (o NilNullableEnumsOnlyNullValue) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes NullableEnumsOnlyNullValue from json.
func (o *NilNullableEnumsOnlyNullValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNullableEnumsOnlyNullValue to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NullableEnumsOnlyNullValue
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilNullableEnumsOnlyNullValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilNullableEnumsOnlyNullValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnumsOnlyNullable as json.
func (o NilNullableEnumsOnlyNullable) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes NullableEnumsOnlyNullable from json.
func (o *NilNullableEnumsOnlyNullable) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNullableEnumsOnlyNullable to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NullableEnumsOnlyNullable
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilNullableEnumsOnlyNullable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilNullableEnumsOnlyNullable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NoAdditionalPropertiesTest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NoAdditionalPropertiesTest) encodeFields(e *jx.Encoder) {
	{
		if s.Empty != nil {
			e.FieldStart("empty")
			s.Empty.Encode(e)
		}
	}
	{
		if s.OneProperty.Set {
			e.FieldStart("oneProperty")
			s.OneProperty.Encode(e)
		}
	}
	{
		if s.OnlyPatterned.Set {
			e.FieldStart("onlyPatterned")
			s.OnlyPatterned.Encode(e)
		}
	}
}

var jsonFieldsNameOfNoAdditionalPropertiesTest = [3]string{
	0: "empty",
	1: "oneProperty",
	2: "onlyPatterned",
}

// Decode decodes NoAdditionalPropertiesTest from json.
func (s *NoAdditionalPropertiesTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NoAdditionalPropertiesTest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "empty":
			if err := func() error {
				s.Empty = nil
				var elem OnlyEmptyObject
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Empty = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"empty\"")
			}
		case "oneProperty":
			if err := func() error {
				s.OneProperty.Reset()
				if err := s.OneProperty.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oneProperty\"")
			}
		case "onlyPatterned":
			if err := func() error {
				s.OnlyPatterned.Reset()
				if err := s.OnlyPatterned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"onlyPatterned\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NoAdditionalPropertiesTest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NoAdditionalPropertiesTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NoAdditionalPropertiesTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullValue as json.
func (s NullValue) Encode(e *jx.Encoder) {
	unwrapped := struct{}(s)

	_ = unwrapped
	e.Null()
}

// Decode decodes NullValue from json.
func (s *NullValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullValue to nil")
	}
	var unwrapped struct{}
	if err := func() error {
		if err := d.Null(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = NullValue(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NullValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NullValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NullableEnums) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NullableEnums) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("only_nullable")
		s.OnlyNullable.Encode(e)
	}
	{
		e.FieldStart("only_null_value")
		s.OnlyNullValue.Encode(e)
	}
	{
		e.FieldStart("both")
		s.Both.Encode(e)
	}
}

var jsonFieldsNameOfNullableEnums = [3]string{
	0: "only_nullable",
	1: "only_null_value",
	2: "both",
}

// Decode decodes NullableEnums from json.
func (s *NullableEnums) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnums to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "only_nullable":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.OnlyNullable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_nullable\"")
			}
		case "only_null_value":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.OnlyNullValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_null_value\"")
			}
		case "both":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Both.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"both\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NullableEnums")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfNullableEnums) {
					name = jsonFieldsNameOfNullableEnums[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NullableEnums) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NullableEnums) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnumsBoth as json.
func (s NullableEnumsBoth) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes NullableEnumsBoth from json.
func (s *NullableEnumsBoth) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnumsBoth to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch NullableEnumsBoth(v) {
	case NullableEnumsBothAsc:
		*s = NullableEnumsBothAsc
	case NullableEnumsBothDesc:
		*s = NullableEnumsBothDesc
	default:
		*s = NullableEnumsBoth(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NullableEnumsBoth) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NullableEnumsBoth) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnumsOnlyNullValue as json.
func (s NullableEnumsOnlyNullValue) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes NullableEnumsOnlyNullValue from json.
func (s *NullableEnumsOnlyNullValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnumsOnlyNullValue to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch NullableEnumsOnlyNullValue(v) {
	case NullableEnumsOnlyNullValueAsc:
		*s = NullableEnumsOnlyNullValueAsc
	case NullableEnumsOnlyNullValueDesc:
		*s = NullableEnumsOnlyNullValueDesc
	default:
		*s = NullableEnumsOnlyNullValue(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NullableEnumsOnlyNullValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NullableEnumsOnlyNullValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnumsOnlyNullable as json.
func (s NullableEnumsOnlyNullable) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes NullableEnumsOnlyNullable from json.
func (s *NullableEnumsOnlyNullable) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnumsOnlyNullable to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch NullableEnumsOnlyNullable(v) {
	case NullableEnumsOnlyNullableAsc:
		*s = NullableEnumsOnlyNullableAsc
	case NullableEnumsOnlyNullableDesc:
		*s = NullableEnumsOnlyNullableDesc
	default:
		*s = NullableEnumsOnlyNullable(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NullableEnumsOnlyNullable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NullableEnumsOnlyNullable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfBooleanSumNullables as json.
func (s OneOfBooleanSumNullables) Encode(e *jx.Encoder) {
	switch s.Type {
	case BoolOneOfBooleanSumNullables:
		e.Bool(s.Bool)
	case OneOfNullablesOneOfBooleanSumNullables:
		s.OneOfNullables.Encode(e)
	}
}

// Decode decodes OneOfBooleanSumNullables from json.
func (s *OneOfBooleanSumNullables) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfBooleanSumNullables to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Array, jx.Null, jx.Number, jx.String:
		if err := s.OneOfNullables.Decode(d); err != nil {
			return err
		}
		s.Type = OneOfNullablesOneOfBooleanSumNullables
	case jx.Bool:
		v, err := d.Bool()
		s.Bool = bool(v)
		if err != nil {
			return err
		}
		s.Type = BoolOneOfBooleanSumNullables
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneOfBooleanSumNullables) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfBooleanSumNullables) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OneOfBugs) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OneOfBugs) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("issue143")
		s.Issue143.Encode(e)
	}
	{
		e.FieldStart("additional-fields")
		s.AdditionalMinusFields.Encode(e)
	}
	{
		if s.OneOfMinusUUIDMinusIntMinusEnum.Set {
			e.FieldStart("oneOf-uuid-int-enum")
			s.OneOfMinusUUIDMinusIntMinusEnum.Encode(e)
		}
	}
	{
		if s.OneOfMinusMappingMinusReference.Set {
			e.FieldStart("oneOf-mapping-reference")
			s.OneOfMinusMappingMinusReference.Encode(e)
		}
	}
	{
		if s.Issue943.Set {
			e.FieldStart("issue943")
			s.Issue943.Encode(e)
		}
	}
}

var jsonFieldsNameOfOneOfBugs = [5]string{
	0: "issue143",
	1: "additional-fields",
	2: "oneOf-uuid-int-enum",
	3: "oneOf-mapping-reference",
	4: "issue943",
}

// Decode decodes OneOfBugs from json.
func (s *OneOfBugs) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfBugs to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "issue143":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Issue143.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue143\"")
			}
		case "additional-fields":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AdditionalMinusFields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"additional-fields\"")
			}
		case "oneOf-uuid-int-enum":
			if err := func() error {
				s.OneOfMinusUUIDMinusIntMinusEnum.Reset()
				if err := s.OneOfMinusUUIDMinusIntMinusEnum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oneOf-uuid-int-enum\"")
			}
		case "oneOf-mapping-reference":
			if err := func() error {
				s.OneOfMinusMappingMinusReference.Reset()
				if err := s.OneOfMinusMappingMinusReference.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oneOf-mapping-reference\"")
			}
		case "issue943":
			if err := func() error {
				s.Issue943.Reset()
				if err := s.Issue943.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue943\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneOfBugs")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOneOfBugs) {
					name = jsonFieldsNameOfOneOfBugs[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OneOfBugs) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfBugs) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfMappingReference as json.
func (s OneOfMappingReference) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s OneOfMappingReference) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case OneOfMappingReferenceBOneOfMappingReference:
		e.FieldStart("infoType")
		e.Str("extended")
		s.OneOfMappingReferenceB.encodeFields(e)
	case OneOfMappingReferenceAOneOfMappingReference:
		e.FieldStart("infoType")
		e.Str("simple")
		s.OneOfMappingReferenceA.encodeFields(e)
	}
}

// Decode decodes OneOfMappingReference from json.
func (s *OneOfMappingReference) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfMappingReference to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "infoType":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "extended":
					s.Type = OneOfMappingReferenceBOneOfMappingReference
					found = true
				case "simple":
					s.Type = OneOfMappingReferenceAOneOfMappingReference
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case OneOfMappingReferenceAOneOfMappingReference:
		if err := s.OneOfMappingReferenceA.Decode(d); err != nil {
			return err
		}
	case OneOfMappingReferenceBOneOfMappingReference:
		if err := s.OneOfMappingReferenceB.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneOfMappingReference) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfMappingReference) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OneOfMappingReferenceA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OneOfMappingReferenceA) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfOneOfMappingReferenceA = [1]string{
	0: "description",
}

// Decode decodes OneOfMappingReferenceA from json.
func (s *OneOfMappingReferenceA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfMappingReferenceA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "infoType":
			return d.Skip()
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneOfMappingReferenceA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OneOfMappingReferenceA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfMappingReferenceA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OneOfMappingReferenceB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OneOfMappingReferenceB) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Data != nil {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
	{
		if s.Info.Set {
			e.FieldStart("info")
			s.Info.Encode(e)
		}
	}
}

var jsonFieldsNameOfOneOfMappingReferenceB = [3]string{
	0: "code",
	1: "data",
	2: "info",
}

// Decode decodes OneOfMappingReferenceB from json.
func (s *OneOfMappingReferenceB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfMappingReferenceB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "data":
			if err := func() error {
				s.Data = nil
				var elem OneOfMappingReferenceBData
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Data = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		case "info":
			if err := func() error {
				s.Info.Reset()
				if err := s.Info.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"info\"")
			}
		case "infoType":
			return d.Skip()
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneOfMappingReferenceB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OneOfMappingReferenceB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfMappingReferenceB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OneOfMappingReferenceBData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OneOfMappingReferenceBData) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfOneOfMappingReferenceBData = [0]string{}

// Decode decodes OneOfMappingReferenceBData from json.
func (s *OneOfMappingReferenceBData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfMappingReferenceBData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode OneOfMappingReferenceBData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OneOfMappingReferenceBData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfMappingReferenceBData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfNullables as json.
func (s OneOfNullables) Encode(e *jx.Encoder) {
	switch s.Type {
	case NullOneOfNullables:
		_ = s.Null
		e.Null()
	case StringOneOfNullables:
		e.Str(s.String)
	case IntOneOfNullables:
		e.Int(s.Int)
	case StringArrayOneOfNullables:
		e.ArrStart()
		for _, elem := range s.StringArray {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

// Decode decodes OneOfNullables from json.
func (s *OneOfNullables) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfNullables to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Array:
		s.StringArray = make([]string, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem string
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			s.StringArray = append(s.StringArray, elem)
			return nil
		}); err != nil {
			return err
		}
		s.Type = StringArrayOneOfNullables
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		s.Type = NullOneOfNullables
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntOneOfNullables
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringOneOfNullables
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneOfNullables) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfNullables) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfUUIDAndIntEnum as json.
func (s OneOfUUIDAndIntEnum) Encode(e *jx.Encoder) {
	switch s.Type {
	case UUIDOneOfUUIDAndIntEnum:
		json.EncodeUUID(e, s.UUID)
	case OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum:
		s.OneOfUUIDAndIntEnum1.Encode(e)
	}
}

// Decode decodes OneOfUUIDAndIntEnum from json.
func (s *OneOfUUIDAndIntEnum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfUUIDAndIntEnum to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Number:
		if err := s.OneOfUUIDAndIntEnum1.Decode(d); err != nil {
			return err
		}
		s.Type = OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum
	case jx.String:
		v, err := json.DecodeUUID(d)
		s.UUID = v
		if err != nil {
			return err
		}
		s.Type = UUIDOneOfUUIDAndIntEnum
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneOfUUIDAndIntEnum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfUUIDAndIntEnum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfUUIDAndIntEnum1 as json.
func (s OneOfUUIDAndIntEnum1) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes OneOfUUIDAndIntEnum1 from json.
func (s *OneOfUUIDAndIntEnum1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfUUIDAndIntEnum1 to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = OneOfUUIDAndIntEnum1(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneOfUUIDAndIntEnum1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfUUIDAndIntEnum1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfWithNullable as json.
func (s OneOfWithNullable) Encode(e *jx.Encoder) {
	switch s.Type {
	case NullOneOfWithNullable:
		_ = s.Null
		e.Null()
	case StringOneOfWithNullable:
		e.Str(s.String)
	case IntOneOfWithNullable:
		e.Int(s.Int)
	case StringArrayOneOfWithNullable:
		e.ArrStart()
		for _, elem := range s.StringArray {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

// Decode decodes OneOfWithNullable from json.
func (s *OneOfWithNullable) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfWithNullable to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Array:
		s.StringArray = make([]string, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem string
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			s.StringArray = append(s.StringArray, elem)
			return nil
		}); err != nil {
			return err
		}
		s.Type = StringArrayOneOfWithNullable
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		s.Type = NullOneOfWithNullable
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntOneOfWithNullable
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringOneOfWithNullable
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneOfWithNullable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneOfWithNullable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OnePropertyObject) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OnePropertyObject) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("foo")
		e.Str(s.Foo)
	}
}

var jsonFieldsNameOfOnePropertyObject = [1]string{
	0: "foo",
}

// Decode decodes OnePropertyObject from json.
func (s *OnePropertyObject) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OnePropertyObject to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "foo":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Foo = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"foo\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OnePropertyObject")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOnePropertyObject) {
					name = jsonFieldsNameOfOnePropertyObject[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OnePropertyObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OnePropertyObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneVariantHasNoUniqueFields as json.
func (s OneVariantHasNoUniqueFields) Encode(e *jx.Encoder) {
	switch s.Type {
	case OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields:
		s.OneVariantHasNoUniqueFields0.Encode(e)
	case OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields:
		s.OneVariantHasNoUniqueFields1.Encode(e)
	}
}

func (s OneVariantHasNoUniqueFields) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields:
		s.OneVariantHasNoUniqueFields0.encodeFields(e)
	case OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields:
		s.OneVariantHasNoUniqueFields1.encodeFields(e)
	}
}

// Decode decodes OneVariantHasNoUniqueFields from json.
func (s *OneVariantHasNoUniqueFields) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneVariantHasNoUniqueFields to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "d":
				match := OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields
	}
	switch s.Type {
	case OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields:
		if err := s.OneVariantHasNoUniqueFields0.Decode(d); err != nil {
			return err
		}
	case OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields:
		if err := s.OneVariantHasNoUniqueFields1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OneVariantHasNoUniqueFields) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneVariantHasNoUniqueFields) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OneVariantHasNoUniqueFields0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OneVariantHasNoUniqueFields0) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("a")
		e.Str(s.A)
	}
	{
		if s.B.Set {
			e.FieldStart("b")
			s.B.Encode(e)
		}
	}
	{
		e.FieldStart("c")
		e.Str(s.C)
	}
}

var jsonFieldsNameOfOneVariantHasNoUniqueFields0 = [3]string{
	0: "a",
	1: "b",
	2: "c",
}

// Decode decodes OneVariantHasNoUniqueFields0 from json.
func (s *OneVariantHasNoUniqueFields0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneVariantHasNoUniqueFields0 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.A = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		case "c":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.C = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneVariantHasNoUniqueFields0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOneVariantHasNoUniqueFields0) {
					name = jsonFieldsNameOfOneVariantHasNoUniqueFields0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OneVariantHasNoUniqueFields0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneVariantHasNoUniqueFields0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OneVariantHasNoUniqueFields1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OneVariantHasNoUniqueFields1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("a")
		e.Str(s.A)
	}
	{
		if s.B.Set {
			e.FieldStart("b")
			s.B.Encode(e)
		}
	}
	{
		e.FieldStart("c")
		e.Str(s.C)
	}
	{
		if s.D.Set {
			e.FieldStart("d")
			s.D.Encode(e)
		}
	}
}

var jsonFieldsNameOfOneVariantHasNoUniqueFields1 = [4]string{
	0: "a",
	1: "b",
	2: "c",
	3: "d",
}

// Decode decodes OneVariantHasNoUniqueFields1 from json.
func (s *OneVariantHasNoUniqueFields1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneVariantHasNoUniqueFields1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.A = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		case "c":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.C = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		case "d":
			if err := func() error {
				s.D.Reset()
				if err := s.D.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"d\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneVariantHasNoUniqueFields1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOneVariantHasNoUniqueFields1) {
					name = jsonFieldsNameOfOneVariantHasNoUniqueFields1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OneVariantHasNoUniqueFields1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OneVariantHasNoUniqueFields1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OnlyEmptyObject) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OnlyEmptyObject) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfOnlyEmptyObject = [0]string{}

// Decode decodes OnlyEmptyObject from json.
func (s *OnlyEmptyObject) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OnlyEmptyObject to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return errors.Errorf("unexpected field %q", k)
		}
	}); err != nil {
		return errors.Wrap(err, "decode OnlyEmptyObject")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OnlyEmptyObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OnlyEmptyObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s OnlyPatternedPropsObject) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s OnlyPatternedPropsObject) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes OnlyPatternedPropsObject from json.
func (s *OnlyPatternedPropsObject) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OnlyPatternedPropsObject to nil")
	}
	m := s.init()
	pattern := regexMap["string_[^\r\n\u2028\u2029]*"]
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch match, err := pattern.Match(k); {
		case err != nil:
			return errors.Wrap(err, "execute regex")
		case !match:
			switch string(k) {
			default:
				return errors.Errorf("unexpected field %q", k)
			}
		}
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OnlyPatternedPropsObject")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OnlyPatternedPropsObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OnlyPatternedPropsObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnyTest as json.
func (o OptAnyTest) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnyTest from json.
func (o *OptAnyTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnyTest to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnyTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnyTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnyTestAnyMap as json.
func (o OptAnyTestAnyMap) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnyTestAnyMap from json.
func (o *OptAnyTestAnyMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnyTestAnyMap to nil")
	}
	o.Set = true
	o.Value = make(AnyTestAnyMap)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnyTestAnyMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnyTestAnyMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ArrayTest as json.
func (o OptArrayTest) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ArrayTest from json.
func (o *OptArrayTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptArrayTest to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptArrayTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptArrayTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Data as json.
func (o OptData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Data from json.
func (o *OptData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes DefaultTestEnum as json.
func (o OptDefaultTestEnum) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DefaultTestEnum from json.
func (o *OptDefaultTestEnum) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDefaultTestEnum to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDefaultTestEnum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDefaultTestEnum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Duration as json.
func (o OptDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDuration to nil")
	}
	o.Set = true
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ID as json.
func (o OptID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ID from json.
func (o *OptID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIP to nil")
	}
	o.Set = true
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIPv4) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIPv4(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv4 to nil")
	}
	o.Set = true
	v, err := json.DecodeIPv4(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIPv6) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIPv6(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv6 to nil")
	}
	o.Set = true
	v, err := json.DecodeIPv6(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InlineDiscriminatorOneOf as json.
func (o OptInlineDiscriminatorOneOf) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes InlineDiscriminatorOneOf from json.
func (o *OptInlineDiscriminatorOneOf) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInlineDiscriminatorOneOf to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInlineDiscriminatorOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInlineDiscriminatorOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InlineUniqueFieldsOneOf as json.
func (o OptInlineUniqueFieldsOneOf) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes InlineUniqueFieldsOneOf from json.
func (o *OptInlineUniqueFieldsOneOf) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInlineUniqueFieldsOneOf to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInlineUniqueFieldsOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInlineUniqueFieldsOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Issue943 as json.
func (o OptIssue943) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Issue943 from json.
func (o *OptIssue943) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIssue943 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIssue943) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIssue943) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MapWithProperties as json.
func (o OptMapWithProperties) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MapWithProperties from json.
func (o *OptMapWithProperties) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMapWithProperties to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMapWithProperties) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMapWithProperties) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MapWithPropertiesInlinedSubMap as json.
func (o OptMapWithPropertiesInlinedSubMap) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MapWithPropertiesInlinedSubMap from json.
func (o *OptMapWithPropertiesInlinedSubMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMapWithPropertiesInlinedSubMap to nil")
	}
	o.Set = true
	o.Value = make(MapWithPropertiesInlinedSubMap)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMapWithPropertiesInlinedSubMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMapWithPropertiesInlinedSubMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MaxPropertiesTest as json.
func (o OptMaxPropertiesTest) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MaxPropertiesTest from json.
func (o *OptMaxPropertiesTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMaxPropertiesTest to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMaxPropertiesTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMaxPropertiesTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MergeDiscriminatorOneOf as json.
func (o OptMergeDiscriminatorOneOf) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MergeDiscriminatorOneOf from json.
func (o *OptMergeDiscriminatorOneOf) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMergeDiscriminatorOneOf to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMergeDiscriminatorOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMergeDiscriminatorOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MergeUniqueFieldsOneOf as json.
func (o OptMergeUniqueFieldsOneOf) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MergeUniqueFieldsOneOf from json.
func (o *OptMergeUniqueFieldsOneOf) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMergeUniqueFieldsOneOf to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMergeUniqueFieldsOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMergeUniqueFieldsOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []string as json.
func (o OptNilStringArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		e.Str(elem)
	}
	e.ArrEnd()
}

// Decode decodes []string from json.
func (o *OptNilStringArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]string, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem string
		v, err := d.Str()
		elem = string(v)
		if err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullValue as json.
func (o OptNullValue) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NullValue from json.
func (o *OptNullValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNullValue to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNullValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNullValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NullableEnums as json.
func (o OptNullableEnums) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NullableEnums from json.
func (o *OptNullableEnums) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNullableEnums to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNullableEnums) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNullableEnums) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfMappingReference as json.
func (o OptOneOfMappingReference) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OneOfMappingReference from json.
func (o *OptOneOfMappingReference) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOneOfMappingReference to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOneOfMappingReference) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOneOfMappingReference) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OneOfUUIDAndIntEnum as json.
func (o OptOneOfUUIDAndIntEnum) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OneOfUUIDAndIntEnum from json.
func (o *OptOneOfUUIDAndIntEnum) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOneOfUUIDAndIntEnum to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOneOfUUIDAndIntEnum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOneOfUUIDAndIntEnum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OnePropertyObject as json.
func (o OptOnePropertyObject) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OnePropertyObject from json.
func (o *OptOnePropertyObject) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOnePropertyObject to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOnePropertyObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOnePropertyObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OnlyPatternedPropsObject as json.
func (o OptOnlyPatternedPropsObject) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OnlyPatternedPropsObject from json.
func (o *OptOnlyPatternedPropsObject) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOnlyPatternedPropsObject to nil")
	}
	o.Set = true
	o.Value = make(OnlyPatternedPropsObject)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOnlyPatternedPropsObject) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOnlyPatternedPropsObject) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Pet as json.
func (o OptPet) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Pet from json.
func (o *OptPet) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPet to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PetName as json.
func (o OptPetName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PetName from json.
func (o *OptPetName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPetName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPetName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPetName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PetType as json.
func (o OptPetType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PetType from json.
func (o *OptPetType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPetType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPetType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPetType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StringMap as json.
func (o OptStringMap) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StringMap from json.
func (o *OptStringMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringMap to nil")
	}
	o.Set = true
	o.Value = make(StringMap)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StringStringMap as json.
func (o OptStringStringMap) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StringStringMap from json.
func (o *OptStringStringMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringStringMap to nil")
	}
	o.Set = true
	o.Value = make(StringStringMap)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringStringMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringStringMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	o.Set = true
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUUID to nil")
	}
	o.Set = true
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ValidationStringMap as json.
func (o OptValidationStringMap) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ValidationStringMap from json.
func (o *OptValidationStringMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptValidationStringMap to nil")
	}
	o.Set = true
	o.Value = make(ValidationStringMap)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptValidationStringMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptValidationStringMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s PatternRecursiveMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s PatternRecursiveMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes PatternRecursiveMap from json.
func (s *PatternRecursiveMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatternRecursiveMap to nil")
	}
	m := s.init()
	pattern := regexMap["foo[^\r\n\u2028\u2029]*"]
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch match, err := pattern.Match(k); {
		case err != nil:
			return errors.Wrap(err, "execute regex")
		case !match:
			return d.Skip()
		}
		var elem PatternRecursiveMap
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatternRecursiveMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PatternRecursiveMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatternRecursiveMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Pet) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Pet) encodeFields(e *jx.Encoder) {
	{
		if s.Primary != nil {
			e.FieldStart("primary")
			s.Primary.Encode(e)
		}
	}
	{
		e.FieldStart("id")
		e.Int64(s.ID)
	}
	{
		e.FieldStart("unique_id")
		json.EncodeUUID(e, s.UniqueID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		e.FieldStart("kind")
		s.Kind.Encode(e)
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		e.FieldStart("ip")
		json.EncodeIP(e, s.IP)
	}
	{
		e.FieldStart("ip_v4")
		json.EncodeIPv4(e, s.IPV4)
	}
	{
		e.FieldStart("ip_v6")
		json.EncodeIPv6(e, s.IPV6)
	}
	{
		e.FieldStart("uri")
		json.EncodeURI(e, s.URI)
	}
	{
		e.FieldStart("birthday")
		json.EncodeDate(e, s.Birthday)
	}
	{
		e.FieldStart("rate")
		json.EncodeDuration(e, s.Rate)
	}
	{
		e.FieldStart("nickname")
		s.Nickname.Encode(e)
	}
	{
		if s.NullStr.Set {
			e.FieldStart("nullStr")
			s.NullStr.Encode(e)
		}
	}
	{
		if s.Friends != nil {
			e.FieldStart("friends")
			e.ArrStart()
			for _, elem := range s.Friends {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Next.Set {
			e.FieldStart("next")
			s.Next.Encode(e)
		}
	}
	{
		if s.TestInteger1.Set {
			e.FieldStart("testInteger1")
			s.TestInteger1.Encode(e)
		}
	}
	{
		if s.TestFloat1.Set {
			e.FieldStart("testFloat1")
			s.TestFloat1.Encode(e)
		}
	}
	{
		if s.TestArray1 != nil {
			e.FieldStart("testArray1")
			e.ArrStart()
			for _, elem := range s.TestArray1 {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.TestArray2.Set {
			e.FieldStart("testArray2")
			s.TestArray2.Encode(e)
		}
	}
	{
		if s.TestMap.Set {
			e.FieldStart("testMap")
			s.TestMap.Encode(e)
		}
	}
	{
		if s.TestMapWithProps.Set {
			e.FieldStart("testMapWithProps")
			s.TestMapWithProps.Encode(e)
		}
	}
	{
		if s.TestAny.Set {
			e.FieldStart("testAny")
			s.TestAny.Encode(e)
		}
	}
	{
		if s.TestMaxProperties.Set {
			e.FieldStart("testMaxProperties")
			s.TestMaxProperties.Encode(e)
		}
	}
	{
		if s.TestDate.Set {
			e.FieldStart("testDate")
			s.TestDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.TestDuration.Set {
			e.FieldStart("testDuration")
			s.TestDuration.Encode(e)
		}
	}
	{
		if s.TestTime.Set {
			e.FieldStart("testTime")
			s.TestTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.TestDateTime.Set {
			e.FieldStart("testDateTime")
			s.TestDateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.NullValue.Set {
			e.FieldStart("nullValue")
			s.NullValue.Encode(e)
		}
	}
	{
		if s.ExtraTags.Set {
			e.FieldStart("extraTags")
			s.ExtraTags.Encode(e)
		}
	}
}

var jsonFieldsNameOfPet = [31]string{
	0:  "primary",
	1:  "id",
	2:  "unique_id",
	3:  "name",
	4:  "type",
	5:  "kind",
	6:  "tag",
	7:  "ip",
	8:  "ip_v4",
	9:  "ip_v6",
	10: "uri",
	11: "birthday",
	12: "rate",
	13: "nickname",
	14: "nullStr",
	15: "friends",
	16: "next",
	17: "testInteger1",
	18: "testFloat1",
	19: "testArray1",
	20: "testArray2",
	21: "testMap",
	22: "testMapWithProps",
	23: "testAny",
	24: "testMaxProperties",
	25: "testDate",
	26: "testDuration",
	27: "testTime",
	28: "testDateTime",
	29: "nullValue",
	30: "extraTags",
}

// Decode decodes Pet from json.
func (s *Pet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Pet to nil")
	}
	var requiredBitSet [4]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "primary":
			if err := func() error {
				s.Primary = nil
				var elem Pet
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Primary = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primary\"")
			}
		case "id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int64()
				s.ID = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "unique_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.UniqueID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique_id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "kind":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.Kind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"kind\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "ip":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.IP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "ip_v4":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIPv4(d)
				s.IPV4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v4\"")
			}
		case "ip_v6":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIPv6(d)
				s.IPV6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v6\"")
			}
		case "uri":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.URI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uri\"")
			}
		case "birthday":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.Birthday = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "rate":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.Rate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "nickname":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.Nickname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nickname\"")
			}
		case "nullStr":
			if err := func() error {
				s.NullStr.Reset()
				if err := s.NullStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullStr\"")
			}
		case "friends":
			if err := func() error {
				s.Friends = make([]Pet, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Pet
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Friends = append(s.Friends, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"friends\"")
			}
		case "next":
			if err := func() error {
				s.Next.Reset()
				if err := s.Next.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next\"")
			}
		case "testInteger1":
			if err := func() error {
				s.TestInteger1.Reset()
				if err := s.TestInteger1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testInteger1\"")
			}
		case "testFloat1":
			if err := func() error {
				s.TestFloat1.Reset()
				if err := s.TestFloat1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testFloat1\"")
			}
		case "testArray1":
			if err := func() error {
				s.TestArray1 = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.TestArray1 = append(s.TestArray1, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testArray1\"")
			}
		case "testArray2":
			if err := func() error {
				s.TestArray2.Reset()
				if err := s.TestArray2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testArray2\"")
			}
		case "testMap":
			if err := func() error {
				s.TestMap.Reset()
				if err := s.TestMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testMap\"")
			}
		case "testMapWithProps":
			if err := func() error {
				s.TestMapWithProps.Reset()
				if err := s.TestMapWithProps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testMapWithProps\"")
			}
		case "testAny":
			if err := func() error {
				s.TestAny.Reset()
				if err := s.TestAny.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testAny\"")
			}
		case "testMaxProperties":
			if err := func() error {
				s.TestMaxProperties.Reset()
				if err := s.TestMaxProperties.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testMaxProperties\"")
			}
		case "testDate":
			if err := func() error {
				s.TestDate.Reset()
				if err := s.TestDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testDate\"")
			}
		case "testDuration":
			if err := func() error {
				s.TestDuration.Reset()
				if err := s.TestDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testDuration\"")
			}
		case "testTime":
			if err := func() error {
				s.TestTime.Reset()
				if err := s.TestTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testTime\"")
			}
		case "testDateTime":
			if err := func() error {
				s.TestDateTime.Reset()
				if err := s.TestDateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testDateTime\"")
			}
		case "nullValue":
			if err := func() error {
				s.NullValue.Reset()
				if err := s.NullValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullValue\"")
			}
		case "extraTags":
			if err := func() error {
				s.ExtraTags.Reset()
				if err := s.ExtraTags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extraTags\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Pet")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [4]uint8{
		0b10101110,
		0b00111111,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPet) {
					name = jsonFieldsNameOfPet[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Pet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Pet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PetGetDef) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PetGetDef) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfPetGetDef = [1]string{
	0: "message",
}

// Decode decodes PetGetDef from json.
func (s *PetGetDef) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetGetDef to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PetGetDef")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetGetDef) {
					name = jsonFieldsNameOfPetGetDef[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PetGetDef) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PetGetDef) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PetKind as json.
func (s PetKind) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PetKind from json.
func (s *PetKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetKind to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PetKind(v) {
	case PetKindBig:
		*s = PetKindBig
	case PetKindSmol:
		*s = PetKindSmol
	default:
		*s = PetKind(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PetKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PetKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PetName as json.
func (s PetName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PetName from json.
func (s *PetName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PetName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PetName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PetName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PetType as json.
func (s PetType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PetType from json.
func (s *PetType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PetType(v) {
	case PetTypeFifa:
		*s = PetTypeFifa
	case PetTypeFofa:
		*s = PetTypeFofa
	default:
		*s = PetType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PetType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PetType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecursiveArray as json.
func (s RecursiveArray) Encode(e *jx.Encoder) {
	unwrapped := []RecursiveArray(s)

	e.ArrStart()
	for _, elem := range unwrapped {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes RecursiveArray from json.
func (s *RecursiveArray) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecursiveArray to nil")
	}
	var unwrapped []RecursiveArray
	if err := func() error {
		unwrapped = make([]RecursiveArray, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem RecursiveArray
			if err := elem.Decode(d); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecursiveArray(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RecursiveArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecursiveArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RecursiveMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RecursiveMap) encodeFields(e *jx.Encoder) {
	{
		if s.OptionalRecursiveField != nil {
			e.FieldStart("optional_recursive_field")
			s.OptionalRecursiveField.Encode(e)
		}
	}
	for k, elem := range s.AdditionalProps {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

var jsonFieldsNameOfRecursiveMap = [1]string{
	0: "optional_recursive_field",
}

// Decode decodes RecursiveMap from json.
func (s *RecursiveMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecursiveMap to nil")
	}
	s.AdditionalProps = map[string]RecursiveMap{}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "optional_recursive_field":
			if err := func() error {
				s.OptionalRecursiveField = nil
				var elem RecursiveMap
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.OptionalRecursiveField = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_recursive_field\"")
			}
		default:
			var elem RecursiveMap
			if err := func() error {
				if err := elem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			s.AdditionalProps[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RecursiveMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RecursiveMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecursiveMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s RecursiveMapAdditional) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s RecursiveMapAdditional) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes RecursiveMapAdditional from json.
func (s *RecursiveMapAdditional) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecursiveMapAdditional to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem RecursiveMap
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RecursiveMapAdditional")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RecursiveMapAdditional) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecursiveMapAdditional) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *StringIntMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *StringIntMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s.AdditionalProps {
		e.FieldStart(k)

		e.Int(elem)
	}
	for k, elem := range s.Pattern0Props {
		e.FieldStart(k)

		e.Str(elem)
	}
}

var jsonFieldsNameOfStringIntMap = [0]string{}

// Decode decodes StringIntMap from json.
func (s *StringIntMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringIntMap to nil")
	}
	s.AdditionalProps = map[string]int{}
	s.Pattern0Props = map[string]string{}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			var handled bool
			switch match, err := regexMap["string_[^\r\n\u2028\u2029]*"].Match(k); {
			case err != nil:
				return errors.Wrap(err, "execute regex")
			case match:
				handled = true
				var elem string
				if err := func() error {
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return errors.Wrapf(err, "decode field %q", k)
				}
				s.Pattern0Props[string(k)] = elem
			}
			if handled {
				return nil
			}
			var elem int
			if err := func() error {
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			s.AdditionalProps[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringIntMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *StringIntMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StringIntMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s StringIntMapAdditional) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s StringIntMapAdditional) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Int(elem)
	}
}

// Decode decodes StringIntMapAdditional from json.
func (s *StringIntMapAdditional) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringIntMapAdditional to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem int
		if err := func() error {
			v, err := d.Int()
			elem = int(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringIntMapAdditional")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StringIntMapAdditional) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StringIntMapAdditional) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s StringIntMapPattern0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s StringIntMapPattern0) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes StringIntMapPattern0 from json.
func (s *StringIntMapPattern0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringIntMapPattern0 to nil")
	}
	m := s.init()
	pattern := regexMap["string_[^\r\n\u2028\u2029]*"]
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch match, err := pattern.Match(k); {
		case err != nil:
			return errors.Wrap(err, "execute regex")
		case !match:
			return d.Skip()
		}
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringIntMapPattern0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StringIntMapPattern0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StringIntMapPattern0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s StringMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s StringMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes StringMap from json.
func (s *StringMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringMap to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StringMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StringMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s StringStringMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s StringStringMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes StringStringMap from json.
func (s *StringStringMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringStringMap to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem StringMap
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringStringMap")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StringStringMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StringStringMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestFloatValidation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestFloatValidation) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("minmax")
		e.Float64(s.Minmax)
	}
	{
		e.FieldStart("multipleOf")
		e.Float64(s.MultipleOf)
	}
}

var jsonFieldsNameOfTestFloatValidation = [2]string{
	0: "minmax",
	1: "multipleOf",
}

// Decode decodes TestFloatValidation from json.
func (s *TestFloatValidation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestFloatValidation to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "minmax":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Float64()
				s.Minmax = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minmax\"")
			}
		case "multipleOf":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Float64()
				s.MultipleOf = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multipleOf\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestFloatValidation")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestFloatValidation) {
					name = jsonFieldsNameOfTestFloatValidation[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestFloatValidation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestFloatValidation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestInlineOneOf) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestInlineOneOf) encodeFields(e *jx.Encoder) {
	{
		if s.InlineDiscriminator.Set {
			e.FieldStart("inline_discriminator")
			s.InlineDiscriminator.Encode(e)
		}
	}
	{
		if s.MergeDiscriminator.Set {
			e.FieldStart("merge_discriminator")
			s.MergeDiscriminator.Encode(e)
		}
	}
	{
		if s.InlineUniqueFields.Set {
			e.FieldStart("inline_unique_fields")
			s.InlineUniqueFields.Encode(e)
		}
	}
	{
		if s.MergeUniqueFields.Set {
			e.FieldStart("merge_unique_fields")
			s.MergeUniqueFields.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestInlineOneOf = [4]string{
	0: "inline_discriminator",
	1: "merge_discriminator",
	2: "inline_unique_fields",
	3: "merge_unique_fields",
}

// Decode decodes TestInlineOneOf from json.
func (s *TestInlineOneOf) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestInlineOneOf to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "inline_discriminator":
			if err := func() error {
				s.InlineDiscriminator.Reset()
				if err := s.InlineDiscriminator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inline_discriminator\"")
			}
		case "merge_discriminator":
			if err := func() error {
				s.MergeDiscriminator.Reset()
				if err := s.MergeDiscriminator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merge_discriminator\"")
			}
		case "inline_unique_fields":
			if err := func() error {
				s.InlineUniqueFields.Reset()
				if err := s.InlineUniqueFields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inline_unique_fields\"")
			}
		case "merge_unique_fields":
			if err := func() error {
				s.MergeUniqueFields.Reset()
				if err := s.MergeUniqueFields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merge_unique_fields\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestInlineOneOf")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestInlineOneOf) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestInlineOneOf) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TestNullableOneofsCreated as json.
func (s TestNullableOneofsCreated) Encode(e *jx.Encoder) {
	unwrapped := OneOfWithNullable(s)

	unwrapped.Encode(e)
}

// Decode decodes TestNullableOneofsCreated from json.
func (s *TestNullableOneofsCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestNullableOneofsCreated to nil")
	}
	var unwrapped OneOfWithNullable
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TestNullableOneofsCreated(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestNullableOneofsCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestNullableOneofsCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TestNullableOneofsOK as json.
func (s TestNullableOneofsOK) Encode(e *jx.Encoder) {
	unwrapped := OneOfWithNullable(s)

	unwrapped.Encode(e)
}

// Decode decodes TestNullableOneofsOK from json.
func (s *TestNullableOneofsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestNullableOneofsOK to nil")
	}
	var unwrapped OneOfWithNullable
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TestNullableOneofsOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestNullableOneofsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestNullableOneofsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TupleNamedTest) Encode(e *jx.Encoder) {
	e.ArrStart()
	s.encodeTuple(e)
	e.ArrEnd()
}

// encodeTuple encodes fields.
func (s *TupleNamedTest) encodeTuple(e *jx.Encoder) {
	{
		elem := s.Integer
		e.Int(elem)
	}
	{
		elem := s.Boolean
		e.Bool(elem)
	}
	{
		elem := s.V2
		e.Str(elem)
	}
	{
		elem := s.V3
		e.ArrStart()
		for _, elem := range elem {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		elem := s.V4
		elem.Encode(e)
	}
}

// Decode decodes TupleNamedTest from json.
func (s *TupleNamedTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TupleNamedTest to nil")
	}
	n := 0
	if err := d.Arr(func(d *jx.Decoder) error {
		switch n {
		case 0:
			n++
			v, err := d.Int()
			s.Integer = int(v)
			if err != nil {
				return err
			}
			return nil
		case 1:
			n++
			v, err := d.Bool()
			s.Boolean = bool(v)
			if err != nil {
				return err
			}
			return nil
		case 2:
			n++
			v, err := d.Str()
			s.V2 = string(v)
			if err != nil {
				return err
			}
			return nil
		case 3:
			n++
			s.V3 = make([][]string, 0)
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem []string
				elem = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elemElem string
					v, err := d.Str()
					elemElem = string(v)
					if err != nil {
						return err
					}
					elem = append(elem, elemElem)
					return nil
				}); err != nil {
					return err
				}
				s.V3 = append(s.V3, elem)
				return nil
			}); err != nil {
				return err
			}
			return nil
		case 4:
			n++
			if err := s.V4.Decode(d); err != nil {
				return err
			}
			return nil
		default:
			return errors.Errorf("expected 5 elements, got %d", n)
		}
	}); err != nil {
		return err
	}
	if n == 0 {
		return errors.Errorf("expected 5 elements, got %d", n)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TupleNamedTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TupleNamedTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TupleNamedTestV4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TupleNamedTestV4) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("foo")
		e.Str(s.Foo)
	}
	{
		if s.Bar.Set {
			e.FieldStart("bar")
			s.Bar.Encode(e)
		}
	}
}

var jsonFieldsNameOfTupleNamedTestV4 = [2]string{
	0: "foo",
	1: "bar",
}

// Decode decodes TupleNamedTestV4 from json.
func (s *TupleNamedTestV4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TupleNamedTestV4 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "foo":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Foo = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"foo\"")
			}
		case "bar":
			if err := func() error {
				s.Bar.Reset()
				if err := s.Bar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bar\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TupleNamedTestV4")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTupleNamedTestV4) {
					name = jsonFieldsNameOfTupleNamedTestV4[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TupleNamedTestV4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TupleNamedTestV4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TupleTest) Encode(e *jx.Encoder) {
	e.ArrStart()
	s.encodeTuple(e)
	e.ArrEnd()
}

// encodeTuple encodes fields.
func (s *TupleTest) encodeTuple(e *jx.Encoder) {
	{
		elem := s.V0
		e.Int(elem)
	}
	{
		elem := s.V1
		e.Bool(elem)
	}
	{
		elem := s.V2
		e.Str(elem)
	}
	{
		elem := s.V3
		e.ArrStart()
		for _, elem := range elem {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		elem := s.V4
		elem.Encode(e)
	}
}

// Decode decodes TupleTest from json.
func (s *TupleTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TupleTest to nil")
	}
	n := 0
	if err := d.Arr(func(d *jx.Decoder) error {
		switch n {
		case 0:
			n++
			v, err := d.Int()
			s.V0 = int(v)
			if err != nil {
				return err
			}
			return nil
		case 1:
			n++
			v, err := d.Bool()
			s.V1 = bool(v)
			if err != nil {
				return err
			}
			return nil
		case 2:
			n++
			v, err := d.Str()
			s.V2 = string(v)
			if err != nil {
				return err
			}
			return nil
		case 3:
			n++
			s.V3 = make([][]string, 0)
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem []string
				elem = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elemElem string
					v, err := d.Str()
					elemElem = string(v)
					if err != nil {
						return err
					}
					elem = append(elem, elemElem)
					return nil
				}); err != nil {
					return err
				}
				s.V3 = append(s.V3, elem)
				return nil
			}); err != nil {
				return err
			}
			return nil
		case 4:
			n++
			if err := s.V4.Decode(d); err != nil {
				return err
			}
			return nil
		default:
			return errors.Errorf("expected 5 elements, got %d", n)
		}
	}); err != nil {
		return err
	}
	if n == 0 {
		return errors.Errorf("expected 5 elements, got %d", n)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TupleTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TupleTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TupleTestV4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TupleTestV4) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("foo")
		e.Str(s.Foo)
	}
	{
		if s.Bar.Set {
			e.FieldStart("bar")
			s.Bar.Encode(e)
		}
	}
}

var jsonFieldsNameOfTupleTestV4 = [2]string{
	0: "foo",
	1: "bar",
}

// Decode decodes TupleTestV4 from json.
func (s *TupleTestV4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TupleTestV4 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "foo":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Foo = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"foo\"")
			}
		case "bar":
			if err := func() error {
				s.Bar.Reset()
				if err := s.Bar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bar\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TupleTestV4")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTupleTestV4) {
					name = jsonFieldsNameOfTupleTestV4[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TupleTestV4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TupleTestV4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UniqueItemsTest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UniqueItemsTest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("required_unique")
		e.ArrStart()
		for _, elem := range s.RequiredUnique {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.NullableOptionalUnique.Set {
			e.FieldStart("nullable_optional_unique")
			s.NullableOptionalUnique.Encode(e)
		}
	}
}

var jsonFieldsNameOfUniqueItemsTest = [2]string{
	0: "required_unique",
	1: "nullable_optional_unique",
}

// Decode decodes UniqueItemsTest from json.
func (s *UniqueItemsTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UniqueItemsTest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_unique":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.RequiredUnique = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredUnique = append(s.RequiredUnique, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_unique\"")
			}
		case "nullable_optional_unique":
			if err := func() error {
				s.NullableOptionalUnique.Reset()
				if err := s.NullableOptionalUnique.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_optional_unique\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UniqueItemsTest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUniqueItemsTest) {
					name = jsonFieldsNameOfUniqueItemsTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UniqueItemsTest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UniqueItemsTest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s ValidationStringMap) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s ValidationStringMap) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Str(elem)
	}
}

// Decode decodes ValidationStringMap from json.
func (s *ValidationStringMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ValidationStringMap to nil")
	}
	m := s.init()
	var propertiesCount int
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		propertiesCount++
		var elem string
		if err := func() error {
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ValidationStringMap")
	}
	// Validate properties count.
	if err := (validate.Object{
		MinProperties:    1,
		MinPropertiesSet: true,
		MaxProperties:    4,
		MaxPropertiesSet: true,
	}).ValidateProperties(propertiesCount); err != nil {
		return errors.Wrap(err, "object")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ValidationStringMap) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ValidationStringMap) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

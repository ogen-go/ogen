// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

type APIKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *APIKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *APIKey) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/AnyTest
type AnyTest struct {
	Empty    jx.Raw           `json:"empty"`
	AnyMap   OptAnyTestAnyMap `json:"any_map"`
	AnyArray []jx.Raw         `json:"any_array"`
}

// GetEmpty returns the value of Empty.
func (s *AnyTest) GetEmpty() jx.Raw {
	return s.Empty
}

// GetAnyMap returns the value of AnyMap.
func (s *AnyTest) GetAnyMap() OptAnyTestAnyMap {
	return s.AnyMap
}

// GetAnyArray returns the value of AnyArray.
func (s *AnyTest) GetAnyArray() []jx.Raw {
	return s.AnyArray
}

// SetEmpty sets the value of Empty.
func (s *AnyTest) SetEmpty(val jx.Raw) {
	s.Empty = val
}

// SetAnyMap sets the value of AnyMap.
func (s *AnyTest) SetAnyMap(val OptAnyTestAnyMap) {
	s.AnyMap = val
}

// SetAnyArray sets the value of AnyArray.
func (s *AnyTest) SetAnyArray(val []jx.Raw) {
	s.AnyArray = val
}

type AnyTestAnyMap map[string]jx.Raw

func (s *AnyTestAnyMap) init() AnyTestAnyMap {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Test array encoder/decoder generation.
// Ref: #/components/schemas/ArrayTest
type ArrayTest struct {
	Required         []string          `json:"required"`
	Optional         []string          `json:"optional"`
	NullableRequired []string          `json:"nullable_required"`
	NullableOptional OptNilStringArray `json:"nullable_optional"`
}

// GetRequired returns the value of Required.
func (s *ArrayTest) GetRequired() []string {
	return s.Required
}

// GetOptional returns the value of Optional.
func (s *ArrayTest) GetOptional() []string {
	return s.Optional
}

// GetNullableRequired returns the value of NullableRequired.
func (s *ArrayTest) GetNullableRequired() []string {
	return s.NullableRequired
}

// GetNullableOptional returns the value of NullableOptional.
func (s *ArrayTest) GetNullableOptional() OptNilStringArray {
	return s.NullableOptional
}

// SetRequired sets the value of Required.
func (s *ArrayTest) SetRequired(val []string) {
	s.Required = val
}

// SetOptional sets the value of Optional.
func (s *ArrayTest) SetOptional(val []string) {
	s.Optional = val
}

// SetNullableRequired sets the value of NullableRequired.
func (s *ArrayTest) SetNullableRequired(val []string) {
	s.NullableRequired = val
}

// SetNullableOptional sets the value of NullableOptional.
func (s *ArrayTest) SetNullableOptional(val OptNilStringArray) {
	s.NullableOptional = val
}

// Ref: #/components/schemas/Data
type Data struct {
	ID           ID               `json:"id"`
	Description  DataDescription  `json:"description"`
	Email        string           `json:"email"`
	Hostname     string           `json:"hostname"`
	Format       string           `json:"format"`
	Base64       []byte           `json:"base64"`
	NullableEnum OptNullableEnums `json:"nullable_enum"`
}

// GetID returns the value of ID.
func (s *Data) GetID() ID {
	return s.ID
}

// GetDescription returns the value of Description.
func (s *Data) GetDescription() DataDescription {
	return s.Description
}

// GetEmail returns the value of Email.
func (s *Data) GetEmail() string {
	return s.Email
}

// GetHostname returns the value of Hostname.
func (s *Data) GetHostname() string {
	return s.Hostname
}

// GetFormat returns the value of Format.
func (s *Data) GetFormat() string {
	return s.Format
}

// GetBase64 returns the value of Base64.
func (s *Data) GetBase64() []byte {
	return s.Base64
}

// GetNullableEnum returns the value of NullableEnum.
func (s *Data) GetNullableEnum() OptNullableEnums {
	return s.NullableEnum
}

// SetID sets the value of ID.
func (s *Data) SetID(val ID) {
	s.ID = val
}

// SetDescription sets the value of Description.
func (s *Data) SetDescription(val DataDescription) {
	s.Description = val
}

// SetEmail sets the value of Email.
func (s *Data) SetEmail(val string) {
	s.Email = val
}

// SetHostname sets the value of Hostname.
func (s *Data) SetHostname(val string) {
	s.Hostname = val
}

// SetFormat sets the value of Format.
func (s *Data) SetFormat(val string) {
	s.Format = val
}

// SetBase64 sets the value of Base64.
func (s *Data) SetBase64(val []byte) {
	s.Base64 = val
}

// SetNullableEnum sets the value of NullableEnum.
func (s *Data) SetNullableEnum(val OptNullableEnums) {
	s.NullableEnum = val
}

// DataDescription represents sum type.
type DataDescription struct {
	Type                DataDescriptionType // switch on this field
	DescriptionDetailed DescriptionDetailed
	DescriptionSimple   DescriptionSimple
}

// DataDescriptionType is oneOf type of DataDescription.
type DataDescriptionType string

// Possible values for DataDescriptionType.
const (
	DescriptionDetailedDataDescription DataDescriptionType = "DescriptionDetailed"
	DescriptionSimpleDataDescription   DataDescriptionType = "DescriptionSimple"
)

// IsDescriptionDetailed reports whether DataDescription is DescriptionDetailed.
func (s DataDescription) IsDescriptionDetailed() bool {
	return s.Type == DescriptionDetailedDataDescription
}

// IsDescriptionSimple reports whether DataDescription is DescriptionSimple.
func (s DataDescription) IsDescriptionSimple() bool {
	return s.Type == DescriptionSimpleDataDescription
}

// SetDescriptionDetailed sets DataDescription to DescriptionDetailed.
func (s *DataDescription) SetDescriptionDetailed(v DescriptionDetailed) {
	s.Type = DescriptionDetailedDataDescription
	s.DescriptionDetailed = v
}

// GetDescriptionDetailed returns DescriptionDetailed and true boolean if DataDescription is DescriptionDetailed.
func (s DataDescription) GetDescriptionDetailed() (v DescriptionDetailed, ok bool) {
	if !s.IsDescriptionDetailed() {
		return v, false
	}
	return s.DescriptionDetailed, true
}

// NewDescriptionDetailedDataDescription returns new DataDescription from DescriptionDetailed.
func NewDescriptionDetailedDataDescription(v DescriptionDetailed) DataDescription {
	var s DataDescription
	s.SetDescriptionDetailed(v)
	return s
}

// SetDescriptionSimple sets DataDescription to DescriptionSimple.
func (s *DataDescription) SetDescriptionSimple(v DescriptionSimple) {
	s.Type = DescriptionSimpleDataDescription
	s.DescriptionSimple = v
}

// GetDescriptionSimple returns DescriptionSimple and true boolean if DataDescription is DescriptionSimple.
func (s DataDescription) GetDescriptionSimple() (v DescriptionSimple, ok bool) {
	if !s.IsDescriptionSimple() {
		return v, false
	}
	return s.DescriptionSimple, true
}

// NewDescriptionSimpleDataDescription returns new DataDescription from DescriptionSimple.
func NewDescriptionSimpleDataDescription(v DescriptionSimple) DataDescription {
	var s DataDescription
	s.SetDescriptionSimple(v)
	return s
}

// Ref: #/components/schemas/DefaultTest
type DefaultTest struct {
	Required string             `json:"required"`
	Str      OptString          `json:"str"`
	NullStr  OptNilString       `json:"nullStr"`
	Enum     OptDefaultTestEnum `json:"enum"`
	UUID     OptUUID            `json:"uuid"`
	IP       OptIP              `json:"ip"`
	IPV4     OptIPv4            `json:"ip_v4"`
	IPV6     OptIPv6            `json:"ip_v6"`
	URI      OptURI             `json:"uri"`
	Birthday OptDate            `json:"birthday"`
	Rate     OptDuration        `json:"rate"`
	Email    OptString          `json:"email"`
	Hostname OptString          `json:"hostname"`
	Format   OptString          `json:"format"`
	Base64   []byte             `json:"base64"`
}

// GetRequired returns the value of Required.
func (s *DefaultTest) GetRequired() string {
	return s.Required
}

// GetStr returns the value of Str.
func (s *DefaultTest) GetStr() OptString {
	return s.Str
}

// GetNullStr returns the value of NullStr.
func (s *DefaultTest) GetNullStr() OptNilString {
	return s.NullStr
}

// GetEnum returns the value of Enum.
func (s *DefaultTest) GetEnum() OptDefaultTestEnum {
	return s.Enum
}

// GetUUID returns the value of UUID.
func (s *DefaultTest) GetUUID() OptUUID {
	return s.UUID
}

// GetIP returns the value of IP.
func (s *DefaultTest) GetIP() OptIP {
	return s.IP
}

// GetIPV4 returns the value of IPV4.
func (s *DefaultTest) GetIPV4() OptIPv4 {
	return s.IPV4
}

// GetIPV6 returns the value of IPV6.
func (s *DefaultTest) GetIPV6() OptIPv6 {
	return s.IPV6
}

// GetURI returns the value of URI.
func (s *DefaultTest) GetURI() OptURI {
	return s.URI
}

// GetBirthday returns the value of Birthday.
func (s *DefaultTest) GetBirthday() OptDate {
	return s.Birthday
}

// GetRate returns the value of Rate.
func (s *DefaultTest) GetRate() OptDuration {
	return s.Rate
}

// GetEmail returns the value of Email.
func (s *DefaultTest) GetEmail() OptString {
	return s.Email
}

// GetHostname returns the value of Hostname.
func (s *DefaultTest) GetHostname() OptString {
	return s.Hostname
}

// GetFormat returns the value of Format.
func (s *DefaultTest) GetFormat() OptString {
	return s.Format
}

// GetBase64 returns the value of Base64.
func (s *DefaultTest) GetBase64() []byte {
	return s.Base64
}

// SetRequired sets the value of Required.
func (s *DefaultTest) SetRequired(val string) {
	s.Required = val
}

// SetStr sets the value of Str.
func (s *DefaultTest) SetStr(val OptString) {
	s.Str = val
}

// SetNullStr sets the value of NullStr.
func (s *DefaultTest) SetNullStr(val OptNilString) {
	s.NullStr = val
}

// SetEnum sets the value of Enum.
func (s *DefaultTest) SetEnum(val OptDefaultTestEnum) {
	s.Enum = val
}

// SetUUID sets the value of UUID.
func (s *DefaultTest) SetUUID(val OptUUID) {
	s.UUID = val
}

// SetIP sets the value of IP.
func (s *DefaultTest) SetIP(val OptIP) {
	s.IP = val
}

// SetIPV4 sets the value of IPV4.
func (s *DefaultTest) SetIPV4(val OptIPv4) {
	s.IPV4 = val
}

// SetIPV6 sets the value of IPV6.
func (s *DefaultTest) SetIPV6(val OptIPv6) {
	s.IPV6 = val
}

// SetURI sets the value of URI.
func (s *DefaultTest) SetURI(val OptURI) {
	s.URI = val
}

// SetBirthday sets the value of Birthday.
func (s *DefaultTest) SetBirthday(val OptDate) {
	s.Birthday = val
}

// SetRate sets the value of Rate.
func (s *DefaultTest) SetRate(val OptDuration) {
	s.Rate = val
}

// SetEmail sets the value of Email.
func (s *DefaultTest) SetEmail(val OptString) {
	s.Email = val
}

// SetHostname sets the value of Hostname.
func (s *DefaultTest) SetHostname(val OptString) {
	s.Hostname = val
}

// SetFormat sets the value of Format.
func (s *DefaultTest) SetFormat(val OptString) {
	s.Format = val
}

// SetBase64 sets the value of Base64.
func (s *DefaultTest) SetBase64(val []byte) {
	s.Base64 = val
}

type DefaultTestEnum string

const (
	DefaultTestEnumBig  DefaultTestEnum = "big"
	DefaultTestEnumSmol DefaultTestEnum = "smol"
)

// AllValues returns all DefaultTestEnum values.
func (DefaultTestEnum) AllValues() []DefaultTestEnum {
	return []DefaultTestEnum{
		DefaultTestEnumBig,
		DefaultTestEnumSmol,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DefaultTestEnum) MarshalText() ([]byte, error) {
	switch s {
	case DefaultTestEnumBig:
		return []byte(s), nil
	case DefaultTestEnumSmol:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DefaultTestEnum) UnmarshalText(data []byte) error {
	switch DefaultTestEnum(data) {
	case DefaultTestEnumBig:
		*s = DefaultTestEnumBig
		return nil
	case DefaultTestEnumSmol:
		*s = DefaultTestEnumSmol
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DescriptionDetailed
type DescriptionDetailed struct {
	Name  string `json:"name"`
	Count int    `json:"count"`
	ID    OptID  `json:"id"`
}

// GetName returns the value of Name.
func (s *DescriptionDetailed) GetName() string {
	return s.Name
}

// GetCount returns the value of Count.
func (s *DescriptionDetailed) GetCount() int {
	return s.Count
}

// GetID returns the value of ID.
func (s *DescriptionDetailed) GetID() OptID {
	return s.ID
}

// SetName sets the value of Name.
func (s *DescriptionDetailed) SetName(val string) {
	s.Name = val
}

// SetCount sets the value of Count.
func (s *DescriptionDetailed) SetCount(val int) {
	s.Count = val
}

// SetID sets the value of ID.
func (s *DescriptionDetailed) SetID(val OptID) {
	s.ID = val
}

// Ref: #/components/schemas/DescriptionSimple
type DescriptionSimple struct {
	Description string `json:"description"`
}

// GetDescription returns the value of Description.
func (s *DescriptionSimple) GetDescription() string {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *DescriptionSimple) SetDescription(val string) {
	s.Description = val
}

type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) foobarPostRes()          {}
func (*ErrorStatusCode) petGetAvatarByIDRes()    {}
func (*ErrorStatusCode) petGetAvatarByNameRes()  {}
func (*ErrorStatusCode) petUploadAvatarByIDRes() {}

// FoobarPutDef is default response for FoobarPut operation.
type FoobarPutDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *FoobarPutDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *FoobarPutDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// Ref: #/components/schemas/ID
// ID represents sum type.
type ID struct {
	Type   IDType // switch on this field
	String string
	Int    int
}

// IDType is oneOf type of ID.
type IDType string

// Possible values for IDType.
const (
	StringID IDType = "string"
	IntID    IDType = "int"
)

// IsString reports whether ID is string.
func (s ID) IsString() bool { return s.Type == StringID }

// IsInt reports whether ID is int.
func (s ID) IsInt() bool { return s.Type == IntID }

// SetString sets ID to string.
func (s *ID) SetString(v string) {
	s.Type = StringID
	s.String = v
}

// GetString returns string and true boolean if ID is string.
func (s ID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringID returns new ID from string.
func NewStringID(v string) ID {
	var s ID
	s.SetString(v)
	return s
}

// SetInt sets ID to int.
func (s *ID) SetInt(v int) {
	s.Type = IntID
	s.Int = v
}

// GetInt returns int and true boolean if ID is int.
func (s ID) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntID returns new ID from int.
func NewIntID(v int) ID {
	var s ID
	s.SetInt(v)
	return s
}

// Ref: #/components/schemas/InlineDiscriminatorOneOf
type InlineDiscriminatorOneOf struct {
	Common string `json:"common"`
	OneOf  InlineDiscriminatorOneOfSum
}

// GetCommon returns the value of Common.
func (s *InlineDiscriminatorOneOf) GetCommon() string {
	return s.Common
}

// GetOneOf returns the value of OneOf.
func (s *InlineDiscriminatorOneOf) GetOneOf() InlineDiscriminatorOneOfSum {
	return s.OneOf
}

// SetCommon sets the value of Common.
func (s *InlineDiscriminatorOneOf) SetCommon(val string) {
	s.Common = val
}

// SetOneOf sets the value of OneOf.
func (s *InlineDiscriminatorOneOf) SetOneOf(val InlineDiscriminatorOneOfSum) {
	s.OneOf = val
}

// InlineDiscriminatorOneOfSum represents sum type.
type InlineDiscriminatorOneOfSum struct {
	Type           InlineDiscriminatorOneOfSumType // switch on this field
	InlineOneOfFoo InlineOneOfFoo
	InlineOneOfBar InlineOneOfBar
}

// InlineDiscriminatorOneOfSumType is oneOf type of InlineDiscriminatorOneOfSum.
type InlineDiscriminatorOneOfSumType string

// Possible values for InlineDiscriminatorOneOfSumType.
const (
	InlineOneOfFooInlineDiscriminatorOneOfSum InlineDiscriminatorOneOfSumType = "foo"
	InlineOneOfBarInlineDiscriminatorOneOfSum InlineDiscriminatorOneOfSumType = "bar"
)

// IsInlineOneOfFoo reports whether InlineDiscriminatorOneOfSum is InlineOneOfFoo.
func (s InlineDiscriminatorOneOfSum) IsInlineOneOfFoo() bool {
	return s.Type == InlineOneOfFooInlineDiscriminatorOneOfSum
}

// IsInlineOneOfBar reports whether InlineDiscriminatorOneOfSum is InlineOneOfBar.
func (s InlineDiscriminatorOneOfSum) IsInlineOneOfBar() bool {
	return s.Type == InlineOneOfBarInlineDiscriminatorOneOfSum
}

// SetInlineOneOfFoo sets InlineDiscriminatorOneOfSum to InlineOneOfFoo.
func (s *InlineDiscriminatorOneOfSum) SetInlineOneOfFoo(v InlineOneOfFoo) {
	s.Type = InlineOneOfFooInlineDiscriminatorOneOfSum
	s.InlineOneOfFoo = v
}

// GetInlineOneOfFoo returns InlineOneOfFoo and true boolean if InlineDiscriminatorOneOfSum is InlineOneOfFoo.
func (s InlineDiscriminatorOneOfSum) GetInlineOneOfFoo() (v InlineOneOfFoo, ok bool) {
	if !s.IsInlineOneOfFoo() {
		return v, false
	}
	return s.InlineOneOfFoo, true
}

// NewInlineOneOfFooInlineDiscriminatorOneOfSum returns new InlineDiscriminatorOneOfSum from InlineOneOfFoo.
func NewInlineOneOfFooInlineDiscriminatorOneOfSum(v InlineOneOfFoo) InlineDiscriminatorOneOfSum {
	var s InlineDiscriminatorOneOfSum
	s.SetInlineOneOfFoo(v)
	return s
}

// SetInlineOneOfBar sets InlineDiscriminatorOneOfSum to InlineOneOfBar.
func (s *InlineDiscriminatorOneOfSum) SetInlineOneOfBar(v InlineOneOfBar) {
	s.Type = InlineOneOfBarInlineDiscriminatorOneOfSum
	s.InlineOneOfBar = v
}

// GetInlineOneOfBar returns InlineOneOfBar and true boolean if InlineDiscriminatorOneOfSum is InlineOneOfBar.
func (s InlineDiscriminatorOneOfSum) GetInlineOneOfBar() (v InlineOneOfBar, ok bool) {
	if !s.IsInlineOneOfBar() {
		return v, false
	}
	return s.InlineOneOfBar, true
}

// NewInlineOneOfBarInlineDiscriminatorOneOfSum returns new InlineDiscriminatorOneOfSum from InlineOneOfBar.
func NewInlineOneOfBarInlineDiscriminatorOneOfSum(v InlineOneOfBar) InlineDiscriminatorOneOfSum {
	var s InlineDiscriminatorOneOfSum
	s.SetInlineOneOfBar(v)
	return s
}

// Ref: #/components/schemas/InlineOneOfBar
type InlineOneOfBar struct {
	Bar OptString `json:"bar"`
}

// GetBar returns the value of Bar.
func (s *InlineOneOfBar) GetBar() OptString {
	return s.Bar
}

// SetBar sets the value of Bar.
func (s *InlineOneOfBar) SetBar(val OptString) {
	s.Bar = val
}

// Ref: #/components/schemas/InlineOneOfFoo
type InlineOneOfFoo struct {
	Foo OptString `json:"foo"`
}

// GetFoo returns the value of Foo.
func (s *InlineOneOfFoo) GetFoo() OptString {
	return s.Foo
}

// SetFoo sets the value of Foo.
func (s *InlineOneOfFoo) SetFoo(val OptString) {
	s.Foo = val
}

// Ref: #/components/schemas/InlineUniqueFieldsOneOf
type InlineUniqueFieldsOneOf struct {
	Common string `json:"common"`
	OneOf  InlineUniqueFieldsOneOfSum
}

// GetCommon returns the value of Common.
func (s *InlineUniqueFieldsOneOf) GetCommon() string {
	return s.Common
}

// GetOneOf returns the value of OneOf.
func (s *InlineUniqueFieldsOneOf) GetOneOf() InlineUniqueFieldsOneOfSum {
	return s.OneOf
}

// SetCommon sets the value of Common.
func (s *InlineUniqueFieldsOneOf) SetCommon(val string) {
	s.Common = val
}

// SetOneOf sets the value of OneOf.
func (s *InlineUniqueFieldsOneOf) SetOneOf(val InlineUniqueFieldsOneOfSum) {
	s.OneOf = val
}

// InlineUniqueFieldsOneOfSum represents sum type.
type InlineUniqueFieldsOneOfSum struct {
	Type           InlineUniqueFieldsOneOfSumType // switch on this field
	InlineOneOfFoo InlineOneOfFoo
	InlineOneOfBar InlineOneOfBar
}

// InlineUniqueFieldsOneOfSumType is oneOf type of InlineUniqueFieldsOneOfSum.
type InlineUniqueFieldsOneOfSumType string

// Possible values for InlineUniqueFieldsOneOfSumType.
const (
	InlineOneOfFooInlineUniqueFieldsOneOfSum InlineUniqueFieldsOneOfSumType = "InlineOneOfFoo"
	InlineOneOfBarInlineUniqueFieldsOneOfSum InlineUniqueFieldsOneOfSumType = "InlineOneOfBar"
)

// IsInlineOneOfFoo reports whether InlineUniqueFieldsOneOfSum is InlineOneOfFoo.
func (s InlineUniqueFieldsOneOfSum) IsInlineOneOfFoo() bool {
	return s.Type == InlineOneOfFooInlineUniqueFieldsOneOfSum
}

// IsInlineOneOfBar reports whether InlineUniqueFieldsOneOfSum is InlineOneOfBar.
func (s InlineUniqueFieldsOneOfSum) IsInlineOneOfBar() bool {
	return s.Type == InlineOneOfBarInlineUniqueFieldsOneOfSum
}

// SetInlineOneOfFoo sets InlineUniqueFieldsOneOfSum to InlineOneOfFoo.
func (s *InlineUniqueFieldsOneOfSum) SetInlineOneOfFoo(v InlineOneOfFoo) {
	s.Type = InlineOneOfFooInlineUniqueFieldsOneOfSum
	s.InlineOneOfFoo = v
}

// GetInlineOneOfFoo returns InlineOneOfFoo and true boolean if InlineUniqueFieldsOneOfSum is InlineOneOfFoo.
func (s InlineUniqueFieldsOneOfSum) GetInlineOneOfFoo() (v InlineOneOfFoo, ok bool) {
	if !s.IsInlineOneOfFoo() {
		return v, false
	}
	return s.InlineOneOfFoo, true
}

// NewInlineOneOfFooInlineUniqueFieldsOneOfSum returns new InlineUniqueFieldsOneOfSum from InlineOneOfFoo.
func NewInlineOneOfFooInlineUniqueFieldsOneOfSum(v InlineOneOfFoo) InlineUniqueFieldsOneOfSum {
	var s InlineUniqueFieldsOneOfSum
	s.SetInlineOneOfFoo(v)
	return s
}

// SetInlineOneOfBar sets InlineUniqueFieldsOneOfSum to InlineOneOfBar.
func (s *InlineUniqueFieldsOneOfSum) SetInlineOneOfBar(v InlineOneOfBar) {
	s.Type = InlineOneOfBarInlineUniqueFieldsOneOfSum
	s.InlineOneOfBar = v
}

// GetInlineOneOfBar returns InlineOneOfBar and true boolean if InlineUniqueFieldsOneOfSum is InlineOneOfBar.
func (s InlineUniqueFieldsOneOfSum) GetInlineOneOfBar() (v InlineOneOfBar, ok bool) {
	if !s.IsInlineOneOfBar() {
		return v, false
	}
	return s.InlineOneOfBar, true
}

// NewInlineOneOfBarInlineUniqueFieldsOneOfSum returns new InlineUniqueFieldsOneOfSum from InlineOneOfBar.
func NewInlineOneOfBarInlineUniqueFieldsOneOfSum(v InlineOneOfBar) InlineUniqueFieldsOneOfSum {
	var s InlineUniqueFieldsOneOfSum
	s.SetInlineOneOfBar(v)
	return s
}

// Ref: #/components/schemas/Issue143
// Issue143 represents sum type.
type Issue143 struct {
	Type      Issue143Type // switch on this field
	Issue1430 Issue1430
	Issue1431 Issue1431
	Issue1432 Issue1432
	Issue1433 Issue1433
}

// Issue143Type is oneOf type of Issue143.
type Issue143Type string

// Possible values for Issue143Type.
const (
	Issue1430Issue143 Issue143Type = "Issue1430"
	Issue1431Issue143 Issue143Type = "Issue1431"
	Issue1432Issue143 Issue143Type = "Issue1432"
	Issue1433Issue143 Issue143Type = "Issue1433"
)

// IsIssue1430 reports whether Issue143 is Issue1430.
func (s Issue143) IsIssue1430() bool { return s.Type == Issue1430Issue143 }

// IsIssue1431 reports whether Issue143 is Issue1431.
func (s Issue143) IsIssue1431() bool { return s.Type == Issue1431Issue143 }

// IsIssue1432 reports whether Issue143 is Issue1432.
func (s Issue143) IsIssue1432() bool { return s.Type == Issue1432Issue143 }

// IsIssue1433 reports whether Issue143 is Issue1433.
func (s Issue143) IsIssue1433() bool { return s.Type == Issue1433Issue143 }

// SetIssue1430 sets Issue143 to Issue1430.
func (s *Issue143) SetIssue1430(v Issue1430) {
	s.Type = Issue1430Issue143
	s.Issue1430 = v
}

// GetIssue1430 returns Issue1430 and true boolean if Issue143 is Issue1430.
func (s Issue143) GetIssue1430() (v Issue1430, ok bool) {
	if !s.IsIssue1430() {
		return v, false
	}
	return s.Issue1430, true
}

// NewIssue1430Issue143 returns new Issue143 from Issue1430.
func NewIssue1430Issue143(v Issue1430) Issue143 {
	var s Issue143
	s.SetIssue1430(v)
	return s
}

// SetIssue1431 sets Issue143 to Issue1431.
func (s *Issue143) SetIssue1431(v Issue1431) {
	s.Type = Issue1431Issue143
	s.Issue1431 = v
}

// GetIssue1431 returns Issue1431 and true boolean if Issue143 is Issue1431.
func (s Issue143) GetIssue1431() (v Issue1431, ok bool) {
	if !s.IsIssue1431() {
		return v, false
	}
	return s.Issue1431, true
}

// NewIssue1431Issue143 returns new Issue143 from Issue1431.
func NewIssue1431Issue143(v Issue1431) Issue143 {
	var s Issue143
	s.SetIssue1431(v)
	return s
}

// SetIssue1432 sets Issue143 to Issue1432.
func (s *Issue143) SetIssue1432(v Issue1432) {
	s.Type = Issue1432Issue143
	s.Issue1432 = v
}

// GetIssue1432 returns Issue1432 and true boolean if Issue143 is Issue1432.
func (s Issue143) GetIssue1432() (v Issue1432, ok bool) {
	if !s.IsIssue1432() {
		return v, false
	}
	return s.Issue1432, true
}

// NewIssue1432Issue143 returns new Issue143 from Issue1432.
func NewIssue1432Issue143(v Issue1432) Issue143 {
	var s Issue143
	s.SetIssue1432(v)
	return s
}

// SetIssue1433 sets Issue143 to Issue1433.
func (s *Issue143) SetIssue1433(v Issue1433) {
	s.Type = Issue1433Issue143
	s.Issue1433 = v
}

// GetIssue1433 returns Issue1433 and true boolean if Issue143 is Issue1433.
func (s Issue143) GetIssue1433() (v Issue1433, ok bool) {
	if !s.IsIssue1433() {
		return v, false
	}
	return s.Issue1433, true
}

// NewIssue1433Issue143 returns new Issue143 from Issue1433.
func NewIssue1433Issue143(v Issue1433) Issue143 {
	var s Issue143
	s.SetIssue1433(v)
	return s
}

type Issue1430 struct {
	CommonMinus1 string `json:"common-1"`
	CommonMinus2 int    `json:"common-2"`
	UniqueMinus1 string `json:"unique-1"`
}

// GetCommonMinus1 returns the value of CommonMinus1.
func (s *Issue1430) GetCommonMinus1() string {
	return s.CommonMinus1
}

// GetCommonMinus2 returns the value of CommonMinus2.
func (s *Issue1430) GetCommonMinus2() int {
	return s.CommonMinus2
}

// GetUniqueMinus1 returns the value of UniqueMinus1.
func (s *Issue1430) GetUniqueMinus1() string {
	return s.UniqueMinus1
}

// SetCommonMinus1 sets the value of CommonMinus1.
func (s *Issue1430) SetCommonMinus1(val string) {
	s.CommonMinus1 = val
}

// SetCommonMinus2 sets the value of CommonMinus2.
func (s *Issue1430) SetCommonMinus2(val int) {
	s.CommonMinus2 = val
}

// SetUniqueMinus1 sets the value of UniqueMinus1.
func (s *Issue1430) SetUniqueMinus1(val string) {
	s.UniqueMinus1 = val
}

type Issue1431 struct {
	CommonMinus1 string `json:"common-1"`
	CommonMinus2 int    `json:"common-2"`
	UniqueMinus2 string `json:"unique-2"`
}

// GetCommonMinus1 returns the value of CommonMinus1.
func (s *Issue1431) GetCommonMinus1() string {
	return s.CommonMinus1
}

// GetCommonMinus2 returns the value of CommonMinus2.
func (s *Issue1431) GetCommonMinus2() int {
	return s.CommonMinus2
}

// GetUniqueMinus2 returns the value of UniqueMinus2.
func (s *Issue1431) GetUniqueMinus2() string {
	return s.UniqueMinus2
}

// SetCommonMinus1 sets the value of CommonMinus1.
func (s *Issue1431) SetCommonMinus1(val string) {
	s.CommonMinus1 = val
}

// SetCommonMinus2 sets the value of CommonMinus2.
func (s *Issue1431) SetCommonMinus2(val int) {
	s.CommonMinus2 = val
}

// SetUniqueMinus2 sets the value of UniqueMinus2.
func (s *Issue1431) SetUniqueMinus2(val string) {
	s.UniqueMinus2 = val
}

type Issue1432 struct {
	CommonMinus1 string `json:"common-1"`
	CommonMinus2 int    `json:"common-2"`
	CommonMinus3 OptInt `json:"common-3"`
	UniqueMinus3 string `json:"unique-3"`
}

// GetCommonMinus1 returns the value of CommonMinus1.
func (s *Issue1432) GetCommonMinus1() string {
	return s.CommonMinus1
}

// GetCommonMinus2 returns the value of CommonMinus2.
func (s *Issue1432) GetCommonMinus2() int {
	return s.CommonMinus2
}

// GetCommonMinus3 returns the value of CommonMinus3.
func (s *Issue1432) GetCommonMinus3() OptInt {
	return s.CommonMinus3
}

// GetUniqueMinus3 returns the value of UniqueMinus3.
func (s *Issue1432) GetUniqueMinus3() string {
	return s.UniqueMinus3
}

// SetCommonMinus1 sets the value of CommonMinus1.
func (s *Issue1432) SetCommonMinus1(val string) {
	s.CommonMinus1 = val
}

// SetCommonMinus2 sets the value of CommonMinus2.
func (s *Issue1432) SetCommonMinus2(val int) {
	s.CommonMinus2 = val
}

// SetCommonMinus3 sets the value of CommonMinus3.
func (s *Issue1432) SetCommonMinus3(val OptInt) {
	s.CommonMinus3 = val
}

// SetUniqueMinus3 sets the value of UniqueMinus3.
func (s *Issue1432) SetUniqueMinus3(val string) {
	s.UniqueMinus3 = val
}

type Issue1433 struct {
	CommonMinus3 OptInt `json:"common-3"`
	UniqueMinus4 string `json:"unique-4"`
}

// GetCommonMinus3 returns the value of CommonMinus3.
func (s *Issue1433) GetCommonMinus3() OptInt {
	return s.CommonMinus3
}

// GetUniqueMinus4 returns the value of UniqueMinus4.
func (s *Issue1433) GetUniqueMinus4() string {
	return s.UniqueMinus4
}

// SetCommonMinus3 sets the value of CommonMinus3.
func (s *Issue1433) SetCommonMinus3(val OptInt) {
	s.CommonMinus3 = val
}

// SetUniqueMinus4 sets the value of UniqueMinus4.
func (s *Issue1433) SetUniqueMinus4(val string) {
	s.UniqueMinus4 = val
}

// Ref: #/components/schemas/Issue943
// Issue943 represents sum type.
type Issue943 struct {
	Type             Issue943Type // switch on this field
	Issue943Variant1 Issue943Variant1
	Issue943Variant2 Issue943Variant2
	Issue943Map      Issue943Map
}

// Issue943Type is oneOf type of Issue943.
type Issue943Type string

// Possible values for Issue943Type.
const (
	Issue943Variant1Issue943 Issue943Type = "variant1"
	Issue943Variant2Issue943 Issue943Type = "variant2"
	Issue943MapIssue943      Issue943Type = "variant3"
)

// IsIssue943Variant1 reports whether Issue943 is Issue943Variant1.
func (s Issue943) IsIssue943Variant1() bool { return s.Type == Issue943Variant1Issue943 }

// IsIssue943Variant2 reports whether Issue943 is Issue943Variant2.
func (s Issue943) IsIssue943Variant2() bool { return s.Type == Issue943Variant2Issue943 }

// IsIssue943Map reports whether Issue943 is Issue943Map.
func (s Issue943) IsIssue943Map() bool { return s.Type == Issue943MapIssue943 }

// SetIssue943Variant1 sets Issue943 to Issue943Variant1.
func (s *Issue943) SetIssue943Variant1(v Issue943Variant1) {
	s.Type = Issue943Variant1Issue943
	s.Issue943Variant1 = v
}

// GetIssue943Variant1 returns Issue943Variant1 and true boolean if Issue943 is Issue943Variant1.
func (s Issue943) GetIssue943Variant1() (v Issue943Variant1, ok bool) {
	if !s.IsIssue943Variant1() {
		return v, false
	}
	return s.Issue943Variant1, true
}

// NewIssue943Variant1Issue943 returns new Issue943 from Issue943Variant1.
func NewIssue943Variant1Issue943(v Issue943Variant1) Issue943 {
	var s Issue943
	s.SetIssue943Variant1(v)
	return s
}

// SetIssue943Variant2 sets Issue943 to Issue943Variant2.
func (s *Issue943) SetIssue943Variant2(v Issue943Variant2) {
	s.Type = Issue943Variant2Issue943
	s.Issue943Variant2 = v
}

// GetIssue943Variant2 returns Issue943Variant2 and true boolean if Issue943 is Issue943Variant2.
func (s Issue943) GetIssue943Variant2() (v Issue943Variant2, ok bool) {
	if !s.IsIssue943Variant2() {
		return v, false
	}
	return s.Issue943Variant2, true
}

// NewIssue943Variant2Issue943 returns new Issue943 from Issue943Variant2.
func NewIssue943Variant2Issue943(v Issue943Variant2) Issue943 {
	var s Issue943
	s.SetIssue943Variant2(v)
	return s
}

// SetIssue943Map sets Issue943 to Issue943Map.
func (s *Issue943) SetIssue943Map(v Issue943Map) {
	s.Type = Issue943MapIssue943
	s.Issue943Map = v
}

// GetIssue943Map returns Issue943Map and true boolean if Issue943 is Issue943Map.
func (s Issue943) GetIssue943Map() (v Issue943Map, ok bool) {
	if !s.IsIssue943Map() {
		return v, false
	}
	return s.Issue943Map, true
}

// NewIssue943MapIssue943 returns new Issue943 from Issue943Map.
func NewIssue943MapIssue943(v Issue943Map) Issue943 {
	var s Issue943
	s.SetIssue943Map(v)
	return s
}

// Ref: #/components/schemas/Issue943Map
type Issue943Map struct {
	// Pattern: "^variant3_[^\r\n\u2028\u2029]*".
	Pattern0Props Issue943MapPattern0
}

// GetPattern0Props returns the value of Pattern0Props.
func (s *Issue943Map) GetPattern0Props() Issue943MapPattern0 {
	return s.Pattern0Props
}

// SetPattern0Props sets the value of Pattern0Props.
func (s *Issue943Map) SetPattern0Props(val Issue943MapPattern0) {
	s.Pattern0Props = val
}

type Issue943MapPattern0 map[string]string

func (s *Issue943MapPattern0) init() Issue943MapPattern0 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Issue943Variant1
type Issue943Variant1 struct {
	Variant1Field int `json:"variant1_field"`
}

// GetVariant1Field returns the value of Variant1Field.
func (s *Issue943Variant1) GetVariant1Field() int {
	return s.Variant1Field
}

// SetVariant1Field sets the value of Variant1Field.
func (s *Issue943Variant1) SetVariant1Field(val int) {
	s.Variant1Field = val
}

// Ref: #/components/schemas/Issue943Variant2
type Issue943Variant2 struct {
	Variant2Field bool `json:"variant2_field"`
}

// GetVariant2Field returns the value of Variant2Field.
func (s *Issue943Variant2) GetVariant2Field() bool {
	return s.Variant2Field
}

// SetVariant2Field sets the value of Variant2Field.
func (s *Issue943Variant2) SetVariant2Field(val bool) {
	s.Variant2Field = val
}

// Ref: #/components/schemas/MapWithProperties
type MapWithProperties struct {
	Required        int                               `json:"required"`
	Optional        OptInt                            `json:"optional"`
	SubMap          OptStringMap                      `json:"sub_map"`
	InlinedSubMap   OptMapWithPropertiesInlinedSubMap `json:"inlined_sub_map"`
	MapValidation   OptValidationStringMap            `json:"map_validation"`
	AdditionalProps MapWithPropertiesAdditional
}

// GetRequired returns the value of Required.
func (s *MapWithProperties) GetRequired() int {
	return s.Required
}

// GetOptional returns the value of Optional.
func (s *MapWithProperties) GetOptional() OptInt {
	return s.Optional
}

// GetSubMap returns the value of SubMap.
func (s *MapWithProperties) GetSubMap() OptStringMap {
	return s.SubMap
}

// GetInlinedSubMap returns the value of InlinedSubMap.
func (s *MapWithProperties) GetInlinedSubMap() OptMapWithPropertiesInlinedSubMap {
	return s.InlinedSubMap
}

// GetMapValidation returns the value of MapValidation.
func (s *MapWithProperties) GetMapValidation() OptValidationStringMap {
	return s.MapValidation
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *MapWithProperties) GetAdditionalProps() MapWithPropertiesAdditional {
	return s.AdditionalProps
}

// SetRequired sets the value of Required.
func (s *MapWithProperties) SetRequired(val int) {
	s.Required = val
}

// SetOptional sets the value of Optional.
func (s *MapWithProperties) SetOptional(val OptInt) {
	s.Optional = val
}

// SetSubMap sets the value of SubMap.
func (s *MapWithProperties) SetSubMap(val OptStringMap) {
	s.SubMap = val
}

// SetInlinedSubMap sets the value of InlinedSubMap.
func (s *MapWithProperties) SetInlinedSubMap(val OptMapWithPropertiesInlinedSubMap) {
	s.InlinedSubMap = val
}

// SetMapValidation sets the value of MapValidation.
func (s *MapWithProperties) SetMapValidation(val OptValidationStringMap) {
	s.MapValidation = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *MapWithProperties) SetAdditionalProps(val MapWithPropertiesAdditional) {
	s.AdditionalProps = val
}

type MapWithPropertiesAdditional map[string]string

func (s *MapWithPropertiesAdditional) init() MapWithPropertiesAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type MapWithPropertiesInlinedSubMap map[string]string

func (s *MapWithPropertiesInlinedSubMap) init() MapWithPropertiesInlinedSubMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/MaxPropertiesTest
type MaxPropertiesTest struct {
	Required  int    `json:"required"`
	OptionalA OptInt `json:"optional_a"`
	OptionalB OptInt `json:"optional_b"`
	OptionalC OptInt `json:"optional_c"`
}

// GetRequired returns the value of Required.
func (s *MaxPropertiesTest) GetRequired() int {
	return s.Required
}

// GetOptionalA returns the value of OptionalA.
func (s *MaxPropertiesTest) GetOptionalA() OptInt {
	return s.OptionalA
}

// GetOptionalB returns the value of OptionalB.
func (s *MaxPropertiesTest) GetOptionalB() OptInt {
	return s.OptionalB
}

// GetOptionalC returns the value of OptionalC.
func (s *MaxPropertiesTest) GetOptionalC() OptInt {
	return s.OptionalC
}

// SetRequired sets the value of Required.
func (s *MaxPropertiesTest) SetRequired(val int) {
	s.Required = val
}

// SetOptionalA sets the value of OptionalA.
func (s *MaxPropertiesTest) SetOptionalA(val OptInt) {
	s.OptionalA = val
}

// SetOptionalB sets the value of OptionalB.
func (s *MaxPropertiesTest) SetOptionalB(val OptInt) {
	s.OptionalB = val
}

// SetOptionalC sets the value of OptionalC.
func (s *MaxPropertiesTest) SetOptionalC(val OptInt) {
	s.OptionalC = val
}

// Merged schema.
// Ref: #/components/schemas/MergeDiscriminatorOneOf
type MergeDiscriminatorOneOf struct {
	Common string `json:"common"`
	OneOf  MergeDiscriminatorOneOfSum
}

// GetCommon returns the value of Common.
func (s *MergeDiscriminatorOneOf) GetCommon() string {
	return s.Common
}

// GetOneOf returns the value of OneOf.
func (s *MergeDiscriminatorOneOf) GetOneOf() MergeDiscriminatorOneOfSum {
	return s.OneOf
}

// SetCommon sets the value of Common.
func (s *MergeDiscriminatorOneOf) SetCommon(val string) {
	s.Common = val
}

// SetOneOf sets the value of OneOf.
func (s *MergeDiscriminatorOneOf) SetOneOf(val MergeDiscriminatorOneOfSum) {
	s.OneOf = val
}

// MergeDiscriminatorOneOfSum represents sum type.
type MergeDiscriminatorOneOfSum struct {
	Type           MergeDiscriminatorOneOfSumType // switch on this field
	InlineOneOfFoo InlineOneOfFoo
	InlineOneOfBar InlineOneOfBar
}

// MergeDiscriminatorOneOfSumType is oneOf type of MergeDiscriminatorOneOfSum.
type MergeDiscriminatorOneOfSumType string

// Possible values for MergeDiscriminatorOneOfSumType.
const (
	InlineOneOfFooMergeDiscriminatorOneOfSum MergeDiscriminatorOneOfSumType = "foo"
	InlineOneOfBarMergeDiscriminatorOneOfSum MergeDiscriminatorOneOfSumType = "bar"
)

// IsInlineOneOfFoo reports whether MergeDiscriminatorOneOfSum is InlineOneOfFoo.
func (s MergeDiscriminatorOneOfSum) IsInlineOneOfFoo() bool {
	return s.Type == InlineOneOfFooMergeDiscriminatorOneOfSum
}

// IsInlineOneOfBar reports whether MergeDiscriminatorOneOfSum is InlineOneOfBar.
func (s MergeDiscriminatorOneOfSum) IsInlineOneOfBar() bool {
	return s.Type == InlineOneOfBarMergeDiscriminatorOneOfSum
}

// SetInlineOneOfFoo sets MergeDiscriminatorOneOfSum to InlineOneOfFoo.
func (s *MergeDiscriminatorOneOfSum) SetInlineOneOfFoo(v InlineOneOfFoo) {
	s.Type = InlineOneOfFooMergeDiscriminatorOneOfSum
	s.InlineOneOfFoo = v
}

// GetInlineOneOfFoo returns InlineOneOfFoo and true boolean if MergeDiscriminatorOneOfSum is InlineOneOfFoo.
func (s MergeDiscriminatorOneOfSum) GetInlineOneOfFoo() (v InlineOneOfFoo, ok bool) {
	if !s.IsInlineOneOfFoo() {
		return v, false
	}
	return s.InlineOneOfFoo, true
}

// NewInlineOneOfFooMergeDiscriminatorOneOfSum returns new MergeDiscriminatorOneOfSum from InlineOneOfFoo.
func NewInlineOneOfFooMergeDiscriminatorOneOfSum(v InlineOneOfFoo) MergeDiscriminatorOneOfSum {
	var s MergeDiscriminatorOneOfSum
	s.SetInlineOneOfFoo(v)
	return s
}

// SetInlineOneOfBar sets MergeDiscriminatorOneOfSum to InlineOneOfBar.
func (s *MergeDiscriminatorOneOfSum) SetInlineOneOfBar(v InlineOneOfBar) {
	s.Type = InlineOneOfBarMergeDiscriminatorOneOfSum
	s.InlineOneOfBar = v
}

// GetInlineOneOfBar returns InlineOneOfBar and true boolean if MergeDiscriminatorOneOfSum is InlineOneOfBar.
func (s MergeDiscriminatorOneOfSum) GetInlineOneOfBar() (v InlineOneOfBar, ok bool) {
	if !s.IsInlineOneOfBar() {
		return v, false
	}
	return s.InlineOneOfBar, true
}

// NewInlineOneOfBarMergeDiscriminatorOneOfSum returns new MergeDiscriminatorOneOfSum from InlineOneOfBar.
func NewInlineOneOfBarMergeDiscriminatorOneOfSum(v InlineOneOfBar) MergeDiscriminatorOneOfSum {
	var s MergeDiscriminatorOneOfSum
	s.SetInlineOneOfBar(v)
	return s
}

// Merged schema.
// Ref: #/components/schemas/MergeUniqueFieldsOneOf
type MergeUniqueFieldsOneOf struct {
	Common string `json:"common"`
	OneOf  MergeUniqueFieldsOneOfSum
}

// GetCommon returns the value of Common.
func (s *MergeUniqueFieldsOneOf) GetCommon() string {
	return s.Common
}

// GetOneOf returns the value of OneOf.
func (s *MergeUniqueFieldsOneOf) GetOneOf() MergeUniqueFieldsOneOfSum {
	return s.OneOf
}

// SetCommon sets the value of Common.
func (s *MergeUniqueFieldsOneOf) SetCommon(val string) {
	s.Common = val
}

// SetOneOf sets the value of OneOf.
func (s *MergeUniqueFieldsOneOf) SetOneOf(val MergeUniqueFieldsOneOfSum) {
	s.OneOf = val
}

// MergeUniqueFieldsOneOfSum represents sum type.
type MergeUniqueFieldsOneOfSum struct {
	Type           MergeUniqueFieldsOneOfSumType // switch on this field
	InlineOneOfFoo InlineOneOfFoo
	InlineOneOfBar InlineOneOfBar
}

// MergeUniqueFieldsOneOfSumType is oneOf type of MergeUniqueFieldsOneOfSum.
type MergeUniqueFieldsOneOfSumType string

// Possible values for MergeUniqueFieldsOneOfSumType.
const (
	InlineOneOfFooMergeUniqueFieldsOneOfSum MergeUniqueFieldsOneOfSumType = "InlineOneOfFoo"
	InlineOneOfBarMergeUniqueFieldsOneOfSum MergeUniqueFieldsOneOfSumType = "InlineOneOfBar"
)

// IsInlineOneOfFoo reports whether MergeUniqueFieldsOneOfSum is InlineOneOfFoo.
func (s MergeUniqueFieldsOneOfSum) IsInlineOneOfFoo() bool {
	return s.Type == InlineOneOfFooMergeUniqueFieldsOneOfSum
}

// IsInlineOneOfBar reports whether MergeUniqueFieldsOneOfSum is InlineOneOfBar.
func (s MergeUniqueFieldsOneOfSum) IsInlineOneOfBar() bool {
	return s.Type == InlineOneOfBarMergeUniqueFieldsOneOfSum
}

// SetInlineOneOfFoo sets MergeUniqueFieldsOneOfSum to InlineOneOfFoo.
func (s *MergeUniqueFieldsOneOfSum) SetInlineOneOfFoo(v InlineOneOfFoo) {
	s.Type = InlineOneOfFooMergeUniqueFieldsOneOfSum
	s.InlineOneOfFoo = v
}

// GetInlineOneOfFoo returns InlineOneOfFoo and true boolean if MergeUniqueFieldsOneOfSum is InlineOneOfFoo.
func (s MergeUniqueFieldsOneOfSum) GetInlineOneOfFoo() (v InlineOneOfFoo, ok bool) {
	if !s.IsInlineOneOfFoo() {
		return v, false
	}
	return s.InlineOneOfFoo, true
}

// NewInlineOneOfFooMergeUniqueFieldsOneOfSum returns new MergeUniqueFieldsOneOfSum from InlineOneOfFoo.
func NewInlineOneOfFooMergeUniqueFieldsOneOfSum(v InlineOneOfFoo) MergeUniqueFieldsOneOfSum {
	var s MergeUniqueFieldsOneOfSum
	s.SetInlineOneOfFoo(v)
	return s
}

// SetInlineOneOfBar sets MergeUniqueFieldsOneOfSum to InlineOneOfBar.
func (s *MergeUniqueFieldsOneOfSum) SetInlineOneOfBar(v InlineOneOfBar) {
	s.Type = InlineOneOfBarMergeUniqueFieldsOneOfSum
	s.InlineOneOfBar = v
}

// GetInlineOneOfBar returns InlineOneOfBar and true boolean if MergeUniqueFieldsOneOfSum is InlineOneOfBar.
func (s MergeUniqueFieldsOneOfSum) GetInlineOneOfBar() (v InlineOneOfBar, ok bool) {
	if !s.IsInlineOneOfBar() {
		return v, false
	}
	return s.InlineOneOfBar, true
}

// NewInlineOneOfBarMergeUniqueFieldsOneOfSum returns new MergeUniqueFieldsOneOfSum from InlineOneOfBar.
func NewInlineOneOfBarMergeUniqueFieldsOneOfSum(v InlineOneOfBar) MergeUniqueFieldsOneOfSum {
	var s MergeUniqueFieldsOneOfSum
	s.SetInlineOneOfBar(v)
	return s
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NilIntStatusCode wraps NilInt with StatusCode.
type NilIntStatusCode struct {
	StatusCode int
	Response   NilInt
}

// GetStatusCode returns the value of StatusCode.
func (s *NilIntStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *NilIntStatusCode) GetResponse() NilInt {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *NilIntStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *NilIntStatusCode) SetResponse(val NilInt) {
	s.Response = val
}

// NewNilNullableEnumsBoth returns new NilNullableEnumsBoth with value set to v.
func NewNilNullableEnumsBoth(v NullableEnumsBoth) NilNullableEnumsBoth {
	return NilNullableEnumsBoth{
		Value: v,
	}
}

// NilNullableEnumsBoth is nullable NullableEnumsBoth.
type NilNullableEnumsBoth struct {
	Value NullableEnumsBoth
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableEnumsBoth) SetTo(v NullableEnumsBoth) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableEnumsBoth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableEnumsBoth) SetToNull() {
	o.Null = true
	var v NullableEnumsBoth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableEnumsBoth) Get() (v NullableEnumsBoth, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableEnumsBoth) Or(d NullableEnumsBoth) NullableEnumsBoth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableEnumsOnlyNullValue returns new NilNullableEnumsOnlyNullValue with value set to v.
func NewNilNullableEnumsOnlyNullValue(v NullableEnumsOnlyNullValue) NilNullableEnumsOnlyNullValue {
	return NilNullableEnumsOnlyNullValue{
		Value: v,
	}
}

// NilNullableEnumsOnlyNullValue is nullable NullableEnumsOnlyNullValue.
type NilNullableEnumsOnlyNullValue struct {
	Value NullableEnumsOnlyNullValue
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableEnumsOnlyNullValue) SetTo(v NullableEnumsOnlyNullValue) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableEnumsOnlyNullValue) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableEnumsOnlyNullValue) SetToNull() {
	o.Null = true
	var v NullableEnumsOnlyNullValue
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableEnumsOnlyNullValue) Get() (v NullableEnumsOnlyNullValue, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableEnumsOnlyNullValue) Or(d NullableEnumsOnlyNullValue) NullableEnumsOnlyNullValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableEnumsOnlyNullable returns new NilNullableEnumsOnlyNullable with value set to v.
func NewNilNullableEnumsOnlyNullable(v NullableEnumsOnlyNullable) NilNullableEnumsOnlyNullable {
	return NilNullableEnumsOnlyNullable{
		Value: v,
	}
}

// NilNullableEnumsOnlyNullable is nullable NullableEnumsOnlyNullable.
type NilNullableEnumsOnlyNullable struct {
	Value NullableEnumsOnlyNullable
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableEnumsOnlyNullable) SetTo(v NullableEnumsOnlyNullable) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableEnumsOnlyNullable) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableEnumsOnlyNullable) SetToNull() {
	o.Null = true
	var v NullableEnumsOnlyNullable
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableEnumsOnlyNullable) Get() (v NullableEnumsOnlyNullable, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableEnumsOnlyNullable) Or(d NullableEnumsOnlyNullable) NullableEnumsOnlyNullable {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/NoAdditionalPropertiesTest
type NoAdditionalPropertiesTest struct {
	Empty         *OnlyEmptyObject            `json:"empty"`
	OneProperty   OptOnePropertyObject        `json:"oneProperty"`
	OnlyPatterned OptOnlyPatternedPropsObject `json:"onlyPatterned"`
}

// GetEmpty returns the value of Empty.
func (s *NoAdditionalPropertiesTest) GetEmpty() *OnlyEmptyObject {
	return s.Empty
}

// GetOneProperty returns the value of OneProperty.
func (s *NoAdditionalPropertiesTest) GetOneProperty() OptOnePropertyObject {
	return s.OneProperty
}

// GetOnlyPatterned returns the value of OnlyPatterned.
func (s *NoAdditionalPropertiesTest) GetOnlyPatterned() OptOnlyPatternedPropsObject {
	return s.OnlyPatterned
}

// SetEmpty sets the value of Empty.
func (s *NoAdditionalPropertiesTest) SetEmpty(val *OnlyEmptyObject) {
	s.Empty = val
}

// SetOneProperty sets the value of OneProperty.
func (s *NoAdditionalPropertiesTest) SetOneProperty(val OptOnePropertyObject) {
	s.OneProperty = val
}

// SetOnlyPatterned sets the value of OnlyPatterned.
func (s *NoAdditionalPropertiesTest) SetOnlyPatterned(val OptOnlyPatternedPropsObject) {
	s.OnlyPatterned = val
}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) foobarGetRes()           {}
func (*NotFound) foobarPostRes()          {}
func (*NotFound) petGetAvatarByIDRes()    {}
func (*NotFound) petGetAvatarByNameRes()  {}
func (*NotFound) petUploadAvatarByIDRes() {}

type NullValue struct{}

// Ref: #/components/schemas/NullableEnums
type NullableEnums struct {
	// Must not be nullable.
	OnlyNullable NilNullableEnumsOnlyNullable `json:"only_nullable"`
	// Must be nullable.
	OnlyNullValue NilNullableEnumsOnlyNullValue `json:"only_null_value"`
	// Must be nullable.
	Both NilNullableEnumsBoth `json:"both"`
}

// GetOnlyNullable returns the value of OnlyNullable.
func (s *NullableEnums) GetOnlyNullable() NilNullableEnumsOnlyNullable {
	return s.OnlyNullable
}

// GetOnlyNullValue returns the value of OnlyNullValue.
func (s *NullableEnums) GetOnlyNullValue() NilNullableEnumsOnlyNullValue {
	return s.OnlyNullValue
}

// GetBoth returns the value of Both.
func (s *NullableEnums) GetBoth() NilNullableEnumsBoth {
	return s.Both
}

// SetOnlyNullable sets the value of OnlyNullable.
func (s *NullableEnums) SetOnlyNullable(val NilNullableEnumsOnlyNullable) {
	s.OnlyNullable = val
}

// SetOnlyNullValue sets the value of OnlyNullValue.
func (s *NullableEnums) SetOnlyNullValue(val NilNullableEnumsOnlyNullValue) {
	s.OnlyNullValue = val
}

// SetBoth sets the value of Both.
func (s *NullableEnums) SetBoth(val NilNullableEnumsBoth) {
	s.Both = val
}

// Must be nullable.
type NullableEnumsBoth string

const (
	NullableEnumsBothAsc  NullableEnumsBoth = "asc"
	NullableEnumsBothDesc NullableEnumsBoth = "desc"
)

// AllValues returns all NullableEnumsBoth values.
func (NullableEnumsBoth) AllValues() []NullableEnumsBoth {
	return []NullableEnumsBoth{
		NullableEnumsBothAsc,
		NullableEnumsBothDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NullableEnumsBoth) MarshalText() ([]byte, error) {
	switch s {
	case NullableEnumsBothAsc:
		return []byte(s), nil
	case NullableEnumsBothDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NullableEnumsBoth) UnmarshalText(data []byte) error {
	switch NullableEnumsBoth(data) {
	case NullableEnumsBothAsc:
		*s = NullableEnumsBothAsc
		return nil
	case NullableEnumsBothDesc:
		*s = NullableEnumsBothDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Must be nullable.
type NullableEnumsOnlyNullValue string

const (
	NullableEnumsOnlyNullValueAsc  NullableEnumsOnlyNullValue = "asc"
	NullableEnumsOnlyNullValueDesc NullableEnumsOnlyNullValue = "desc"
)

// AllValues returns all NullableEnumsOnlyNullValue values.
func (NullableEnumsOnlyNullValue) AllValues() []NullableEnumsOnlyNullValue {
	return []NullableEnumsOnlyNullValue{
		NullableEnumsOnlyNullValueAsc,
		NullableEnumsOnlyNullValueDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NullableEnumsOnlyNullValue) MarshalText() ([]byte, error) {
	switch s {
	case NullableEnumsOnlyNullValueAsc:
		return []byte(s), nil
	case NullableEnumsOnlyNullValueDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NullableEnumsOnlyNullValue) UnmarshalText(data []byte) error {
	switch NullableEnumsOnlyNullValue(data) {
	case NullableEnumsOnlyNullValueAsc:
		*s = NullableEnumsOnlyNullValueAsc
		return nil
	case NullableEnumsOnlyNullValueDesc:
		*s = NullableEnumsOnlyNullValueDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Must not be nullable.
type NullableEnumsOnlyNullable string

const (
	NullableEnumsOnlyNullableAsc  NullableEnumsOnlyNullable = "asc"
	NullableEnumsOnlyNullableDesc NullableEnumsOnlyNullable = "desc"
)

// AllValues returns all NullableEnumsOnlyNullable values.
func (NullableEnumsOnlyNullable) AllValues() []NullableEnumsOnlyNullable {
	return []NullableEnumsOnlyNullable{
		NullableEnumsOnlyNullableAsc,
		NullableEnumsOnlyNullableDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NullableEnumsOnlyNullable) MarshalText() ([]byte, error) {
	switch s {
	case NullableEnumsOnlyNullableAsc:
		return []byte(s), nil
	case NullableEnumsOnlyNullableDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NullableEnumsOnlyNullable) UnmarshalText(data []byte) error {
	switch NullableEnumsOnlyNullable(data) {
	case NullableEnumsOnlyNullableAsc:
		*s = NullableEnumsOnlyNullableAsc
		return nil
	case NullableEnumsOnlyNullableDesc:
		*s = NullableEnumsOnlyNullableDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OneOfBooleanSumNullables
// OneOfBooleanSumNullables represents sum type.
type OneOfBooleanSumNullables struct {
	Type           OneOfBooleanSumNullablesType // switch on this field
	Bool           bool
	OneOfNullables OneOfNullables
}

// OneOfBooleanSumNullablesType is oneOf type of OneOfBooleanSumNullables.
type OneOfBooleanSumNullablesType string

// Possible values for OneOfBooleanSumNullablesType.
const (
	BoolOneOfBooleanSumNullables           OneOfBooleanSumNullablesType = "bool"
	OneOfNullablesOneOfBooleanSumNullables OneOfBooleanSumNullablesType = "OneOfNullables"
)

// IsBool reports whether OneOfBooleanSumNullables is bool.
func (s OneOfBooleanSumNullables) IsBool() bool { return s.Type == BoolOneOfBooleanSumNullables }

// IsOneOfNullables reports whether OneOfBooleanSumNullables is OneOfNullables.
func (s OneOfBooleanSumNullables) IsOneOfNullables() bool {
	return s.Type == OneOfNullablesOneOfBooleanSumNullables
}

// SetBool sets OneOfBooleanSumNullables to bool.
func (s *OneOfBooleanSumNullables) SetBool(v bool) {
	s.Type = BoolOneOfBooleanSumNullables
	s.Bool = v
}

// GetBool returns bool and true boolean if OneOfBooleanSumNullables is bool.
func (s OneOfBooleanSumNullables) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolOneOfBooleanSumNullables returns new OneOfBooleanSumNullables from bool.
func NewBoolOneOfBooleanSumNullables(v bool) OneOfBooleanSumNullables {
	var s OneOfBooleanSumNullables
	s.SetBool(v)
	return s
}

// SetOneOfNullables sets OneOfBooleanSumNullables to OneOfNullables.
func (s *OneOfBooleanSumNullables) SetOneOfNullables(v OneOfNullables) {
	s.Type = OneOfNullablesOneOfBooleanSumNullables
	s.OneOfNullables = v
}

// GetOneOfNullables returns OneOfNullables and true boolean if OneOfBooleanSumNullables is OneOfNullables.
func (s OneOfBooleanSumNullables) GetOneOfNullables() (v OneOfNullables, ok bool) {
	if !s.IsOneOfNullables() {
		return v, false
	}
	return s.OneOfNullables, true
}

// NewOneOfNullablesOneOfBooleanSumNullables returns new OneOfBooleanSumNullables from OneOfNullables.
func NewOneOfNullablesOneOfBooleanSumNullables(v OneOfNullables) OneOfBooleanSumNullables {
	var s OneOfBooleanSumNullables
	s.SetOneOfNullables(v)
	return s
}

func (*OneOfBooleanSumNullables) testNullableOneofsRes() {}

// Ref: #/components/schemas/OneOfBugs
type OneOfBugs struct {
	Issue143                        Issue143                    `json:"issue143"`
	AdditionalMinusFields           OneVariantHasNoUniqueFields `json:"additional-fields"`
	OneOfMinusUUIDMinusIntMinusEnum OptOneOfUUIDAndIntEnum      `json:"oneOf-uuid-int-enum"`
	OneOfMinusMappingMinusReference OptOneOfMappingReference    `json:"oneOf-mapping-reference"`
	Issue943                        OptIssue943                 `json:"issue943"`
}

// GetIssue143 returns the value of Issue143.
func (s *OneOfBugs) GetIssue143() Issue143 {
	return s.Issue143
}

// GetAdditionalMinusFields returns the value of AdditionalMinusFields.
func (s *OneOfBugs) GetAdditionalMinusFields() OneVariantHasNoUniqueFields {
	return s.AdditionalMinusFields
}

// GetOneOfMinusUUIDMinusIntMinusEnum returns the value of OneOfMinusUUIDMinusIntMinusEnum.
func (s *OneOfBugs) GetOneOfMinusUUIDMinusIntMinusEnum() OptOneOfUUIDAndIntEnum {
	return s.OneOfMinusUUIDMinusIntMinusEnum
}

// GetOneOfMinusMappingMinusReference returns the value of OneOfMinusMappingMinusReference.
func (s *OneOfBugs) GetOneOfMinusMappingMinusReference() OptOneOfMappingReference {
	return s.OneOfMinusMappingMinusReference
}

// GetIssue943 returns the value of Issue943.
func (s *OneOfBugs) GetIssue943() OptIssue943 {
	return s.Issue943
}

// SetIssue143 sets the value of Issue143.
func (s *OneOfBugs) SetIssue143(val Issue143) {
	s.Issue143 = val
}

// SetAdditionalMinusFields sets the value of AdditionalMinusFields.
func (s *OneOfBugs) SetAdditionalMinusFields(val OneVariantHasNoUniqueFields) {
	s.AdditionalMinusFields = val
}

// SetOneOfMinusUUIDMinusIntMinusEnum sets the value of OneOfMinusUUIDMinusIntMinusEnum.
func (s *OneOfBugs) SetOneOfMinusUUIDMinusIntMinusEnum(val OptOneOfUUIDAndIntEnum) {
	s.OneOfMinusUUIDMinusIntMinusEnum = val
}

// SetOneOfMinusMappingMinusReference sets the value of OneOfMinusMappingMinusReference.
func (s *OneOfBugs) SetOneOfMinusMappingMinusReference(val OptOneOfMappingReference) {
	s.OneOfMinusMappingMinusReference = val
}

// SetIssue943 sets the value of Issue943.
func (s *OneOfBugs) SetIssue943(val OptIssue943) {
	s.Issue943 = val
}

// Ref: #/components/schemas/OneOfMappingReference
// OneOfMappingReference represents sum type.
type OneOfMappingReference struct {
	Type                   OneOfMappingReferenceType // switch on this field
	OneOfMappingReferenceA OneOfMappingReferenceA
	OneOfMappingReferenceB OneOfMappingReferenceB
}

// OneOfMappingReferenceType is oneOf type of OneOfMappingReference.
type OneOfMappingReferenceType string

// Possible values for OneOfMappingReferenceType.
const (
	OneOfMappingReferenceAOneOfMappingReference OneOfMappingReferenceType = "simple"
	OneOfMappingReferenceBOneOfMappingReference OneOfMappingReferenceType = "extended"
)

// IsOneOfMappingReferenceA reports whether OneOfMappingReference is OneOfMappingReferenceA.
func (s OneOfMappingReference) IsOneOfMappingReferenceA() bool {
	return s.Type == OneOfMappingReferenceAOneOfMappingReference
}

// IsOneOfMappingReferenceB reports whether OneOfMappingReference is OneOfMappingReferenceB.
func (s OneOfMappingReference) IsOneOfMappingReferenceB() bool {
	return s.Type == OneOfMappingReferenceBOneOfMappingReference
}

// SetOneOfMappingReferenceA sets OneOfMappingReference to OneOfMappingReferenceA.
func (s *OneOfMappingReference) SetOneOfMappingReferenceA(v OneOfMappingReferenceA) {
	s.Type = OneOfMappingReferenceAOneOfMappingReference
	s.OneOfMappingReferenceA = v
}

// GetOneOfMappingReferenceA returns OneOfMappingReferenceA and true boolean if OneOfMappingReference is OneOfMappingReferenceA.
func (s OneOfMappingReference) GetOneOfMappingReferenceA() (v OneOfMappingReferenceA, ok bool) {
	if !s.IsOneOfMappingReferenceA() {
		return v, false
	}
	return s.OneOfMappingReferenceA, true
}

// NewOneOfMappingReferenceAOneOfMappingReference returns new OneOfMappingReference from OneOfMappingReferenceA.
func NewOneOfMappingReferenceAOneOfMappingReference(v OneOfMappingReferenceA) OneOfMappingReference {
	var s OneOfMappingReference
	s.SetOneOfMappingReferenceA(v)
	return s
}

// SetOneOfMappingReferenceB sets OneOfMappingReference to OneOfMappingReferenceB.
func (s *OneOfMappingReference) SetOneOfMappingReferenceB(v OneOfMappingReferenceB) {
	s.Type = OneOfMappingReferenceBOneOfMappingReference
	s.OneOfMappingReferenceB = v
}

// GetOneOfMappingReferenceB returns OneOfMappingReferenceB and true boolean if OneOfMappingReference is OneOfMappingReferenceB.
func (s OneOfMappingReference) GetOneOfMappingReferenceB() (v OneOfMappingReferenceB, ok bool) {
	if !s.IsOneOfMappingReferenceB() {
		return v, false
	}
	return s.OneOfMappingReferenceB, true
}

// NewOneOfMappingReferenceBOneOfMappingReference returns new OneOfMappingReference from OneOfMappingReferenceB.
func NewOneOfMappingReferenceBOneOfMappingReference(v OneOfMappingReferenceB) OneOfMappingReference {
	var s OneOfMappingReference
	s.SetOneOfMappingReferenceB(v)
	return s
}

// Ref: #/components/schemas/OneOfMappingReferenceA
type OneOfMappingReferenceA struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *OneOfMappingReferenceA) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *OneOfMappingReferenceA) SetDescription(val OptString) {
	s.Description = val
}

// Ref: #/components/schemas/OneOfMappingReferenceB
type OneOfMappingReferenceB struct {
	Code OptInt32                    `json:"code"`
	Data *OneOfMappingReferenceBData `json:"data"`
	Info OptString                   `json:"info"`
}

// GetCode returns the value of Code.
func (s *OneOfMappingReferenceB) GetCode() OptInt32 {
	return s.Code
}

// GetData returns the value of Data.
func (s *OneOfMappingReferenceB) GetData() *OneOfMappingReferenceBData {
	return s.Data
}

// GetInfo returns the value of Info.
func (s *OneOfMappingReferenceB) GetInfo() OptString {
	return s.Info
}

// SetCode sets the value of Code.
func (s *OneOfMappingReferenceB) SetCode(val OptInt32) {
	s.Code = val
}

// SetData sets the value of Data.
func (s *OneOfMappingReferenceB) SetData(val *OneOfMappingReferenceBData) {
	s.Data = val
}

// SetInfo sets the value of Info.
func (s *OneOfMappingReferenceB) SetInfo(val OptString) {
	s.Info = val
}

type OneOfMappingReferenceBData struct{}

// Ref: #/components/schemas/OneOfNullables
// OneOfNullables represents sum type.
type OneOfNullables struct {
	Type        OneOfNullablesType // switch on this field
	Null        struct{}
	String      string
	Int         int
	StringArray []string
}

// OneOfNullablesType is oneOf type of OneOfNullables.
type OneOfNullablesType string

// Possible values for OneOfNullablesType.
const (
	NullOneOfNullables        OneOfNullablesType = "struct{}"
	StringOneOfNullables      OneOfNullablesType = "string"
	IntOneOfNullables         OneOfNullablesType = "int"
	StringArrayOneOfNullables OneOfNullablesType = "[]string"
)

// IsNull reports whether OneOfNullables is struct{}.
func (s OneOfNullables) IsNull() bool { return s.Type == NullOneOfNullables }

// IsString reports whether OneOfNullables is string.
func (s OneOfNullables) IsString() bool { return s.Type == StringOneOfNullables }

// IsInt reports whether OneOfNullables is int.
func (s OneOfNullables) IsInt() bool { return s.Type == IntOneOfNullables }

// IsStringArray reports whether OneOfNullables is []string.
func (s OneOfNullables) IsStringArray() bool { return s.Type == StringArrayOneOfNullables }

// SetNull sets OneOfNullables to struct{}.
func (s *OneOfNullables) SetNull(v struct{}) {
	s.Type = NullOneOfNullables
	s.Null = v
}

// GetNull returns struct{} and true boolean if OneOfNullables is struct{}.
func (s OneOfNullables) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOneOfNullables returns new OneOfNullables from struct{}.
func NewNullOneOfNullables(v struct{}) OneOfNullables {
	var s OneOfNullables
	s.SetNull(v)
	return s
}

// SetString sets OneOfNullables to string.
func (s *OneOfNullables) SetString(v string) {
	s.Type = StringOneOfNullables
	s.String = v
}

// GetString returns string and true boolean if OneOfNullables is string.
func (s OneOfNullables) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringOneOfNullables returns new OneOfNullables from string.
func NewStringOneOfNullables(v string) OneOfNullables {
	var s OneOfNullables
	s.SetString(v)
	return s
}

// SetInt sets OneOfNullables to int.
func (s *OneOfNullables) SetInt(v int) {
	s.Type = IntOneOfNullables
	s.Int = v
}

// GetInt returns int and true boolean if OneOfNullables is int.
func (s OneOfNullables) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntOneOfNullables returns new OneOfNullables from int.
func NewIntOneOfNullables(v int) OneOfNullables {
	var s OneOfNullables
	s.SetInt(v)
	return s
}

// SetStringArray sets OneOfNullables to []string.
func (s *OneOfNullables) SetStringArray(v []string) {
	s.Type = StringArrayOneOfNullables
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if OneOfNullables is []string.
func (s OneOfNullables) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayOneOfNullables returns new OneOfNullables from []string.
func NewStringArrayOneOfNullables(v []string) OneOfNullables {
	var s OneOfNullables
	s.SetStringArray(v)
	return s
}

// Ref: #/components/schemas/OneOfUUIDAndIntEnum
// OneOfUUIDAndIntEnum represents sum type.
type OneOfUUIDAndIntEnum struct {
	Type                 OneOfUUIDAndIntEnumType // switch on this field
	UUID                 uuid.UUID
	OneOfUUIDAndIntEnum1 OneOfUUIDAndIntEnum1
}

// OneOfUUIDAndIntEnumType is oneOf type of OneOfUUIDAndIntEnum.
type OneOfUUIDAndIntEnumType string

// Possible values for OneOfUUIDAndIntEnumType.
const (
	UUIDOneOfUUIDAndIntEnum                 OneOfUUIDAndIntEnumType = "uuid.UUID"
	OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum OneOfUUIDAndIntEnumType = "OneOfUUIDAndIntEnum1"
)

// IsUUID reports whether OneOfUUIDAndIntEnum is uuid.UUID.
func (s OneOfUUIDAndIntEnum) IsUUID() bool { return s.Type == UUIDOneOfUUIDAndIntEnum }

// IsOneOfUUIDAndIntEnum1 reports whether OneOfUUIDAndIntEnum is OneOfUUIDAndIntEnum1.
func (s OneOfUUIDAndIntEnum) IsOneOfUUIDAndIntEnum1() bool {
	return s.Type == OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum
}

// SetUUID sets OneOfUUIDAndIntEnum to uuid.UUID.
func (s *OneOfUUIDAndIntEnum) SetUUID(v uuid.UUID) {
	s.Type = UUIDOneOfUUIDAndIntEnum
	s.UUID = v
}

// GetUUID returns uuid.UUID and true boolean if OneOfUUIDAndIntEnum is uuid.UUID.
func (s OneOfUUIDAndIntEnum) GetUUID() (v uuid.UUID, ok bool) {
	if !s.IsUUID() {
		return v, false
	}
	return s.UUID, true
}

// NewUUIDOneOfUUIDAndIntEnum returns new OneOfUUIDAndIntEnum from uuid.UUID.
func NewUUIDOneOfUUIDAndIntEnum(v uuid.UUID) OneOfUUIDAndIntEnum {
	var s OneOfUUIDAndIntEnum
	s.SetUUID(v)
	return s
}

// SetOneOfUUIDAndIntEnum1 sets OneOfUUIDAndIntEnum to OneOfUUIDAndIntEnum1.
func (s *OneOfUUIDAndIntEnum) SetOneOfUUIDAndIntEnum1(v OneOfUUIDAndIntEnum1) {
	s.Type = OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum
	s.OneOfUUIDAndIntEnum1 = v
}

// GetOneOfUUIDAndIntEnum1 returns OneOfUUIDAndIntEnum1 and true boolean if OneOfUUIDAndIntEnum is OneOfUUIDAndIntEnum1.
func (s OneOfUUIDAndIntEnum) GetOneOfUUIDAndIntEnum1() (v OneOfUUIDAndIntEnum1, ok bool) {
	if !s.IsOneOfUUIDAndIntEnum1() {
		return v, false
	}
	return s.OneOfUUIDAndIntEnum1, true
}

// NewOneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum returns new OneOfUUIDAndIntEnum from OneOfUUIDAndIntEnum1.
func NewOneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum(v OneOfUUIDAndIntEnum1) OneOfUUIDAndIntEnum {
	var s OneOfUUIDAndIntEnum
	s.SetOneOfUUIDAndIntEnum1(v)
	return s
}

type OneOfUUIDAndIntEnum1 int

const (
	OneOfUUIDAndIntEnum10 OneOfUUIDAndIntEnum1 = 0
	OneOfUUIDAndIntEnum11 OneOfUUIDAndIntEnum1 = 1
)

// AllValues returns all OneOfUUIDAndIntEnum1 values.
func (OneOfUUIDAndIntEnum1) AllValues() []OneOfUUIDAndIntEnum1 {
	return []OneOfUUIDAndIntEnum1{
		OneOfUUIDAndIntEnum10,
		OneOfUUIDAndIntEnum11,
	}
}

// Ref: #/components/schemas/OneOfWithNullable
// OneOfWithNullable represents sum type.
type OneOfWithNullable struct {
	Type        OneOfWithNullableType // switch on this field
	Null        struct{}
	String      string
	Int         int
	StringArray []string
}

// OneOfWithNullableType is oneOf type of OneOfWithNullable.
type OneOfWithNullableType string

// Possible values for OneOfWithNullableType.
const (
	NullOneOfWithNullable        OneOfWithNullableType = "struct{}"
	StringOneOfWithNullable      OneOfWithNullableType = "string"
	IntOneOfWithNullable         OneOfWithNullableType = "int"
	StringArrayOneOfWithNullable OneOfWithNullableType = "[]string"
)

// IsNull reports whether OneOfWithNullable is struct{}.
func (s OneOfWithNullable) IsNull() bool { return s.Type == NullOneOfWithNullable }

// IsString reports whether OneOfWithNullable is string.
func (s OneOfWithNullable) IsString() bool { return s.Type == StringOneOfWithNullable }

// IsInt reports whether OneOfWithNullable is int.
func (s OneOfWithNullable) IsInt() bool { return s.Type == IntOneOfWithNullable }

// IsStringArray reports whether OneOfWithNullable is []string.
func (s OneOfWithNullable) IsStringArray() bool { return s.Type == StringArrayOneOfWithNullable }

// SetNull sets OneOfWithNullable to struct{}.
func (s *OneOfWithNullable) SetNull(v struct{}) {
	s.Type = NullOneOfWithNullable
	s.Null = v
}

// GetNull returns struct{} and true boolean if OneOfWithNullable is struct{}.
func (s OneOfWithNullable) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOneOfWithNullable returns new OneOfWithNullable from struct{}.
func NewNullOneOfWithNullable(v struct{}) OneOfWithNullable {
	var s OneOfWithNullable
	s.SetNull(v)
	return s
}

// SetString sets OneOfWithNullable to string.
func (s *OneOfWithNullable) SetString(v string) {
	s.Type = StringOneOfWithNullable
	s.String = v
}

// GetString returns string and true boolean if OneOfWithNullable is string.
func (s OneOfWithNullable) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringOneOfWithNullable returns new OneOfWithNullable from string.
func NewStringOneOfWithNullable(v string) OneOfWithNullable {
	var s OneOfWithNullable
	s.SetString(v)
	return s
}

// SetInt sets OneOfWithNullable to int.
func (s *OneOfWithNullable) SetInt(v int) {
	s.Type = IntOneOfWithNullable
	s.Int = v
}

// GetInt returns int and true boolean if OneOfWithNullable is int.
func (s OneOfWithNullable) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntOneOfWithNullable returns new OneOfWithNullable from int.
func NewIntOneOfWithNullable(v int) OneOfWithNullable {
	var s OneOfWithNullable
	s.SetInt(v)
	return s
}

// SetStringArray sets OneOfWithNullable to []string.
func (s *OneOfWithNullable) SetStringArray(v []string) {
	s.Type = StringArrayOneOfWithNullable
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if OneOfWithNullable is []string.
func (s OneOfWithNullable) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayOneOfWithNullable returns new OneOfWithNullable from []string.
func NewStringArrayOneOfWithNullable(v []string) OneOfWithNullable {
	var s OneOfWithNullable
	s.SetStringArray(v)
	return s
}

// Ref: #/components/schemas/OnePropertyObject
type OnePropertyObject struct {
	Foo string `json:"foo"`
}

// GetFoo returns the value of Foo.
func (s *OnePropertyObject) GetFoo() string {
	return s.Foo
}

// SetFoo sets the value of Foo.
func (s *OnePropertyObject) SetFoo(val string) {
	s.Foo = val
}

// Ref: #/components/schemas/OneVariantHasNoUniqueFields
// OneVariantHasNoUniqueFields represents sum type.
type OneVariantHasNoUniqueFields struct {
	Type                         OneVariantHasNoUniqueFieldsType // switch on this field
	OneVariantHasNoUniqueFields0 OneVariantHasNoUniqueFields0
	OneVariantHasNoUniqueFields1 OneVariantHasNoUniqueFields1
}

// OneVariantHasNoUniqueFieldsType is oneOf type of OneVariantHasNoUniqueFields.
type OneVariantHasNoUniqueFieldsType string

// Possible values for OneVariantHasNoUniqueFieldsType.
const (
	OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields OneVariantHasNoUniqueFieldsType = "OneVariantHasNoUniqueFields0"
	OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields OneVariantHasNoUniqueFieldsType = "OneVariantHasNoUniqueFields1"
)

// IsOneVariantHasNoUniqueFields0 reports whether OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields0.
func (s OneVariantHasNoUniqueFields) IsOneVariantHasNoUniqueFields0() bool {
	return s.Type == OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields
}

// IsOneVariantHasNoUniqueFields1 reports whether OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields1.
func (s OneVariantHasNoUniqueFields) IsOneVariantHasNoUniqueFields1() bool {
	return s.Type == OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields
}

// SetOneVariantHasNoUniqueFields0 sets OneVariantHasNoUniqueFields to OneVariantHasNoUniqueFields0.
func (s *OneVariantHasNoUniqueFields) SetOneVariantHasNoUniqueFields0(v OneVariantHasNoUniqueFields0) {
	s.Type = OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields
	s.OneVariantHasNoUniqueFields0 = v
}

// GetOneVariantHasNoUniqueFields0 returns OneVariantHasNoUniqueFields0 and true boolean if OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields0.
func (s OneVariantHasNoUniqueFields) GetOneVariantHasNoUniqueFields0() (v OneVariantHasNoUniqueFields0, ok bool) {
	if !s.IsOneVariantHasNoUniqueFields0() {
		return v, false
	}
	return s.OneVariantHasNoUniqueFields0, true
}

// NewOneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields returns new OneVariantHasNoUniqueFields from OneVariantHasNoUniqueFields0.
func NewOneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields(v OneVariantHasNoUniqueFields0) OneVariantHasNoUniqueFields {
	var s OneVariantHasNoUniqueFields
	s.SetOneVariantHasNoUniqueFields0(v)
	return s
}

// SetOneVariantHasNoUniqueFields1 sets OneVariantHasNoUniqueFields to OneVariantHasNoUniqueFields1.
func (s *OneVariantHasNoUniqueFields) SetOneVariantHasNoUniqueFields1(v OneVariantHasNoUniqueFields1) {
	s.Type = OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields
	s.OneVariantHasNoUniqueFields1 = v
}

// GetOneVariantHasNoUniqueFields1 returns OneVariantHasNoUniqueFields1 and true boolean if OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields1.
func (s OneVariantHasNoUniqueFields) GetOneVariantHasNoUniqueFields1() (v OneVariantHasNoUniqueFields1, ok bool) {
	if !s.IsOneVariantHasNoUniqueFields1() {
		return v, false
	}
	return s.OneVariantHasNoUniqueFields1, true
}

// NewOneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields returns new OneVariantHasNoUniqueFields from OneVariantHasNoUniqueFields1.
func NewOneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields(v OneVariantHasNoUniqueFields1) OneVariantHasNoUniqueFields {
	var s OneVariantHasNoUniqueFields
	s.SetOneVariantHasNoUniqueFields1(v)
	return s
}

type OneVariantHasNoUniqueFields0 struct {
	A string `json:"a"`
	B OptInt `json:"b"`
	C string `json:"c"`
}

// GetA returns the value of A.
func (s *OneVariantHasNoUniqueFields0) GetA() string {
	return s.A
}

// GetB returns the value of B.
func (s *OneVariantHasNoUniqueFields0) GetB() OptInt {
	return s.B
}

// GetC returns the value of C.
func (s *OneVariantHasNoUniqueFields0) GetC() string {
	return s.C
}

// SetA sets the value of A.
func (s *OneVariantHasNoUniqueFields0) SetA(val string) {
	s.A = val
}

// SetB sets the value of B.
func (s *OneVariantHasNoUniqueFields0) SetB(val OptInt) {
	s.B = val
}

// SetC sets the value of C.
func (s *OneVariantHasNoUniqueFields0) SetC(val string) {
	s.C = val
}

type OneVariantHasNoUniqueFields1 struct {
	A string `json:"a"`
	B OptInt `json:"b"`
	C string `json:"c"`
	D OptInt `json:"d"`
}

// GetA returns the value of A.
func (s *OneVariantHasNoUniqueFields1) GetA() string {
	return s.A
}

// GetB returns the value of B.
func (s *OneVariantHasNoUniqueFields1) GetB() OptInt {
	return s.B
}

// GetC returns the value of C.
func (s *OneVariantHasNoUniqueFields1) GetC() string {
	return s.C
}

// GetD returns the value of D.
func (s *OneVariantHasNoUniqueFields1) GetD() OptInt {
	return s.D
}

// SetA sets the value of A.
func (s *OneVariantHasNoUniqueFields1) SetA(val string) {
	s.A = val
}

// SetB sets the value of B.
func (s *OneVariantHasNoUniqueFields1) SetB(val OptInt) {
	s.B = val
}

// SetC sets the value of C.
func (s *OneVariantHasNoUniqueFields1) SetC(val string) {
	s.C = val
}

// SetD sets the value of D.
func (s *OneVariantHasNoUniqueFields1) SetD(val OptInt) {
	s.D = val
}

// OneofBugOK is response for OneofBug operation.
type OneofBugOK struct{}

// Ref: #/components/schemas/OnlyEmptyObject
type OnlyEmptyObject struct{}

// Ref: #/components/schemas/OnlyPatternedPropsObject
type OnlyPatternedPropsObject map[string]string

func (s *OnlyPatternedPropsObject) init() OnlyPatternedPropsObject {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// NewOptAnyTest returns new OptAnyTest with value set to v.
func NewOptAnyTest(v AnyTest) OptAnyTest {
	return OptAnyTest{
		Value: v,
		Set:   true,
	}
}

// OptAnyTest is optional AnyTest.
type OptAnyTest struct {
	Value AnyTest
	Set   bool
}

// IsSet returns true if OptAnyTest was set.
func (o OptAnyTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnyTest) Reset() {
	var v AnyTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnyTest) SetTo(v AnyTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnyTest) Get() (v AnyTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnyTest) Or(d AnyTest) AnyTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnyTestAnyMap returns new OptAnyTestAnyMap with value set to v.
func NewOptAnyTestAnyMap(v AnyTestAnyMap) OptAnyTestAnyMap {
	return OptAnyTestAnyMap{
		Value: v,
		Set:   true,
	}
}

// OptAnyTestAnyMap is optional AnyTestAnyMap.
type OptAnyTestAnyMap struct {
	Value AnyTestAnyMap
	Set   bool
}

// IsSet returns true if OptAnyTestAnyMap was set.
func (o OptAnyTestAnyMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnyTestAnyMap) Reset() {
	var v AnyTestAnyMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnyTestAnyMap) SetTo(v AnyTestAnyMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnyTestAnyMap) Get() (v AnyTestAnyMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnyTestAnyMap) Or(d AnyTestAnyMap) AnyTestAnyMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptArrayTest returns new OptArrayTest with value set to v.
func NewOptArrayTest(v ArrayTest) OptArrayTest {
	return OptArrayTest{
		Value: v,
		Set:   true,
	}
}

// OptArrayTest is optional ArrayTest.
type OptArrayTest struct {
	Value ArrayTest
	Set   bool
}

// IsSet returns true if OptArrayTest was set.
func (o OptArrayTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptArrayTest) Reset() {
	var v ArrayTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptArrayTest) SetTo(v ArrayTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptArrayTest) Get() (v ArrayTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptArrayTest) Or(d ArrayTest) ArrayTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptData returns new OptData with value set to v.
func NewOptData(v Data) OptData {
	return OptData{
		Value: v,
		Set:   true,
	}
}

// OptData is optional Data.
type OptData struct {
	Value Data
	Set   bool
}

// IsSet returns true if OptData was set.
func (o OptData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptData) Reset() {
	var v Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptData) SetTo(v Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptData) Get() (v Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptData) Or(d Data) Data {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDefaultTestEnum returns new OptDefaultTestEnum with value set to v.
func NewOptDefaultTestEnum(v DefaultTestEnum) OptDefaultTestEnum {
	return OptDefaultTestEnum{
		Value: v,
		Set:   true,
	}
}

// OptDefaultTestEnum is optional DefaultTestEnum.
type OptDefaultTestEnum struct {
	Value DefaultTestEnum
	Set   bool
}

// IsSet returns true if OptDefaultTestEnum was set.
func (o OptDefaultTestEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDefaultTestEnum) Reset() {
	var v DefaultTestEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDefaultTestEnum) SetTo(v DefaultTestEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDefaultTestEnum) Get() (v DefaultTestEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDefaultTestEnum) Or(d DefaultTestEnum) DefaultTestEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIP returns new OptIP with value set to v.
func NewOptIP(v netip.Addr) OptIP {
	return OptIP{
		Value: v,
		Set:   true,
	}
}

// OptIP is optional netip.Addr.
type OptIP struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIP was set.
func (o OptIP) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIP) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIP) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIP) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIP) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPv4 returns new OptIPv4 with value set to v.
func NewOptIPv4(v netip.Addr) OptIPv4 {
	return OptIPv4{
		Value: v,
		Set:   true,
	}
}

// OptIPv4 is optional netip.Addr.
type OptIPv4 struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIPv4 was set.
func (o OptIPv4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPv4) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPv4) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPv4) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPv4) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPv6 returns new OptIPv6 with value set to v.
func NewOptIPv6(v netip.Addr) OptIPv6 {
	return OptIPv6{
		Value: v,
		Set:   true,
	}
}

// OptIPv6 is optional netip.Addr.
type OptIPv6 struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIPv6 was set.
func (o OptIPv6) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPv6) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPv6) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPv6) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPv6) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineDiscriminatorOneOf returns new OptInlineDiscriminatorOneOf with value set to v.
func NewOptInlineDiscriminatorOneOf(v InlineDiscriminatorOneOf) OptInlineDiscriminatorOneOf {
	return OptInlineDiscriminatorOneOf{
		Value: v,
		Set:   true,
	}
}

// OptInlineDiscriminatorOneOf is optional InlineDiscriminatorOneOf.
type OptInlineDiscriminatorOneOf struct {
	Value InlineDiscriminatorOneOf
	Set   bool
}

// IsSet returns true if OptInlineDiscriminatorOneOf was set.
func (o OptInlineDiscriminatorOneOf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineDiscriminatorOneOf) Reset() {
	var v InlineDiscriminatorOneOf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineDiscriminatorOneOf) SetTo(v InlineDiscriminatorOneOf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineDiscriminatorOneOf) Get() (v InlineDiscriminatorOneOf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineDiscriminatorOneOf) Or(d InlineDiscriminatorOneOf) InlineDiscriminatorOneOf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineUniqueFieldsOneOf returns new OptInlineUniqueFieldsOneOf with value set to v.
func NewOptInlineUniqueFieldsOneOf(v InlineUniqueFieldsOneOf) OptInlineUniqueFieldsOneOf {
	return OptInlineUniqueFieldsOneOf{
		Value: v,
		Set:   true,
	}
}

// OptInlineUniqueFieldsOneOf is optional InlineUniqueFieldsOneOf.
type OptInlineUniqueFieldsOneOf struct {
	Value InlineUniqueFieldsOneOf
	Set   bool
}

// IsSet returns true if OptInlineUniqueFieldsOneOf was set.
func (o OptInlineUniqueFieldsOneOf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineUniqueFieldsOneOf) Reset() {
	var v InlineUniqueFieldsOneOf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineUniqueFieldsOneOf) SetTo(v InlineUniqueFieldsOneOf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineUniqueFieldsOneOf) Get() (v InlineUniqueFieldsOneOf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineUniqueFieldsOneOf) Or(d InlineUniqueFieldsOneOf) InlineUniqueFieldsOneOf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssue943 returns new OptIssue943 with value set to v.
func NewOptIssue943(v Issue943) OptIssue943 {
	return OptIssue943{
		Value: v,
		Set:   true,
	}
}

// OptIssue943 is optional Issue943.
type OptIssue943 struct {
	Value Issue943
	Set   bool
}

// IsSet returns true if OptIssue943 was set.
func (o OptIssue943) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssue943) Reset() {
	var v Issue943
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssue943) SetTo(v Issue943) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssue943) Get() (v Issue943, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssue943) Or(d Issue943) Issue943 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapWithProperties returns new OptMapWithProperties with value set to v.
func NewOptMapWithProperties(v MapWithProperties) OptMapWithProperties {
	return OptMapWithProperties{
		Value: v,
		Set:   true,
	}
}

// OptMapWithProperties is optional MapWithProperties.
type OptMapWithProperties struct {
	Value MapWithProperties
	Set   bool
}

// IsSet returns true if OptMapWithProperties was set.
func (o OptMapWithProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapWithProperties) Reset() {
	var v MapWithProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapWithProperties) SetTo(v MapWithProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapWithProperties) Get() (v MapWithProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapWithProperties) Or(d MapWithProperties) MapWithProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapWithPropertiesInlinedSubMap returns new OptMapWithPropertiesInlinedSubMap with value set to v.
func NewOptMapWithPropertiesInlinedSubMap(v MapWithPropertiesInlinedSubMap) OptMapWithPropertiesInlinedSubMap {
	return OptMapWithPropertiesInlinedSubMap{
		Value: v,
		Set:   true,
	}
}

// OptMapWithPropertiesInlinedSubMap is optional MapWithPropertiesInlinedSubMap.
type OptMapWithPropertiesInlinedSubMap struct {
	Value MapWithPropertiesInlinedSubMap
	Set   bool
}

// IsSet returns true if OptMapWithPropertiesInlinedSubMap was set.
func (o OptMapWithPropertiesInlinedSubMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapWithPropertiesInlinedSubMap) Reset() {
	var v MapWithPropertiesInlinedSubMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapWithPropertiesInlinedSubMap) SetTo(v MapWithPropertiesInlinedSubMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapWithPropertiesInlinedSubMap) Get() (v MapWithPropertiesInlinedSubMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapWithPropertiesInlinedSubMap) Or(d MapWithPropertiesInlinedSubMap) MapWithPropertiesInlinedSubMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMaxPropertiesTest returns new OptMaxPropertiesTest with value set to v.
func NewOptMaxPropertiesTest(v MaxPropertiesTest) OptMaxPropertiesTest {
	return OptMaxPropertiesTest{
		Value: v,
		Set:   true,
	}
}

// OptMaxPropertiesTest is optional MaxPropertiesTest.
type OptMaxPropertiesTest struct {
	Value MaxPropertiesTest
	Set   bool
}

// IsSet returns true if OptMaxPropertiesTest was set.
func (o OptMaxPropertiesTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMaxPropertiesTest) Reset() {
	var v MaxPropertiesTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMaxPropertiesTest) SetTo(v MaxPropertiesTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMaxPropertiesTest) Get() (v MaxPropertiesTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMaxPropertiesTest) Or(d MaxPropertiesTest) MaxPropertiesTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMergeDiscriminatorOneOf returns new OptMergeDiscriminatorOneOf with value set to v.
func NewOptMergeDiscriminatorOneOf(v MergeDiscriminatorOneOf) OptMergeDiscriminatorOneOf {
	return OptMergeDiscriminatorOneOf{
		Value: v,
		Set:   true,
	}
}

// OptMergeDiscriminatorOneOf is optional MergeDiscriminatorOneOf.
type OptMergeDiscriminatorOneOf struct {
	Value MergeDiscriminatorOneOf
	Set   bool
}

// IsSet returns true if OptMergeDiscriminatorOneOf was set.
func (o OptMergeDiscriminatorOneOf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMergeDiscriminatorOneOf) Reset() {
	var v MergeDiscriminatorOneOf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMergeDiscriminatorOneOf) SetTo(v MergeDiscriminatorOneOf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMergeDiscriminatorOneOf) Get() (v MergeDiscriminatorOneOf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMergeDiscriminatorOneOf) Or(d MergeDiscriminatorOneOf) MergeDiscriminatorOneOf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMergeUniqueFieldsOneOf returns new OptMergeUniqueFieldsOneOf with value set to v.
func NewOptMergeUniqueFieldsOneOf(v MergeUniqueFieldsOneOf) OptMergeUniqueFieldsOneOf {
	return OptMergeUniqueFieldsOneOf{
		Value: v,
		Set:   true,
	}
}

// OptMergeUniqueFieldsOneOf is optional MergeUniqueFieldsOneOf.
type OptMergeUniqueFieldsOneOf struct {
	Value MergeUniqueFieldsOneOf
	Set   bool
}

// IsSet returns true if OptMergeUniqueFieldsOneOf was set.
func (o OptMergeUniqueFieldsOneOf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMergeUniqueFieldsOneOf) Reset() {
	var v MergeUniqueFieldsOneOf
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMergeUniqueFieldsOneOf) SetTo(v MergeUniqueFieldsOneOf) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMergeUniqueFieldsOneOf) Get() (v MergeUniqueFieldsOneOf, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMergeUniqueFieldsOneOf) Or(d MergeUniqueFieldsOneOf) MergeUniqueFieldsOneOf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullValue returns new OptNullValue with value set to v.
func NewOptNullValue(v NullValue) OptNullValue {
	return OptNullValue{
		Value: v,
		Set:   true,
	}
}

// OptNullValue is optional NullValue.
type OptNullValue struct {
	Value NullValue
	Set   bool
}

// IsSet returns true if OptNullValue was set.
func (o OptNullValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullValue) Reset() {
	var v NullValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullValue) SetTo(v NullValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullValue) Get() (v NullValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullValue) Or(d NullValue) NullValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableEnums returns new OptNullableEnums with value set to v.
func NewOptNullableEnums(v NullableEnums) OptNullableEnums {
	return OptNullableEnums{
		Value: v,
		Set:   true,
	}
}

// OptNullableEnums is optional NullableEnums.
type OptNullableEnums struct {
	Value NullableEnums
	Set   bool
}

// IsSet returns true if OptNullableEnums was set.
func (o OptNullableEnums) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableEnums) Reset() {
	var v NullableEnums
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableEnums) SetTo(v NullableEnums) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableEnums) Get() (v NullableEnums, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableEnums) Or(d NullableEnums) NullableEnums {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOneOfMappingReference returns new OptOneOfMappingReference with value set to v.
func NewOptOneOfMappingReference(v OneOfMappingReference) OptOneOfMappingReference {
	return OptOneOfMappingReference{
		Value: v,
		Set:   true,
	}
}

// OptOneOfMappingReference is optional OneOfMappingReference.
type OptOneOfMappingReference struct {
	Value OneOfMappingReference
	Set   bool
}

// IsSet returns true if OptOneOfMappingReference was set.
func (o OptOneOfMappingReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOneOfMappingReference) Reset() {
	var v OneOfMappingReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOneOfMappingReference) SetTo(v OneOfMappingReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOneOfMappingReference) Get() (v OneOfMappingReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOneOfMappingReference) Or(d OneOfMappingReference) OneOfMappingReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOneOfUUIDAndIntEnum returns new OptOneOfUUIDAndIntEnum with value set to v.
func NewOptOneOfUUIDAndIntEnum(v OneOfUUIDAndIntEnum) OptOneOfUUIDAndIntEnum {
	return OptOneOfUUIDAndIntEnum{
		Value: v,
		Set:   true,
	}
}

// OptOneOfUUIDAndIntEnum is optional OneOfUUIDAndIntEnum.
type OptOneOfUUIDAndIntEnum struct {
	Value OneOfUUIDAndIntEnum
	Set   bool
}

// IsSet returns true if OptOneOfUUIDAndIntEnum was set.
func (o OptOneOfUUIDAndIntEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOneOfUUIDAndIntEnum) Reset() {
	var v OneOfUUIDAndIntEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOneOfUUIDAndIntEnum) SetTo(v OneOfUUIDAndIntEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOneOfUUIDAndIntEnum) Get() (v OneOfUUIDAndIntEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOneOfUUIDAndIntEnum) Or(d OneOfUUIDAndIntEnum) OneOfUUIDAndIntEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOnePropertyObject returns new OptOnePropertyObject with value set to v.
func NewOptOnePropertyObject(v OnePropertyObject) OptOnePropertyObject {
	return OptOnePropertyObject{
		Value: v,
		Set:   true,
	}
}

// OptOnePropertyObject is optional OnePropertyObject.
type OptOnePropertyObject struct {
	Value OnePropertyObject
	Set   bool
}

// IsSet returns true if OptOnePropertyObject was set.
func (o OptOnePropertyObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOnePropertyObject) Reset() {
	var v OnePropertyObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOnePropertyObject) SetTo(v OnePropertyObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOnePropertyObject) Get() (v OnePropertyObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOnePropertyObject) Or(d OnePropertyObject) OnePropertyObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOnlyPatternedPropsObject returns new OptOnlyPatternedPropsObject with value set to v.
func NewOptOnlyPatternedPropsObject(v OnlyPatternedPropsObject) OptOnlyPatternedPropsObject {
	return OptOnlyPatternedPropsObject{
		Value: v,
		Set:   true,
	}
}

// OptOnlyPatternedPropsObject is optional OnlyPatternedPropsObject.
type OptOnlyPatternedPropsObject struct {
	Value OnlyPatternedPropsObject
	Set   bool
}

// IsSet returns true if OptOnlyPatternedPropsObject was set.
func (o OptOnlyPatternedPropsObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOnlyPatternedPropsObject) Reset() {
	var v OnlyPatternedPropsObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOnlyPatternedPropsObject) SetTo(v OnlyPatternedPropsObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOnlyPatternedPropsObject) Get() (v OnlyPatternedPropsObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOnlyPatternedPropsObject) Or(d OnlyPatternedPropsObject) OnlyPatternedPropsObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPet returns new OptPet with value set to v.
func NewOptPet(v Pet) OptPet {
	return OptPet{
		Value: v,
		Set:   true,
	}
}

// OptPet is optional Pet.
type OptPet struct {
	Value Pet
	Set   bool
}

// IsSet returns true if OptPet was set.
func (o OptPet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPet) Reset() {
	var v Pet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPet) SetTo(v Pet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPet) Get() (v Pet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPet) Or(d Pet) Pet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetName returns new OptPetName with value set to v.
func NewOptPetName(v PetName) OptPetName {
	return OptPetName{
		Value: v,
		Set:   true,
	}
}

// OptPetName is optional PetName.
type OptPetName struct {
	Value PetName
	Set   bool
}

// IsSet returns true if OptPetName was set.
func (o OptPetName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetName) Reset() {
	var v PetName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetName) SetTo(v PetName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetName) Get() (v PetName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetName) Or(d PetName) PetName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetType returns new OptPetType with value set to v.
func NewOptPetType(v PetType) OptPetType {
	return OptPetType{
		Value: v,
		Set:   true,
	}
}

// OptPetType is optional PetType.
type OptPetType struct {
	Value PetType
	Set   bool
}

// IsSet returns true if OptPetType was set.
func (o OptPetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetType) Reset() {
	var v PetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetType) SetTo(v PetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetType) Get() (v PetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetType) Or(d PetType) PetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringMap returns new OptStringMap with value set to v.
func NewOptStringMap(v StringMap) OptStringMap {
	return OptStringMap{
		Value: v,
		Set:   true,
	}
}

// OptStringMap is optional StringMap.
type OptStringMap struct {
	Value StringMap
	Set   bool
}

// IsSet returns true if OptStringMap was set.
func (o OptStringMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringMap) Reset() {
	var v StringMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringMap) SetTo(v StringMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringMap) Get() (v StringMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringMap) Or(d StringMap) StringMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringStringMap returns new OptStringStringMap with value set to v.
func NewOptStringStringMap(v StringStringMap) OptStringStringMap {
	return OptStringStringMap{
		Value: v,
		Set:   true,
	}
}

// OptStringStringMap is optional StringStringMap.
type OptStringStringMap struct {
	Value StringStringMap
	Set   bool
}

// IsSet returns true if OptStringStringMap was set.
func (o OptStringStringMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringStringMap) Reset() {
	var v StringStringMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringStringMap) SetTo(v StringStringMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringStringMap) Get() (v StringStringMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringStringMap) Or(d StringStringMap) StringStringMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationStringMap returns new OptValidationStringMap with value set to v.
func NewOptValidationStringMap(v ValidationStringMap) OptValidationStringMap {
	return OptValidationStringMap{
		Value: v,
		Set:   true,
	}
}

// OptValidationStringMap is optional ValidationStringMap.
type OptValidationStringMap struct {
	Value ValidationStringMap
	Set   bool
}

// IsSet returns true if OptValidationStringMap was set.
func (o OptValidationStringMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationStringMap) Reset() {
	var v ValidationStringMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationStringMap) SetTo(v ValidationStringMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationStringMap) Get() (v ValidationStringMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationStringMap) Or(d ValidationStringMap) ValidationStringMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PatternRecursiveMap
type PatternRecursiveMap map[string]PatternRecursiveMap

func (s *PatternRecursiveMap) init() PatternRecursiveMap {
	m := *s
	if m == nil {
		m = map[string]PatternRecursiveMap{}
		*s = m
	}
	return m
}

// Cute and lovely creature.
// Ref: #/components/schemas/Pet
type Pet struct {
	Primary           *Pet                 `json:"primary"`
	ID                int64                `json:"id"`
	UniqueID          uuid.UUID            `json:"unique_id"`
	Name              string               `json:"name"`
	Type              OptPetType           `json:"type"`
	Kind              PetKind              `json:"kind"`
	Tag               OptUUID              `json:"tag"`
	IP                netip.Addr           `json:"ip"`
	IPV4              netip.Addr           `json:"ip_v4"`
	IPV6              netip.Addr           `json:"ip_v6"`
	URI               url.URL              `json:"uri"`
	Birthday          time.Time            `json:"birthday"`
	Rate              time.Duration        `json:"rate"`
	Nickname          NilString            `json:"nickname"`
	NullStr           OptNilString         `json:"nullStr"`
	Friends           []Pet                `json:"friends"`
	Next              OptData              `json:"next"`
	TestInteger1      OptInt               `json:"testInteger1"`
	TestFloat1        OptFloat64           `json:"testFloat1"`
	TestArray1        [][]string           `json:"testArray1"`
	TestArray2        OptArrayTest         `json:"testArray2"`
	TestMap           OptStringStringMap   `json:"testMap"`
	TestMapWithProps  OptMapWithProperties `json:"testMapWithProps"`
	TestAny           OptAnyTest           `json:"testAny"`
	TestMaxProperties OptMaxPropertiesTest `json:"testMaxProperties"`
	TestDate          OptDate              `json:"testDate"`
	TestDuration      OptDuration          `json:"testDuration"`
	TestTime          OptTime              `json:"testTime"`
	TestDateTime      OptDateTime          `json:"testDateTime"`
	NullValue         OptNullValue         `json:"nullValue"`
	ExtraTags         OptString            `json:"extraTags" gorm:"index" valid:"customValidator"`
}

// GetPrimary returns the value of Primary.
func (s *Pet) GetPrimary() *Pet {
	return s.Primary
}

// GetID returns the value of ID.
func (s *Pet) GetID() int64 {
	return s.ID
}

// GetUniqueID returns the value of UniqueID.
func (s *Pet) GetUniqueID() uuid.UUID {
	return s.UniqueID
}

// GetName returns the value of Name.
func (s *Pet) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *Pet) GetType() OptPetType {
	return s.Type
}

// GetKind returns the value of Kind.
func (s *Pet) GetKind() PetKind {
	return s.Kind
}

// GetTag returns the value of Tag.
func (s *Pet) GetTag() OptUUID {
	return s.Tag
}

// GetIP returns the value of IP.
func (s *Pet) GetIP() netip.Addr {
	return s.IP
}

// GetIPV4 returns the value of IPV4.
func (s *Pet) GetIPV4() netip.Addr {
	return s.IPV4
}

// GetIPV6 returns the value of IPV6.
func (s *Pet) GetIPV6() netip.Addr {
	return s.IPV6
}

// GetURI returns the value of URI.
func (s *Pet) GetURI() url.URL {
	return s.URI
}

// GetBirthday returns the value of Birthday.
func (s *Pet) GetBirthday() time.Time {
	return s.Birthday
}

// GetRate returns the value of Rate.
func (s *Pet) GetRate() time.Duration {
	return s.Rate
}

// GetNickname returns the value of Nickname.
func (s *Pet) GetNickname() NilString {
	return s.Nickname
}

// GetNullStr returns the value of NullStr.
func (s *Pet) GetNullStr() OptNilString {
	return s.NullStr
}

// GetFriends returns the value of Friends.
func (s *Pet) GetFriends() []Pet {
	return s.Friends
}

// GetNext returns the value of Next.
func (s *Pet) GetNext() OptData {
	return s.Next
}

// GetTestInteger1 returns the value of TestInteger1.
func (s *Pet) GetTestInteger1() OptInt {
	return s.TestInteger1
}

// GetTestFloat1 returns the value of TestFloat1.
func (s *Pet) GetTestFloat1() OptFloat64 {
	return s.TestFloat1
}

// GetTestArray1 returns the value of TestArray1.
func (s *Pet) GetTestArray1() [][]string {
	return s.TestArray1
}

// GetTestArray2 returns the value of TestArray2.
func (s *Pet) GetTestArray2() OptArrayTest {
	return s.TestArray2
}

// GetTestMap returns the value of TestMap.
func (s *Pet) GetTestMap() OptStringStringMap {
	return s.TestMap
}

// GetTestMapWithProps returns the value of TestMapWithProps.
func (s *Pet) GetTestMapWithProps() OptMapWithProperties {
	return s.TestMapWithProps
}

// GetTestAny returns the value of TestAny.
func (s *Pet) GetTestAny() OptAnyTest {
	return s.TestAny
}

// GetTestMaxProperties returns the value of TestMaxProperties.
func (s *Pet) GetTestMaxProperties() OptMaxPropertiesTest {
	return s.TestMaxProperties
}

// GetTestDate returns the value of TestDate.
func (s *Pet) GetTestDate() OptDate {
	return s.TestDate
}

// GetTestDuration returns the value of TestDuration.
func (s *Pet) GetTestDuration() OptDuration {
	return s.TestDuration
}

// GetTestTime returns the value of TestTime.
func (s *Pet) GetTestTime() OptTime {
	return s.TestTime
}

// GetTestDateTime returns the value of TestDateTime.
func (s *Pet) GetTestDateTime() OptDateTime {
	return s.TestDateTime
}

// GetNullValue returns the value of NullValue.
func (s *Pet) GetNullValue() OptNullValue {
	return s.NullValue
}

// GetExtraTags returns the value of ExtraTags.
func (s *Pet) GetExtraTags() OptString {
	return s.ExtraTags
}

// SetPrimary sets the value of Primary.
func (s *Pet) SetPrimary(val *Pet) {
	s.Primary = val
}

// SetID sets the value of ID.
func (s *Pet) SetID(val int64) {
	s.ID = val
}

// SetUniqueID sets the value of UniqueID.
func (s *Pet) SetUniqueID(val uuid.UUID) {
	s.UniqueID = val
}

// SetName sets the value of Name.
func (s *Pet) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Pet) SetType(val OptPetType) {
	s.Type = val
}

// SetKind sets the value of Kind.
func (s *Pet) SetKind(val PetKind) {
	s.Kind = val
}

// SetTag sets the value of Tag.
func (s *Pet) SetTag(val OptUUID) {
	s.Tag = val
}

// SetIP sets the value of IP.
func (s *Pet) SetIP(val netip.Addr) {
	s.IP = val
}

// SetIPV4 sets the value of IPV4.
func (s *Pet) SetIPV4(val netip.Addr) {
	s.IPV4 = val
}

// SetIPV6 sets the value of IPV6.
func (s *Pet) SetIPV6(val netip.Addr) {
	s.IPV6 = val
}

// SetURI sets the value of URI.
func (s *Pet) SetURI(val url.URL) {
	s.URI = val
}

// SetBirthday sets the value of Birthday.
func (s *Pet) SetBirthday(val time.Time) {
	s.Birthday = val
}

// SetRate sets the value of Rate.
func (s *Pet) SetRate(val time.Duration) {
	s.Rate = val
}

// SetNickname sets the value of Nickname.
func (s *Pet) SetNickname(val NilString) {
	s.Nickname = val
}

// SetNullStr sets the value of NullStr.
func (s *Pet) SetNullStr(val OptNilString) {
	s.NullStr = val
}

// SetFriends sets the value of Friends.
func (s *Pet) SetFriends(val []Pet) {
	s.Friends = val
}

// SetNext sets the value of Next.
func (s *Pet) SetNext(val OptData) {
	s.Next = val
}

// SetTestInteger1 sets the value of TestInteger1.
func (s *Pet) SetTestInteger1(val OptInt) {
	s.TestInteger1 = val
}

// SetTestFloat1 sets the value of TestFloat1.
func (s *Pet) SetTestFloat1(val OptFloat64) {
	s.TestFloat1 = val
}

// SetTestArray1 sets the value of TestArray1.
func (s *Pet) SetTestArray1(val [][]string) {
	s.TestArray1 = val
}

// SetTestArray2 sets the value of TestArray2.
func (s *Pet) SetTestArray2(val OptArrayTest) {
	s.TestArray2 = val
}

// SetTestMap sets the value of TestMap.
func (s *Pet) SetTestMap(val OptStringStringMap) {
	s.TestMap = val
}

// SetTestMapWithProps sets the value of TestMapWithProps.
func (s *Pet) SetTestMapWithProps(val OptMapWithProperties) {
	s.TestMapWithProps = val
}

// SetTestAny sets the value of TestAny.
func (s *Pet) SetTestAny(val OptAnyTest) {
	s.TestAny = val
}

// SetTestMaxProperties sets the value of TestMaxProperties.
func (s *Pet) SetTestMaxProperties(val OptMaxPropertiesTest) {
	s.TestMaxProperties = val
}

// SetTestDate sets the value of TestDate.
func (s *Pet) SetTestDate(val OptDate) {
	s.TestDate = val
}

// SetTestDuration sets the value of TestDuration.
func (s *Pet) SetTestDuration(val OptDuration) {
	s.TestDuration = val
}

// SetTestTime sets the value of TestTime.
func (s *Pet) SetTestTime(val OptTime) {
	s.TestTime = val
}

// SetTestDateTime sets the value of TestDateTime.
func (s *Pet) SetTestDateTime(val OptDateTime) {
	s.TestDateTime = val
}

// SetNullValue sets the value of NullValue.
func (s *Pet) SetNullValue(val OptNullValue) {
	s.NullValue = val
}

// SetExtraTags sets the value of ExtraTags.
func (s *Pet) SetExtraTags(val OptString) {
	s.ExtraTags = val
}

func (*Pet) foobarGetRes()  {}
func (*Pet) foobarPostRes() {}
func (*Pet) petGetRes()     {}

type PetGetAvatarByIDOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PetGetAvatarByIDOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*PetGetAvatarByIDOK) petGetAvatarByIDRes() {}

type PetGetAvatarByNameOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PetGetAvatarByNameOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*PetGetAvatarByNameOK) petGetAvatarByNameRes() {}

type PetGetDef struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *PetGetDef) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *PetGetDef) SetMessage(val string) {
	s.Message = val
}

// PetGetDefStatusCode wraps PetGetDef with StatusCode.
type PetGetDefStatusCode struct {
	StatusCode int
	Response   PetGetDef
}

// GetStatusCode returns the value of StatusCode.
func (s *PetGetDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *PetGetDefStatusCode) GetResponse() PetGetDef {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *PetGetDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *PetGetDefStatusCode) SetResponse(val PetGetDef) {
	s.Response = val
}

func (*PetGetDefStatusCode) petGetRes() {}

type PetKind string

const (
	PetKindBig  PetKind = "big"
	PetKindSmol PetKind = "smol"
)

// AllValues returns all PetKind values.
func (PetKind) AllValues() []PetKind {
	return []PetKind{
		PetKindBig,
		PetKindSmol,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PetKind) MarshalText() ([]byte, error) {
	switch s {
	case PetKindBig:
		return []byte(s), nil
	case PetKindSmol:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetKind) UnmarshalText(data []byte) error {
	switch PetKind(data) {
	case PetKindBig:
		*s = PetKindBig
		return nil
	case PetKindSmol:
		*s = PetKindSmol
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetName string

type PetType string

const (
	PetTypeFifa PetType = "fifa"
	PetTypeFofa PetType = "fofa"
)

// AllValues returns all PetType values.
func (PetType) AllValues() []PetType {
	return []PetType{
		PetTypeFifa,
		PetTypeFofa,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PetType) MarshalText() ([]byte, error) {
	switch s {
	case PetTypeFifa:
		return []byte(s), nil
	case PetTypeFofa:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetType) UnmarshalText(data []byte) error {
	switch PetType(data) {
	case PetTypeFifa:
		*s = PetTypeFifa
		return nil
	case PetTypeFofa:
		*s = PetTypeFofa
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PetUpdateNameAliasPostDef is default response for PetUpdateNameAliasPost operation.
type PetUpdateNameAliasPostDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *PetUpdateNameAliasPostDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *PetUpdateNameAliasPostDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// PetUpdateNamePostDef is default response for PetUpdateNamePost operation.
type PetUpdateNamePostDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *PetUpdateNamePostDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *PetUpdateNamePostDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// PetUploadAvatarByIDOK is response for PetUploadAvatarByID operation.
type PetUploadAvatarByIDOK struct{}

func (*PetUploadAvatarByIDOK) petUploadAvatarByIDRes() {}

type PetUploadAvatarByIDReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PetUploadAvatarByIDReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type RecursiveArray []RecursiveArray

// Ref: #/components/schemas/RecursiveMap
type RecursiveMap struct {
	OptionalRecursiveField *RecursiveMap `json:"optional_recursive_field"`
	AdditionalProps        RecursiveMapAdditional
}

// GetOptionalRecursiveField returns the value of OptionalRecursiveField.
func (s *RecursiveMap) GetOptionalRecursiveField() *RecursiveMap {
	return s.OptionalRecursiveField
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *RecursiveMap) GetAdditionalProps() RecursiveMapAdditional {
	return s.AdditionalProps
}

// SetOptionalRecursiveField sets the value of OptionalRecursiveField.
func (s *RecursiveMap) SetOptionalRecursiveField(val *RecursiveMap) {
	s.OptionalRecursiveField = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *RecursiveMap) SetAdditionalProps(val RecursiveMapAdditional) {
	s.AdditionalProps = val
}

type RecursiveMapAdditional map[string]RecursiveMap

func (s *RecursiveMapAdditional) init() RecursiveMapAdditional {
	m := *s
	if m == nil {
		m = map[string]RecursiveMap{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StringIntMap
type StringIntMap struct {
	AdditionalProps StringIntMapAdditional
	// Pattern: "string_[^\r\n\u2028\u2029]*".
	Pattern0Props StringIntMapPattern0
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *StringIntMap) GetAdditionalProps() StringIntMapAdditional {
	return s.AdditionalProps
}

// GetPattern0Props returns the value of Pattern0Props.
func (s *StringIntMap) GetPattern0Props() StringIntMapPattern0 {
	return s.Pattern0Props
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *StringIntMap) SetAdditionalProps(val StringIntMapAdditional) {
	s.AdditionalProps = val
}

// SetPattern0Props sets the value of Pattern0Props.
func (s *StringIntMap) SetPattern0Props(val StringIntMapPattern0) {
	s.Pattern0Props = val
}

type StringIntMapAdditional map[string]int

func (s *StringIntMapAdditional) init() StringIntMapAdditional {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type StringIntMapPattern0 map[string]string

func (s *StringIntMapPattern0) init() StringIntMapPattern0 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StringMap
type StringMap map[string]string

func (s *StringMap) init() StringMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StringStringMap
type StringStringMap map[string]StringMap

func (s *StringStringMap) init() StringStringMap {
	m := *s
	if m == nil {
		m = map[string]StringMap{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/TestFloatValidation
type TestFloatValidation struct {
	Minmax     float64 `json:"minmax"`
	MultipleOf float64 `json:"multipleOf"`
}

// GetMinmax returns the value of Minmax.
func (s *TestFloatValidation) GetMinmax() float64 {
	return s.Minmax
}

// GetMultipleOf returns the value of MultipleOf.
func (s *TestFloatValidation) GetMultipleOf() float64 {
	return s.MultipleOf
}

// SetMinmax sets the value of Minmax.
func (s *TestFloatValidation) SetMinmax(val float64) {
	s.Minmax = val
}

// SetMultipleOf sets the value of MultipleOf.
func (s *TestFloatValidation) SetMultipleOf(val float64) {
	s.MultipleOf = val
}

// TestFloatValidationOK is response for TestFloatValidation operation.
type TestFloatValidationOK struct{}

// Ref: #/components/schemas/TestInlineOneOf
type TestInlineOneOf struct {
	InlineDiscriminator OptInlineDiscriminatorOneOf `json:"inline_discriminator"`
	MergeDiscriminator  OptMergeDiscriminatorOneOf  `json:"merge_discriminator"`
	InlineUniqueFields  OptInlineUniqueFieldsOneOf  `json:"inline_unique_fields"`
	MergeUniqueFields   OptMergeUniqueFieldsOneOf   `json:"merge_unique_fields"`
}

// GetInlineDiscriminator returns the value of InlineDiscriminator.
func (s *TestInlineOneOf) GetInlineDiscriminator() OptInlineDiscriminatorOneOf {
	return s.InlineDiscriminator
}

// GetMergeDiscriminator returns the value of MergeDiscriminator.
func (s *TestInlineOneOf) GetMergeDiscriminator() OptMergeDiscriminatorOneOf {
	return s.MergeDiscriminator
}

// GetInlineUniqueFields returns the value of InlineUniqueFields.
func (s *TestInlineOneOf) GetInlineUniqueFields() OptInlineUniqueFieldsOneOf {
	return s.InlineUniqueFields
}

// GetMergeUniqueFields returns the value of MergeUniqueFields.
func (s *TestInlineOneOf) GetMergeUniqueFields() OptMergeUniqueFieldsOneOf {
	return s.MergeUniqueFields
}

// SetInlineDiscriminator sets the value of InlineDiscriminator.
func (s *TestInlineOneOf) SetInlineDiscriminator(val OptInlineDiscriminatorOneOf) {
	s.InlineDiscriminator = val
}

// SetMergeDiscriminator sets the value of MergeDiscriminator.
func (s *TestInlineOneOf) SetMergeDiscriminator(val OptMergeDiscriminatorOneOf) {
	s.MergeDiscriminator = val
}

// SetInlineUniqueFields sets the value of InlineUniqueFields.
func (s *TestInlineOneOf) SetInlineUniqueFields(val OptInlineUniqueFieldsOneOf) {
	s.InlineUniqueFields = val
}

// SetMergeUniqueFields sets the value of MergeUniqueFields.
func (s *TestInlineOneOf) SetMergeUniqueFields(val OptMergeUniqueFieldsOneOf) {
	s.MergeUniqueFields = val
}

type TestNullableOneofsCreated OneOfWithNullable

func (*TestNullableOneofsCreated) testNullableOneofsRes() {}

type TestNullableOneofsOK OneOfWithNullable

func (*TestNullableOneofsOK) testNullableOneofsRes() {}

// Ref: #/components/schemas/TupleNamedTest
type TupleNamedTest struct {
	Integer int
	Boolean bool
	V2      string
	V3      [][]string
	V4      TupleNamedTestV4
}

// GetInteger returns the value of Integer.
func (s *TupleNamedTest) GetInteger() int {
	return s.Integer
}

// GetBoolean returns the value of Boolean.
func (s *TupleNamedTest) GetBoolean() bool {
	return s.Boolean
}

// GetV2 returns the value of V2.
func (s *TupleNamedTest) GetV2() string {
	return s.V2
}

// GetV3 returns the value of V3.
func (s *TupleNamedTest) GetV3() [][]string {
	return s.V3
}

// GetV4 returns the value of V4.
func (s *TupleNamedTest) GetV4() TupleNamedTestV4 {
	return s.V4
}

// SetInteger sets the value of Integer.
func (s *TupleNamedTest) SetInteger(val int) {
	s.Integer = val
}

// SetBoolean sets the value of Boolean.
func (s *TupleNamedTest) SetBoolean(val bool) {
	s.Boolean = val
}

// SetV2 sets the value of V2.
func (s *TupleNamedTest) SetV2(val string) {
	s.V2 = val
}

// SetV3 sets the value of V3.
func (s *TupleNamedTest) SetV3(val [][]string) {
	s.V3 = val
}

// SetV4 sets the value of V4.
func (s *TupleNamedTest) SetV4(val TupleNamedTestV4) {
	s.V4 = val
}

type TupleNamedTestV4 struct {
	Foo string    `json:"foo"`
	Bar OptString `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *TupleNamedTestV4) GetFoo() string {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *TupleNamedTestV4) GetBar() OptString {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *TupleNamedTestV4) SetFoo(val string) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *TupleNamedTestV4) SetBar(val OptString) {
	s.Bar = val
}

// Ref: #/components/schemas/TupleTest
type TupleTest struct {
	V0 int
	V1 bool
	V2 string
	V3 [][]string
	V4 TupleTestV4
}

// GetV0 returns the value of V0.
func (s *TupleTest) GetV0() int {
	return s.V0
}

// GetV1 returns the value of V1.
func (s *TupleTest) GetV1() bool {
	return s.V1
}

// GetV2 returns the value of V2.
func (s *TupleTest) GetV2() string {
	return s.V2
}

// GetV3 returns the value of V3.
func (s *TupleTest) GetV3() [][]string {
	return s.V3
}

// GetV4 returns the value of V4.
func (s *TupleTest) GetV4() TupleTestV4 {
	return s.V4
}

// SetV0 sets the value of V0.
func (s *TupleTest) SetV0(val int) {
	s.V0 = val
}

// SetV1 sets the value of V1.
func (s *TupleTest) SetV1(val bool) {
	s.V1 = val
}

// SetV2 sets the value of V2.
func (s *TupleTest) SetV2(val string) {
	s.V2 = val
}

// SetV3 sets the value of V3.
func (s *TupleTest) SetV3(val [][]string) {
	s.V3 = val
}

// SetV4 sets the value of V4.
func (s *TupleTest) SetV4(val TupleTestV4) {
	s.V4 = val
}

type TupleTestV4 struct {
	Foo string    `json:"foo"`
	Bar OptString `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *TupleTestV4) GetFoo() string {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *TupleTestV4) GetBar() OptString {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *TupleTestV4) SetFoo(val string) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *TupleTestV4) SetBar(val OptString) {
	s.Bar = val
}

// Ref: #/components/schemas/UniqueItemsTest
type UniqueItemsTest struct {
	RequiredUnique         []string          `json:"required_unique"`
	NullableOptionalUnique OptNilStringArray `json:"nullable_optional_unique"`
}

// GetRequiredUnique returns the value of RequiredUnique.
func (s *UniqueItemsTest) GetRequiredUnique() []string {
	return s.RequiredUnique
}

// GetNullableOptionalUnique returns the value of NullableOptionalUnique.
func (s *UniqueItemsTest) GetNullableOptionalUnique() OptNilStringArray {
	return s.NullableOptionalUnique
}

// SetRequiredUnique sets the value of RequiredUnique.
func (s *UniqueItemsTest) SetRequiredUnique(val []string) {
	s.RequiredUnique = val
}

// SetNullableOptionalUnique sets the value of NullableOptionalUnique.
func (s *UniqueItemsTest) SetNullableOptionalUnique(val OptNilStringArray) {
	s.NullableOptionalUnique = val
}

// Ref: #/components/schemas/ValidationStringMap
type ValidationStringMap map[string]string

func (s *ValidationStringMap) init() ValidationStringMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/_testdata/testtypes"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// OptionalParams is parameters of optional operation.
type OptionalParams struct {
	OgenString   OptStringOgen
	OgenNumber   OptNumberOgen
	JsonString   OptStringJSON
	JsonNumber   OptNumberJSON
	TextString   OptText
	TextNumber   OptText
	BinaryByte   OptBinary
	BinaryBase64 OptBinary
	String       OptString
	Number       OptNumber
	Alias        OptAlias
	Pointer      OptPointer
	AliasPointer OptAliasPointer
	Array        []testtypes.StringJSON
}

func unpackOptionalParams(packed middleware.Parameters) (params OptionalParams) {
	{
		key := middleware.ParameterKey{
			Name: "ogenString",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OgenString = v.(OptStringOgen)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "ogenNumber",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OgenNumber = v.(OptNumberOgen)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "jsonString",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.JsonString = v.(OptStringJSON)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "jsonNumber",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.JsonNumber = v.(OptNumberJSON)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "textString",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TextString = v.(OptText)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "textNumber",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TextNumber = v.(OptText)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "binaryByte",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BinaryByte = v.(OptBinary)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "binaryBase64",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BinaryBase64 = v.(OptBinary)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "string",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.String = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "number",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Number = v.(OptNumber)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "alias",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Alias = v.(OptAlias)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pointer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Pointer = v.(OptPointer)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "aliasPointer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AliasPointer = v.(OptAliasPointer)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "array",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Array = v.([]testtypes.StringJSON)
		}
	}
	return params
}

func decodeOptionalParams(args [0]string, argsEscaped bool, r *http.Request) (params OptionalParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: ogenString.
	{
		val, _ := json.DecodeNative[testtypes.StringOgen](jx.DecodeStr("\"10\""))
		params.OgenString.SetTo(val)
	}
	// Decode query: ogenString.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ogenString",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOgenStringVal testtypes.StringOgen
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToStringNative[testtypes.StringOgen](val)
					if err != nil {
						return err
					}

					paramsDotOgenStringVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OgenString.SetTo(paramsDotOgenStringVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ogenString",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: ogenNumber.
	{
		val, _ := json.DecodeNative[testtypes.NumberOgen](jx.DecodeStr("20"))
		params.OgenNumber.SetTo(val)
	}
	// Decode query: ogenNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ogenNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOgenNumberVal testtypes.NumberOgen
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToNative[testtypes.NumberOgen](val)
					if err != nil {
						return err
					}

					paramsDotOgenNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OgenNumber.SetTo(paramsDotOgenNumberVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ogenNumber",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: jsonString.
	{
		val, _ := json.DecodeJSON[testtypes.StringJSON](jx.DecodeStr("\"30\""))
		params.JsonString.SetTo(val)
	}
	// Decode query: jsonString.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "jsonString",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotJsonStringVal testtypes.StringJSON
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToStringJSON[testtypes.StringJSON](val)
					if err != nil {
						return err
					}

					paramsDotJsonStringVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.JsonString.SetTo(paramsDotJsonStringVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jsonString",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: jsonNumber.
	{
		val, _ := json.DecodeJSON[testtypes.NumberJSON](jx.DecodeStr("40"))
		params.JsonNumber.SetTo(val)
	}
	// Decode query: jsonNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "jsonNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotJsonNumberVal testtypes.NumberJSON
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToJSON[testtypes.NumberJSON](val)
					if err != nil {
						return err
					}

					paramsDotJsonNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.JsonNumber.SetTo(paramsDotJsonNumberVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jsonNumber",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: textString.
	{
		val, _ := json.DecodeStringText[testtypes.Text](jx.DecodeStr("\"50\""))
		params.TextString.SetTo(val)
	}
	// Decode query: textString.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "textString",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTextStringVal testtypes.Text
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToText[testtypes.Text](val)
					if err != nil {
						return err
					}

					paramsDotTextStringVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TextString.SetTo(paramsDotTextStringVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "textString",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: textNumber.
	{
		val, _ := json.DecodeText[testtypes.Text](jx.DecodeStr("60"))
		params.TextNumber.SetTo(val)
	}
	// Decode query: textNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "textNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTextNumberVal testtypes.Text
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToText[testtypes.Text](val)
					if err != nil {
						return err
					}

					paramsDotTextNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TextNumber.SetTo(paramsDotTextNumberVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "textNumber",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: binaryByte.
	{
		val, _ := json.DecodeBinary[testtypes.Binary](jx.DecodeStr("\"NzA=\""))
		params.BinaryByte.SetTo(val)
	}
	// Decode query: binaryByte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "binaryByte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBinaryByteVal testtypes.Binary
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBinary[testtypes.Binary](val)
					if err != nil {
						return err
					}

					paramsDotBinaryByteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BinaryByte.SetTo(paramsDotBinaryByteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "binaryByte",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: binaryBase64.
	{
		val, _ := json.DecodeBinary[testtypes.Binary](jx.DecodeStr("\"ODA=\""))
		params.BinaryBase64.SetTo(val)
	}
	// Decode query: binaryBase64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "binaryBase64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBinaryBase64Val testtypes.Binary
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBinary[testtypes.Binary](val)
					if err != nil {
						return err
					}

					paramsDotBinaryBase64Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.BinaryBase64.SetTo(paramsDotBinaryBase64Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "binaryBase64",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: string.
	{
		val, _ := json.DecodeExternal[testtypes.String](jx.DecodeStr("\"90\""))
		params.String.SetTo(val)
	}
	// Decode query: string.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStringVal testtypes.String
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToStringExternal[testtypes.String](val)
					if err != nil {
						return err
					}

					paramsDotStringVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.String.SetTo(paramsDotStringVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: number.
	{
		val, _ := json.DecodeExternal[testtypes.Number](jx.DecodeStr("100"))
		params.Number.SetTo(val)
	}
	// Decode query: number.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNumberVal testtypes.Number
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToExternal[testtypes.Number](val)
					if err != nil {
						return err
					}

					paramsDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Number.SetTo(paramsDotNumberVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: alias.
	{
		val, _ := json.DecodeNative[testtypes.StringOgen](jx.DecodeStr("\"110\""))
		params.Alias.SetTo(Alias(val))
	}
	// Decode query: alias.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "alias",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAliasVal Alias
				if err := func() error {
					var paramsDotAliasValVal testtypes.StringOgen
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringNative[testtypes.StringOgen](val)
						if err != nil {
							return err
						}

						paramsDotAliasValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAliasVal = Alias(paramsDotAliasValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Alias.SetTo(paramsDotAliasVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "alias",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pointer.
	{
		val, _ := json.DecodeNative[testtypes.NumberOgen](jx.DecodeStr("120"))
		params.Pointer.SetTo(val)
	}
	// Decode query: pointer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pointer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPointerVal testtypes.NumberOgen
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToNative[testtypes.NumberOgen](val)
					if err != nil {
						return err
					}

					paramsDotPointerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pointer.SetTo(paramsDotPointerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pointer",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: aliasPointer.
	{
		val, _ := json.DecodeNative[testtypes.StringOgen](jx.DecodeStr("\"130\""))
		params.AliasPointer.SetTo(AliasPointer(val))
	}
	// Decode query: aliasPointer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aliasPointer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAliasPointerVal AliasPointer
				if err := func() error {
					var paramsDotAliasPointerValVal testtypes.StringOgen
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringNative[testtypes.StringOgen](val)
						if err != nil {
							return err
						}

						paramsDotAliasPointerValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAliasPointerVal = AliasPointer(paramsDotAliasPointerValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.AliasPointer.SetTo(paramsDotAliasPointerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aliasPointer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotArrayVal testtypes.StringJSON
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringJSON[testtypes.StringJSON](val)
						if err != nil {
							return err
						}

						paramsDotArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Array = append(params.Array, paramsDotArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "array",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RequiredParams is parameters of required operation.
type RequiredParams struct {
	OgenString   testtypes.StringOgen
	OgenNumber   testtypes.NumberOgen
	JsonString   testtypes.StringJSON
	JsonNumber   testtypes.NumberJSON
	TextString   testtypes.Text
	TextNumber   testtypes.Text
	BinaryByte   testtypes.Binary
	BinaryBase64 testtypes.Binary
	String       testtypes.String
	Number       testtypes.Number
	Alias        Alias
	Pointer      testtypes.NumberOgen
	AliasPointer AliasPointer
	Array        []testtypes.StringJSON
}

func unpackRequiredParams(packed middleware.Parameters) (params RequiredParams) {
	{
		key := middleware.ParameterKey{
			Name: "ogenString",
			In:   "query",
		}
		params.OgenString = packed[key].(testtypes.StringOgen)
	}
	{
		key := middleware.ParameterKey{
			Name: "ogenNumber",
			In:   "query",
		}
		params.OgenNumber = packed[key].(testtypes.NumberOgen)
	}
	{
		key := middleware.ParameterKey{
			Name: "jsonString",
			In:   "query",
		}
		params.JsonString = packed[key].(testtypes.StringJSON)
	}
	{
		key := middleware.ParameterKey{
			Name: "jsonNumber",
			In:   "query",
		}
		params.JsonNumber = packed[key].(testtypes.NumberJSON)
	}
	{
		key := middleware.ParameterKey{
			Name: "textString",
			In:   "query",
		}
		params.TextString = packed[key].(testtypes.Text)
	}
	{
		key := middleware.ParameterKey{
			Name: "textNumber",
			In:   "query",
		}
		params.TextNumber = packed[key].(testtypes.Text)
	}
	{
		key := middleware.ParameterKey{
			Name: "binaryByte",
			In:   "query",
		}
		params.BinaryByte = packed[key].(testtypes.Binary)
	}
	{
		key := middleware.ParameterKey{
			Name: "binaryBase64",
			In:   "query",
		}
		params.BinaryBase64 = packed[key].(testtypes.Binary)
	}
	{
		key := middleware.ParameterKey{
			Name: "string",
			In:   "query",
		}
		params.String = packed[key].(testtypes.String)
	}
	{
		key := middleware.ParameterKey{
			Name: "number",
			In:   "query",
		}
		params.Number = packed[key].(testtypes.Number)
	}
	{
		key := middleware.ParameterKey{
			Name: "alias",
			In:   "query",
		}
		params.Alias = packed[key].(Alias)
	}
	{
		key := middleware.ParameterKey{
			Name: "pointer",
			In:   "query",
		}
		params.Pointer = packed[key].(testtypes.NumberOgen)
	}
	{
		key := middleware.ParameterKey{
			Name: "aliasPointer",
			In:   "query",
		}
		params.AliasPointer = packed[key].(AliasPointer)
	}
	{
		key := middleware.ParameterKey{
			Name: "array",
			In:   "query",
		}
		params.Array = packed[key].([]testtypes.StringJSON)
	}
	return params
}

func decodeRequiredParams(args [0]string, argsEscaped bool, r *http.Request) (params RequiredParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: ogenString.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ogenString",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringNative[testtypes.StringOgen](val)
				if err != nil {
					return err
				}

				params.OgenString = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ogenString",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: ogenNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ogenNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToNative[testtypes.NumberOgen](val)
				if err != nil {
					return err
				}

				params.OgenNumber = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ogenNumber",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: jsonString.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "jsonString",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringJSON[testtypes.StringJSON](val)
				if err != nil {
					return err
				}

				params.JsonString = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jsonString",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: jsonNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "jsonNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToJSON[testtypes.NumberJSON](val)
				if err != nil {
					return err
				}

				params.JsonNumber = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jsonNumber",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: textString.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "textString",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToText[testtypes.Text](val)
				if err != nil {
					return err
				}

				params.TextString = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "textString",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: textNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "textNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToText[testtypes.Text](val)
				if err != nil {
					return err
				}

				params.TextNumber = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "textNumber",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: binaryByte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "binaryByte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBinary[testtypes.Binary](val)
				if err != nil {
					return err
				}

				params.BinaryByte = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "binaryByte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: binaryBase64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "binaryBase64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBinary[testtypes.Binary](val)
				if err != nil {
					return err
				}

				params.BinaryBase64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "binaryBase64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringExternal[testtypes.String](val)
				if err != nil {
					return err
				}

				params.String = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToExternal[testtypes.Number](val)
				if err != nil {
					return err
				}

				params.Number = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: alias.
	{
		val, _ := json.DecodeNative[testtypes.StringOgen](jx.DecodeStr("\"110\""))
		params.Alias = Alias(val)
	}
	// Decode query: alias.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "alias",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAliasVal testtypes.StringOgen
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToStringNative[testtypes.StringOgen](val)
					if err != nil {
						return err
					}

					paramsDotAliasVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Alias = Alias(paramsDotAliasVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "alias",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pointer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pointer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToNative[testtypes.NumberOgen](val)
				if err != nil {
					return err
				}

				params.Pointer = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pointer",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: aliasPointer.
	{
		val, _ := json.DecodeNative[testtypes.StringOgen](jx.DecodeStr("\"130\""))
		params.AliasPointer = AliasPointer(val)
	}
	// Decode query: aliasPointer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aliasPointer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAliasPointerVal testtypes.StringOgen
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToStringNative[testtypes.StringOgen](val)
					if err != nil {
						return err
					}

					paramsDotAliasPointerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AliasPointer = AliasPointer(paramsDotAliasPointerVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aliasPointer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotArrayVal testtypes.StringJSON
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringJSON[testtypes.StringJSON](val)
						if err != nil {
							return err
						}

						paramsDotArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Array = append(params.Array, paramsDotArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "array",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	decimal0 "github.com/ogen-go/ogen/_testdata/types/bar/decimal"
	decimal "github.com/ogen-go/ogen/_testdata/types/foo/decimal"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// DefaultParams is parameters of default operation.
type DefaultParams struct {
	Foo OptDecimal
	Bar OptDecimal0Decimal
}

func unpackDefaultParams(packed middleware.Parameters) (params DefaultParams) {
	{
		key := middleware.ParameterKey{
			Name: "foo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Foo = v.(OptDecimal)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "bar",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Bar = v.(OptDecimal0Decimal)
		}
	}
	return params
}

func decodeDefaultParams(args [0]string, argsEscaped bool, r *http.Request) (params DefaultParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: foo.
	{
		var val decimal.Decimal
		_ = json.Unmarshal([]byte("1.23"), &val)
		params.Foo.SetTo(val)
	}
	// Decode query: foo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "foo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFooVal decimal.Decimal
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					var c decimal.Decimal
					err = json.Unmarshal([]byte(val), &c)
					if err != nil {
						return err
					}

					paramsDotFooVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Foo.SetTo(paramsDotFooVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "foo",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: bar.
	{
		var val decimal0.Decimal
		_ = json.Unmarshal([]byte("1.23"), &val)
		params.Bar.SetTo(val)
	}
	// Decode query: bar.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "bar",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBarVal decimal0.Decimal
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					var c decimal0.Decimal
					err = json.Unmarshal([]byte(val), &c)
					if err != nil {
						return err
					}

					paramsDotBarVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Bar.SetTo(paramsDotBarVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bar",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RequiredParams is parameters of required operation.
type RequiredParams struct {
	Foo decimal.Decimal
	Bar decimal0.Decimal
}

func unpackRequiredParams(packed middleware.Parameters) (params RequiredParams) {
	{
		key := middleware.ParameterKey{
			Name: "foo",
			In:   "query",
		}
		params.Foo = packed[key].(decimal.Decimal)
	}
	{
		key := middleware.ParameterKey{
			Name: "bar",
			In:   "query",
		}
		params.Bar = packed[key].(decimal0.Decimal)
	}
	return params
}

func decodeRequiredParams(args [0]string, argsEscaped bool, r *http.Request) (params RequiredParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: foo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "foo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				var c decimal.Decimal
				err = json.Unmarshal([]byte(val), &c)
				if err != nil {
					return err
				}

				params.Foo = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "foo",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: bar.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "bar",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				var c decimal0.Decimal
				err = json.Unmarshal([]byte(val), &c)
				if err != nil {
					return err
				}

				params.Bar = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bar",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/ogen-go/ogen/_testdata/testtypes"
)

type Alias testtypes.StringOgen

type AliasPointer testtypes.StringOgen

// NewOptAlias returns new OptAlias with value set to v.
func NewOptAlias(v Alias) OptAlias {
	return OptAlias{
		Value: v,
		Set:   true,
	}
}

// OptAlias is optional Alias.
type OptAlias struct {
	Value Alias
	Set   bool
}

// IsSet returns true if OptAlias was set.
func (o OptAlias) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlias) Reset() {
	var v Alias
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlias) SetTo(v Alias) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlias) Get() (v Alias, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlias) Or(d Alias) Alias {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAliasPointer returns new OptAliasPointer with value set to v.
func NewOptAliasPointer(v AliasPointer) OptAliasPointer {
	return OptAliasPointer{
		Value: v,
		Set:   true,
	}
}

// OptAliasPointer is optional AliasPointer.
type OptAliasPointer struct {
	Value AliasPointer
	Set   bool
}

// IsSet returns true if OptAliasPointer was set.
func (o OptAliasPointer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAliasPointer) Reset() {
	var v AliasPointer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAliasPointer) SetTo(v AliasPointer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAliasPointer) Get() (v AliasPointer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAliasPointer) Or(d AliasPointer) AliasPointer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAny returns new OptAny with value set to v.
func NewOptAny(v any) OptAny {
	return OptAny{
		Value: v,
		Set:   true,
	}
}

// OptAny is optional any.
type OptAny struct {
	Value any
	Set   bool
}

// IsSet returns true if OptAny was set.
func (o OptAny) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAny) Reset() {
	var v any
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAny) SetTo(v any) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAny) Get() (v any, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAny) Or(d any) any {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBinary returns new OptBinary with value set to v.
func NewOptBinary(v testtypes.Binary) OptBinary {
	return OptBinary{
		Value: v,
		Set:   true,
	}
}

// OptBinary is optional testtypes.Binary.
type OptBinary struct {
	Value testtypes.Binary
	Set   bool
}

// IsSet returns true if OptBinary was set.
func (o OptBinary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBinary) Reset() {
	var v testtypes.Binary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBinary) SetTo(v testtypes.Binary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBinary) Get() (v testtypes.Binary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBinary) Or(d testtypes.Binary) testtypes.Binary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumber returns new OptNumber with value set to v.
func NewOptNumber(v testtypes.Number) OptNumber {
	return OptNumber{
		Value: v,
		Set:   true,
	}
}

// OptNumber is optional testtypes.Number.
type OptNumber struct {
	Value testtypes.Number
	Set   bool
}

// IsSet returns true if OptNumber was set.
func (o OptNumber) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumber) Reset() {
	var v testtypes.Number
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumber) SetTo(v testtypes.Number) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumber) Get() (v testtypes.Number, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumber) Or(d testtypes.Number) testtypes.Number {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberJSON returns new OptNumberJSON with value set to v.
func NewOptNumberJSON(v testtypes.NumberJSON) OptNumberJSON {
	return OptNumberJSON{
		Value: v,
		Set:   true,
	}
}

// OptNumberJSON is optional testtypes.NumberJSON.
type OptNumberJSON struct {
	Value testtypes.NumberJSON
	Set   bool
}

// IsSet returns true if OptNumberJSON was set.
func (o OptNumberJSON) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberJSON) Reset() {
	var v testtypes.NumberJSON
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberJSON) SetTo(v testtypes.NumberJSON) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberJSON) Get() (v testtypes.NumberJSON, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberJSON) Or(d testtypes.NumberJSON) testtypes.NumberJSON {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberOgen returns new OptNumberOgen with value set to v.
func NewOptNumberOgen(v testtypes.NumberOgen) OptNumberOgen {
	return OptNumberOgen{
		Value: v,
		Set:   true,
	}
}

// OptNumberOgen is optional testtypes.NumberOgen.
type OptNumberOgen struct {
	Value testtypes.NumberOgen
	Set   bool
}

// IsSet returns true if OptNumberOgen was set.
func (o OptNumberOgen) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberOgen) Reset() {
	var v testtypes.NumberOgen
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberOgen) SetTo(v testtypes.NumberOgen) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberOgen) Get() (v testtypes.NumberOgen, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberOgen) Or(d testtypes.NumberOgen) testtypes.NumberOgen {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOptionalOKMap returns new OptOptionalOKMap with value set to v.
func NewOptOptionalOKMap(v OptionalOKMap) OptOptionalOKMap {
	return OptOptionalOKMap{
		Value: v,
		Set:   true,
	}
}

// OptOptionalOKMap is optional OptionalOKMap.
type OptOptionalOKMap struct {
	Value OptionalOKMap
	Set   bool
}

// IsSet returns true if OptOptionalOKMap was set.
func (o OptOptionalOKMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOptionalOKMap) Reset() {
	var v OptionalOKMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOptionalOKMap) SetTo(v OptionalOKMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOptionalOKMap) Get() (v OptionalOKMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOptionalOKMap) Or(d OptionalOKMap) OptionalOKMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPointer returns new OptPointer with value set to v.
func NewOptPointer(v testtypes.NumberOgen) OptPointer {
	return OptPointer{
		Value: v,
		Set:   true,
	}
}

// OptPointer is optional testtypes.NumberOgen.
type OptPointer struct {
	Value testtypes.NumberOgen
	Set   bool
}

// IsSet returns true if OptPointer was set.
func (o OptPointer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPointer) Reset() {
	var v testtypes.NumberOgen
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPointer) SetTo(v testtypes.NumberOgen) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPointer) Get() (v testtypes.NumberOgen, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPointer) Or(d testtypes.NumberOgen) testtypes.NumberOgen {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v testtypes.String) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional testtypes.String.
type OptString struct {
	Value testtypes.String
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v testtypes.String
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v testtypes.String) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v testtypes.String, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d testtypes.String) testtypes.String {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringJSON returns new OptStringJSON with value set to v.
func NewOptStringJSON(v testtypes.StringJSON) OptStringJSON {
	return OptStringJSON{
		Value: v,
		Set:   true,
	}
}

// OptStringJSON is optional testtypes.StringJSON.
type OptStringJSON struct {
	Value testtypes.StringJSON
	Set   bool
}

// IsSet returns true if OptStringJSON was set.
func (o OptStringJSON) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringJSON) Reset() {
	var v testtypes.StringJSON
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringJSON) SetTo(v testtypes.StringJSON) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringJSON) Get() (v testtypes.StringJSON, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringJSON) Or(d testtypes.StringJSON) testtypes.StringJSON {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringOgen returns new OptStringOgen with value set to v.
func NewOptStringOgen(v testtypes.StringOgen) OptStringOgen {
	return OptStringOgen{
		Value: v,
		Set:   true,
	}
}

// OptStringOgen is optional testtypes.StringOgen.
type OptStringOgen struct {
	Value testtypes.StringOgen
	Set   bool
}

// IsSet returns true if OptStringOgen was set.
func (o OptStringOgen) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringOgen) Reset() {
	var v testtypes.StringOgen
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringOgen) SetTo(v testtypes.StringOgen) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringOgen) Get() (v testtypes.StringOgen, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringOgen) Or(d testtypes.StringOgen) testtypes.StringOgen {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptText returns new OptText with value set to v.
func NewOptText(v testtypes.Text) OptText {
	return OptText{
		Value: v,
		Set:   true,
	}
}

// OptText is optional testtypes.Text.
type OptText struct {
	Value testtypes.Text
	Set   bool
}

// IsSet returns true if OptText was set.
func (o OptText) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptText) Reset() {
	var v testtypes.Text
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptText) SetTo(v testtypes.Text) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptText) Get() (v testtypes.Text, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptText) Or(d testtypes.Text) testtypes.Text {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OptionalOK struct {
	OgenString   OptStringOgen          `json:"ogenString"`
	OgenNumber   OptNumberOgen          `json:"ogenNumber"`
	JsonString   OptStringJSON          `json:"jsonString"`
	JsonNumber   OptNumberJSON          `json:"jsonNumber"`
	TextString   OptText                `json:"textString"`
	TextNumber   OptText                `json:"textNumber"`
	BinaryByte   OptBinary              `json:"binaryByte"`
	BinaryBase64 OptBinary              `json:"binaryBase64"`
	String       OptString              `json:"string"`
	Number       OptNumber              `json:"number"`
	Alias        OptAlias               `json:"alias"`
	Pointer      OptPointer             `json:"pointer"`
	AliasPointer OptAliasPointer        `json:"aliasPointer"`
	Builtin      OptAny                 `json:"builtin"`
	Array        []testtypes.StringJSON `json:"array"`
	Map          OptOptionalOKMap       `json:"map"`
}

// GetOgenString returns the value of OgenString.
func (s *OptionalOK) GetOgenString() OptStringOgen {
	return s.OgenString
}

// GetOgenNumber returns the value of OgenNumber.
func (s *OptionalOK) GetOgenNumber() OptNumberOgen {
	return s.OgenNumber
}

// GetJsonString returns the value of JsonString.
func (s *OptionalOK) GetJsonString() OptStringJSON {
	return s.JsonString
}

// GetJsonNumber returns the value of JsonNumber.
func (s *OptionalOK) GetJsonNumber() OptNumberJSON {
	return s.JsonNumber
}

// GetTextString returns the value of TextString.
func (s *OptionalOK) GetTextString() OptText {
	return s.TextString
}

// GetTextNumber returns the value of TextNumber.
func (s *OptionalOK) GetTextNumber() OptText {
	return s.TextNumber
}

// GetBinaryByte returns the value of BinaryByte.
func (s *OptionalOK) GetBinaryByte() OptBinary {
	return s.BinaryByte
}

// GetBinaryBase64 returns the value of BinaryBase64.
func (s *OptionalOK) GetBinaryBase64() OptBinary {
	return s.BinaryBase64
}

// GetString returns the value of String.
func (s *OptionalOK) GetString() OptString {
	return s.String
}

// GetNumber returns the value of Number.
func (s *OptionalOK) GetNumber() OptNumber {
	return s.Number
}

// GetAlias returns the value of Alias.
func (s *OptionalOK) GetAlias() OptAlias {
	return s.Alias
}

// GetPointer returns the value of Pointer.
func (s *OptionalOK) GetPointer() OptPointer {
	return s.Pointer
}

// GetAliasPointer returns the value of AliasPointer.
func (s *OptionalOK) GetAliasPointer() OptAliasPointer {
	return s.AliasPointer
}

// GetBuiltin returns the value of Builtin.
func (s *OptionalOK) GetBuiltin() OptAny {
	return s.Builtin
}

// GetArray returns the value of Array.
func (s *OptionalOK) GetArray() []testtypes.StringJSON {
	return s.Array
}

// GetMap returns the value of Map.
func (s *OptionalOK) GetMap() OptOptionalOKMap {
	return s.Map
}

// SetOgenString sets the value of OgenString.
func (s *OptionalOK) SetOgenString(val OptStringOgen) {
	s.OgenString = val
}

// SetOgenNumber sets the value of OgenNumber.
func (s *OptionalOK) SetOgenNumber(val OptNumberOgen) {
	s.OgenNumber = val
}

// SetJsonString sets the value of JsonString.
func (s *OptionalOK) SetJsonString(val OptStringJSON) {
	s.JsonString = val
}

// SetJsonNumber sets the value of JsonNumber.
func (s *OptionalOK) SetJsonNumber(val OptNumberJSON) {
	s.JsonNumber = val
}

// SetTextString sets the value of TextString.
func (s *OptionalOK) SetTextString(val OptText) {
	s.TextString = val
}

// SetTextNumber sets the value of TextNumber.
func (s *OptionalOK) SetTextNumber(val OptText) {
	s.TextNumber = val
}

// SetBinaryByte sets the value of BinaryByte.
func (s *OptionalOK) SetBinaryByte(val OptBinary) {
	s.BinaryByte = val
}

// SetBinaryBase64 sets the value of BinaryBase64.
func (s *OptionalOK) SetBinaryBase64(val OptBinary) {
	s.BinaryBase64 = val
}

// SetString sets the value of String.
func (s *OptionalOK) SetString(val OptString) {
	s.String = val
}

// SetNumber sets the value of Number.
func (s *OptionalOK) SetNumber(val OptNumber) {
	s.Number = val
}

// SetAlias sets the value of Alias.
func (s *OptionalOK) SetAlias(val OptAlias) {
	s.Alias = val
}

// SetPointer sets the value of Pointer.
func (s *OptionalOK) SetPointer(val OptPointer) {
	s.Pointer = val
}

// SetAliasPointer sets the value of AliasPointer.
func (s *OptionalOK) SetAliasPointer(val OptAliasPointer) {
	s.AliasPointer = val
}

// SetBuiltin sets the value of Builtin.
func (s *OptionalOK) SetBuiltin(val OptAny) {
	s.Builtin = val
}

// SetArray sets the value of Array.
func (s *OptionalOK) SetArray(val []testtypes.StringJSON) {
	s.Array = val
}

// SetMap sets the value of Map.
func (s *OptionalOK) SetMap(val OptOptionalOKMap) {
	s.Map = val
}

type OptionalOKMap map[string]testtypes.StringJSON

func (s *OptionalOKMap) init() OptionalOKMap {
	m := *s
	if m == nil {
		m = map[string]testtypes.StringJSON{}
		*s = m
	}
	return m
}

type RequiredOK struct {
	OgenString   testtypes.StringOgen   `json:"ogenString"`
	OgenNumber   testtypes.NumberOgen   `json:"ogenNumber"`
	JsonString   testtypes.StringJSON   `json:"jsonString"`
	JsonNumber   testtypes.NumberJSON   `json:"jsonNumber"`
	TextString   testtypes.Text         `json:"textString"`
	TextNumber   testtypes.Text         `json:"textNumber"`
	BinaryByte   testtypes.Binary       `json:"binaryByte"`
	BinaryBase64 testtypes.Binary       `json:"binaryBase64"`
	String       testtypes.String       `json:"string"`
	Number       testtypes.Number       `json:"number"`
	Alias        Alias                  `json:"alias"`
	Pointer      testtypes.NumberOgen   `json:"pointer"`
	AliasPointer AliasPointer           `json:"aliasPointer"`
	Builtin      any                    `json:"builtin"`
	Array        []testtypes.StringJSON `json:"array"`
	Map          RequiredOKMap          `json:"map"`
}

// GetOgenString returns the value of OgenString.
func (s *RequiredOK) GetOgenString() testtypes.StringOgen {
	return s.OgenString
}

// GetOgenNumber returns the value of OgenNumber.
func (s *RequiredOK) GetOgenNumber() testtypes.NumberOgen {
	return s.OgenNumber
}

// GetJsonString returns the value of JsonString.
func (s *RequiredOK) GetJsonString() testtypes.StringJSON {
	return s.JsonString
}

// GetJsonNumber returns the value of JsonNumber.
func (s *RequiredOK) GetJsonNumber() testtypes.NumberJSON {
	return s.JsonNumber
}

// GetTextString returns the value of TextString.
func (s *RequiredOK) GetTextString() testtypes.Text {
	return s.TextString
}

// GetTextNumber returns the value of TextNumber.
func (s *RequiredOK) GetTextNumber() testtypes.Text {
	return s.TextNumber
}

// GetBinaryByte returns the value of BinaryByte.
func (s *RequiredOK) GetBinaryByte() testtypes.Binary {
	return s.BinaryByte
}

// GetBinaryBase64 returns the value of BinaryBase64.
func (s *RequiredOK) GetBinaryBase64() testtypes.Binary {
	return s.BinaryBase64
}

// GetString returns the value of String.
func (s *RequiredOK) GetString() testtypes.String {
	return s.String
}

// GetNumber returns the value of Number.
func (s *RequiredOK) GetNumber() testtypes.Number {
	return s.Number
}

// GetAlias returns the value of Alias.
func (s *RequiredOK) GetAlias() Alias {
	return s.Alias
}

// GetPointer returns the value of Pointer.
func (s *RequiredOK) GetPointer() testtypes.NumberOgen {
	return s.Pointer
}

// GetAliasPointer returns the value of AliasPointer.
func (s *RequiredOK) GetAliasPointer() AliasPointer {
	return s.AliasPointer
}

// GetBuiltin returns the value of Builtin.
func (s *RequiredOK) GetBuiltin() any {
	return s.Builtin
}

// GetArray returns the value of Array.
func (s *RequiredOK) GetArray() []testtypes.StringJSON {
	return s.Array
}

// GetMap returns the value of Map.
func (s *RequiredOK) GetMap() RequiredOKMap {
	return s.Map
}

// SetOgenString sets the value of OgenString.
func (s *RequiredOK) SetOgenString(val testtypes.StringOgen) {
	s.OgenString = val
}

// SetOgenNumber sets the value of OgenNumber.
func (s *RequiredOK) SetOgenNumber(val testtypes.NumberOgen) {
	s.OgenNumber = val
}

// SetJsonString sets the value of JsonString.
func (s *RequiredOK) SetJsonString(val testtypes.StringJSON) {
	s.JsonString = val
}

// SetJsonNumber sets the value of JsonNumber.
func (s *RequiredOK) SetJsonNumber(val testtypes.NumberJSON) {
	s.JsonNumber = val
}

// SetTextString sets the value of TextString.
func (s *RequiredOK) SetTextString(val testtypes.Text) {
	s.TextString = val
}

// SetTextNumber sets the value of TextNumber.
func (s *RequiredOK) SetTextNumber(val testtypes.Text) {
	s.TextNumber = val
}

// SetBinaryByte sets the value of BinaryByte.
func (s *RequiredOK) SetBinaryByte(val testtypes.Binary) {
	s.BinaryByte = val
}

// SetBinaryBase64 sets the value of BinaryBase64.
func (s *RequiredOK) SetBinaryBase64(val testtypes.Binary) {
	s.BinaryBase64 = val
}

// SetString sets the value of String.
func (s *RequiredOK) SetString(val testtypes.String) {
	s.String = val
}

// SetNumber sets the value of Number.
func (s *RequiredOK) SetNumber(val testtypes.Number) {
	s.Number = val
}

// SetAlias sets the value of Alias.
func (s *RequiredOK) SetAlias(val Alias) {
	s.Alias = val
}

// SetPointer sets the value of Pointer.
func (s *RequiredOK) SetPointer(val testtypes.NumberOgen) {
	s.Pointer = val
}

// SetAliasPointer sets the value of AliasPointer.
func (s *RequiredOK) SetAliasPointer(val AliasPointer) {
	s.AliasPointer = val
}

// SetBuiltin sets the value of Builtin.
func (s *RequiredOK) SetBuiltin(val any) {
	s.Builtin = val
}

// SetArray sets the value of Array.
func (s *RequiredOK) SetArray(val []testtypes.StringJSON) {
	s.Array = val
}

// SetMap sets the value of Map.
func (s *RequiredOK) SetMap(val RequiredOKMap) {
	s.Map = val
}

type RequiredOKMap map[string]testtypes.StringJSON

func (s *RequiredOKMap) init() RequiredOKMap {
	m := *s
	if m == nil {
		m = map[string]testtypes.StringJSON{}
		*s = m
	}
	return m
}

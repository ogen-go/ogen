// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		NullableStrings: ogenreflect.RuntimeOperation{
			Name: "NullableStrings",
			ID:   "nullableStrings",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(NilString)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(NullableStringsOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ObjectsWithConflictingArrayProperty: ogenreflect.RuntimeOperation{
			Name: "ObjectsWithConflictingArrayProperty",
			ID:   "objectsWithConflictingArrayProperty",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ObjectsWithConflictingArrayPropertyReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ObjectsWithConflictingArrayPropertyOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ObjectsWithConflictingProperties: ogenreflect.RuntimeOperation{
			Name: "ObjectsWithConflictingProperties",
			ID:   "objectsWithConflictingProperties",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ObjectsWithConflictingPropertiesReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ObjectsWithConflictingPropertiesOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReferencedAllof: ogenreflect.RuntimeOperation{
			Name: "ReferencedAllof",
			ID:   "referencedAllof",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type: reflect.TypeOf(new(ReferencedAllofReq)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReferencedAllofApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ReferencedAllofMultipartFormData)).Elem(),
					},
					Contents: ogenreflect.Contents{
						"application/json":    reflect.TypeOf(new(ReferencedAllofApplicationJSON)).Elem(),
						"multipart/form-data": reflect.TypeOf(new(ReferencedAllofMultipartFormData)).Elem(),
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReferencedAllofOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReferencedAllofOptional: ogenreflect.RuntimeOperation{
			Name: "ReferencedAllofOptional",
			ID:   "referencedAllofOptional",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type: reflect.TypeOf(new(ReferencedAllofOptionalReq)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReferencedAllofOptionalReqEmptyBody)).Elem(),
						reflect.TypeOf(new(*ReferencedAllofOptionalApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ReferencedAllofOptionalMultipartFormData)).Elem(),
					},
					Contents: ogenreflect.Contents{
						"application/json":    reflect.TypeOf(new(ReferencedAllofOptionalApplicationJSON)).Elem(),
						"multipart/form-data": reflect.TypeOf(new(ReferencedAllofOptionalMultipartFormData)).Elem(),
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReferencedAllofOptionalOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		SimpleInteger: ogenreflect.RuntimeOperation{
			Name: "SimpleInteger",
			ID:   "simpleInteger",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(int)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(SimpleIntegerOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		SimpleObjects: ogenreflect.RuntimeOperation{
			Name: "SimpleObjects",
			ID:   "simpleObjects",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SimpleObjectsReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(SimpleObjectsOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	NullableStrings                     ogenreflect.RuntimeOperation
	ObjectsWithConflictingArrayProperty ogenreflect.RuntimeOperation
	ObjectsWithConflictingProperties    ogenreflect.RuntimeOperation
	ReferencedAllof                     ogenreflect.RuntimeOperation
	ReferencedAllofOptional             ogenreflect.RuntimeOperation
	SimpleInteger                       ogenreflect.RuntimeOperation
	SimpleObjects                       ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "NullableStrings":
		return p.NullableStrings, true
	case "ObjectsWithConflictingArrayProperty":
		return p.ObjectsWithConflictingArrayProperty, true
	case "ObjectsWithConflictingProperties":
		return p.ObjectsWithConflictingProperties, true
	case "ReferencedAllof":
		return p.ReferencedAllof, true
	case "ReferencedAllofOptional":
		return p.ReferencedAllofOptional, true
	case "SimpleInteger":
		return p.SimpleInteger, true
	case "SimpleObjects":
		return p.SimpleObjects, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "nullableStrings":
		return p.NullableStrings, true
	case "objectsWithConflictingArrayProperty":
		return p.ObjectsWithConflictingArrayProperty, true
	case "objectsWithConflictingProperties":
		return p.ObjectsWithConflictingProperties, true
	case "referencedAllof":
		return p.ReferencedAllof, true
	case "referencedAllofOptional":
		return p.ReferencedAllofOptional, true
	case "simpleInteger":
		return p.SimpleInteger, true
	case "simpleObjects":
		return p.SimpleObjects, true
	default:
		return op, false
	}
}

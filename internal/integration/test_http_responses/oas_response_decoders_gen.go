// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeAnyContentTypeBinaryStringSchemaResponse(resp *http.Response) (res *AnyContentTypeBinaryStringSchemaOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("*/*", ct):
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := AnyContentTypeBinaryStringSchemaOK{Data: bytes.NewReader(b)}
			var wrapper AnyContentTypeBinaryStringSchemaOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Content-Type" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							wrapper.ContentType = c
							return nil
						}); err != nil {
							return err
						}
					} else {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Type header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeAnyContentTypeBinaryStringSchemaDefaultResponse(resp *http.Response) (res *AnyContentTypeBinaryStringSchemaDefaultDefStatusCodeWithHeaders, _ error) {
	// Default response.
	res, err := func() (res *AnyContentTypeBinaryStringSchemaDefaultDefStatusCodeWithHeaders, err error) {
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("*/*", ct):
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := AnyContentTypeBinaryStringSchemaDefaultDef{Data: bytes.NewReader(b)}
			var wrapper AnyContentTypeBinaryStringSchemaDefaultDefStatusCodeWithHeaders
			wrapper.Response = response
			wrapper.StatusCode = resp.StatusCode
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Content-Type" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							wrapper.ContentType = c
							return nil
						}); err != nil {
							return err
						}
					} else {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Type header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}()
	if err != nil {
		return res, errors.Wrapf(err, "default (code %d)", resp.StatusCode)
	}
	return res, nil
}

func decodeCombinedResponse(resp *http.Response) (res CombinedRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response CombinedOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	switch resp.StatusCode / 100 {
	case 2:
		// Pattern 2XX.
		res, err := func() (res CombinedRes, err error) {
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf, err := io.ReadAll(resp.Body)
				if err != nil {
					return res, err
				}
				d := jx.DecodeBytes(buf)

				var response int
				if err := func() error {
					v, err := d.Int()
					response = int(v)
					if err != nil {
						return err
					}
					if err := d.Skip(); err != io.EOF {
						return errors.New("unexpected trailing data")
					}
					return nil
				}(); err != nil {
					err = &ogenerrors.DecodeBodyError{
						ContentType: ct,
						Body:        buf,
						Err:         err,
					}
					return res, err
				}
				return &Combined2XXStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 2XX (code %d)", resp.StatusCode)
		}
		return res, nil
	case 5:
		// Pattern 5XX.
		res, err := func() (res CombinedRes, err error) {
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf, err := io.ReadAll(resp.Body)
				if err != nil {
					return res, err
				}
				d := jx.DecodeBytes(buf)

				var response bool
				if err := func() error {
					v, err := d.Bool()
					response = bool(v)
					if err != nil {
						return err
					}
					if err := d.Skip(); err != io.EOF {
						return errors.New("unexpected trailing data")
					}
					return nil
				}(); err != nil {
					err = &ogenerrors.DecodeBodyError{
						ContentType: ct,
						Body:        buf,
						Err:         err,
					}
					return res, err
				}
				return &Combined5XXStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 5XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	// Default response.
	res, err := func() (res CombinedRes, err error) {
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response []string
			if err := func() error {
				response = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					response = append(response, elem)
					return nil
				}); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if response == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &CombinedDefStatusCode{
				StatusCode: resp.StatusCode,
				Response:   response,
			}, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}()
	if err != nil {
		return res, errors.Wrapf(err, "default (code %d)", resp.StatusCode)
	}
	return res, nil
}

func decodeHeaders200Response(resp *http.Response) (res *Headers200OK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		var wrapper Headers200OK
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "X-Test-Header" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Test-Header",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapper.XTestHeader = c
						return nil
					}); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Test-Header header")
			}
		}
		return &wrapper, nil
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeHeadersCombinedResponse(resp *http.Response) (res HeadersCombinedRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		var wrapper HeadersCombinedOK
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "X-Test-Header" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Test-Header",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapper.XTestHeader = c
						return nil
					}); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Test-Header header")
			}
		}
		return &wrapper, nil
	}
	switch resp.StatusCode / 100 {
	case 4:
		// Pattern 4XX.
		res, err := func() (res HeadersCombinedRes, err error) {
			var wrapper HeadersCombined4XX
			wrapper.StatusCode = resp.StatusCode
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "X-Test-Header" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Test-Header",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							wrapper.XTestHeader = c
							return nil
						}); err != nil {
							return err
						}
					} else {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Test-Header header")
				}
			}
			return &wrapper, nil
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 4XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	// Default response.
	res, err := func() (res HeadersCombinedRes, err error) {
		var wrapper HeadersCombinedDef
		wrapper.StatusCode = resp.StatusCode
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "X-Test-Header" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Test-Header",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapper.XTestHeader = c
						return nil
					}); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Test-Header header")
			}
		}
		return &wrapper, nil
	}()
	if err != nil {
		return res, errors.Wrapf(err, "default (code %d)", resp.StatusCode)
	}
	return res, nil
}

func decodeHeadersDefaultResponse(resp *http.Response) (res *HeadersDefaultDef, _ error) {
	// Default response.
	res, err := func() (res *HeadersDefaultDef, err error) {
		var wrapper HeadersDefaultDef
		wrapper.StatusCode = resp.StatusCode
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "X-Test-Header" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Test-Header",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapper.XTestHeader = c
						return nil
					}); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Test-Header header")
			}
		}
		return &wrapper, nil
	}()
	if err != nil {
		return res, errors.Wrapf(err, "default (code %d)", resp.StatusCode)
	}
	return res, nil
}

func decodeHeadersJSONResponse(resp *http.Response) (res *HeadersJSONOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		var wrapper HeadersJSONOK
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "X-Json-Custom-Header" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Json-Custom-Header",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}
						if err := func(d *jx.Decoder) error {
							v, err := d.RawAppend(nil)
							wrapper.XJSONCustomHeader = jx.Raw(v)
							if err != nil {
								return err
							}
							return nil
						}(jx.DecodeStr(val)); err != nil {
							return err
						}
						return nil
					}); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Json-Custom-Header header")
			}
		}
		// Parse "X-Json-Header" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Json-Header",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}
						if err := func(d *jx.Decoder) error {
							if err := wrapper.XJSONHeader.Decode(d); err != nil {
								return err
							}
							return nil
						}(jx.DecodeStr(val)); err != nil {
							return err
						}
						return nil
					}); err != nil {
						return err
					}
					if err := func() error {
						if err := wrapper.XJSONHeader.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Json-Header header")
			}
		}
		return &wrapper, nil
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeHeadersPatternResponse(resp *http.Response) (res *HeadersPattern4XX, _ error) {
	switch resp.StatusCode / 100 {
	case 4:
		// Pattern 4XX.
		res, err := func() (res *HeadersPattern4XX, err error) {
			var wrapper HeadersPattern4XX
			wrapper.StatusCode = resp.StatusCode
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "X-Test-Header" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Test-Header",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							wrapper.XTestHeader = c
							return nil
						}); err != nil {
							return err
						}
					} else {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Test-Header header")
				}
			}
			return &wrapper, nil
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 4XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeIntersectPatternCodeResponse(resp *http.Response) (res IntersectPatternCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response IntersectPatternCodeOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	switch resp.StatusCode / 100 {
	case 2:
		// Pattern 2XX.
		res, err := func() (res IntersectPatternCodeRes, err error) {
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf, err := io.ReadAll(resp.Body)
				if err != nil {
					return res, err
				}
				d := jx.DecodeBytes(buf)

				var response int
				if err := func() error {
					v, err := d.Int()
					response = int(v)
					if err != nil {
						return err
					}
					if err := d.Skip(); err != io.EOF {
						return errors.New("unexpected trailing data")
					}
					return nil
				}(); err != nil {
					err = &ogenerrors.DecodeBodyError{
						ContentType: ct,
						Body:        buf,
						Err:         err,
					}
					return res, err
				}
				return &IntersectPatternCode2XXStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 2XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeMultipleGenericResponsesResponse(resp *http.Response) (res MultipleGenericResponsesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response NilInt
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 201:
		// Code 201.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response NilString
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeOctetStreamBinaryStringSchemaResponse(resp *http.Response) (res OctetStreamBinaryStringSchemaOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/octet-stream":
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := OctetStreamBinaryStringSchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeOctetStreamEmptySchemaResponse(resp *http.Response) (res OctetStreamEmptySchemaOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/octet-stream":
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := OctetStreamEmptySchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeOptionalHeadersResponse(resp *http.Response) (res *OptionalHeadersOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		var wrapper OptionalHeadersOK
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "X-Optional" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Optional",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						var wrapperDotXOptionalVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							wrapperDotXOptionalVal = c
							return nil
						}(); err != nil {
							return err
						}
						wrapper.XOptional.SetTo(wrapperDotXOptionalVal)
						return nil
					}); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Optional header")
			}
		}
		// Parse "X-Required" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "X-Required",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						wrapper.XRequired = c
						return nil
					}); err != nil {
						return err
					}
				} else {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse X-Required header")
			}
		}
		return &wrapper, nil
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeStreamJSONResponse(resp *http.Response) (res StreamJSONRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			d := jx.Decode(resp.Body, -1)

			var response QueryData
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response Error
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

func decodeTextPlainBinaryStringSchemaResponse(resp *http.Response) (res TextPlainBinaryStringSchemaOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "text/plain":
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := TextPlainBinaryStringSchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCodeWithResponse(resp)
}

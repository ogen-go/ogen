// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		AnyContentTypeBinaryStringSchema: ogenreflect.RuntimeOperation{
			Name: "AnyContentTypeBinaryStringSchema",
			ID:   "anyContentTypeBinaryStringSchema",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AnyContentTypeBinaryStringSchemaOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(AnyContentTypeBinaryStringSchemaOK)).Elem(),
							},
						},
					},
				},
			},
		},
		AnyContentTypeBinaryStringSchemaDefault: ogenreflect.RuntimeOperation{
			Name: "AnyContentTypeBinaryStringSchemaDefault",
			ID:   "anyContentTypeBinaryStringSchemaDefault",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AnyContentTypeBinaryStringSchemaDefaultDefStatusCode)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(AnyContentTypeBinaryStringSchemaDefaultDefStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		Combined: ogenreflect.RuntimeOperation{
			Name: "Combined",
			ID:   "combined",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CombinedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(CombinedType)).Elem(),
							Name:     "type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CombinedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CombinedOK)).Elem(),
						reflect.TypeOf(new(*Combined2XXStatusCode)).Elem(),
						reflect.TypeOf(new(*Combined5XXStatusCode)).Elem(),
						reflect.TypeOf(new(*CombinedDefStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CombinedOK)).Elem(),
							},
						},
						"2XX": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Combined2XXStatusCode)).Elem(),
							},
						},
						"5XX": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Combined5XXStatusCode)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CombinedDefStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		Headers200: ogenreflect.RuntimeOperation{
			Name: "Headers200",
			ID:   "headers200",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Headers200OK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"TestHeader": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(string)).Elem(),
									Name:     "TestHeader",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		HeadersCombined: ogenreflect.RuntimeOperation{
			Name: "HeadersCombined",
			ID:   "headersCombined",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(HeadersCombinedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(HeadersCombinedType)).Elem(),
							Name:     "type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(HeadersCombinedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*HeadersCombinedOK)).Elem(),
						reflect.TypeOf(new(*HeadersCombined4XX)).Elem(),
						reflect.TypeOf(new(*HeadersCombinedDef)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"TestHeader": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(string)).Elem(),
									Name:     "TestHeader",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
						"4XX": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"TestHeader": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(string)).Elem(),
									Name:     "TestHeader",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"TestHeader": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(string)).Elem(),
									Name:     "TestHeader",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		HeadersDefault: ogenreflect.RuntimeOperation{
			Name: "HeadersDefault",
			ID:   "headersDefault",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(HeadersDefaultDef)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"TestHeader": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(string)).Elem(),
									Name:     "TestHeader",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		HeadersJSON: ogenreflect.RuntimeOperation{
			Name: "HeadersJSON",
			ID:   "headersJSON",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(HeadersJSONOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"X-JSON-Custom-Header": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(jx.Raw)).Elem(),
									Name:     "X-JSON-Custom-Header",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
								"X-JSON-Header": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(User)).Elem(),
									Name:     "X-JSON-Header",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		HeadersPattern: ogenreflect.RuntimeOperation{
			Name: "HeadersPattern",
			ID:   "headersPattern",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(HeadersPattern4XX)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"4XX": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"TestHeader": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(string)).Elem(),
									Name:     "TestHeader",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: true,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		IntersectPatternCode: ogenreflect.RuntimeOperation{
			Name: "IntersectPatternCode",
			ID:   "intersectPatternCode",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IntersectPatternCodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "code",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "code",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IntersectPatternCodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IntersectPatternCodeOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*IntersectPatternCode2XXStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IntersectPatternCodeOKApplicationJSON)).Elem(),
							},
						},
						"2XX": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IntersectPatternCode2XXStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		MultipleGenericResponses: ogenreflect.RuntimeOperation{
			Name: "MultipleGenericResponses",
			ID:   "multipleGenericResponses",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MultipleGenericResponsesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*NilInt)).Elem(),
						reflect.TypeOf(new(*NilString)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(NilInt)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(NilString)).Elem(),
							},
						},
					},
				},
			},
		},
		OctetStreamBinaryStringSchema: ogenreflect.RuntimeOperation{
			Name: "OctetStreamBinaryStringSchema",
			ID:   "octetStreamBinaryStringSchema",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OctetStreamBinaryStringSchemaOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octet-stream": reflect.TypeOf(new(OctetStreamBinaryStringSchemaOK)).Elem(),
							},
						},
					},
				},
			},
		},
		OctetStreamEmptySchema: ogenreflect.RuntimeOperation{
			Name: "OctetStreamEmptySchema",
			ID:   "octetStreamEmptySchema",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OctetStreamEmptySchemaOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octet-stream": reflect.TypeOf(new(OctetStreamEmptySchemaOK)).Elem(),
							},
						},
					},
				},
			},
		},
		TextPlainBinaryStringSchema: ogenreflect.RuntimeOperation{
			Name: "TextPlainBinaryStringSchema",
			ID:   "textPlainBinaryStringSchema",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TextPlainBinaryStringSchemaOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"text/plain": reflect.TypeOf(new(TextPlainBinaryStringSchemaOK)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	AnyContentTypeBinaryStringSchema        ogenreflect.RuntimeOperation
	AnyContentTypeBinaryStringSchemaDefault ogenreflect.RuntimeOperation
	Combined                                ogenreflect.RuntimeOperation
	Headers200                              ogenreflect.RuntimeOperation
	HeadersCombined                         ogenreflect.RuntimeOperation
	HeadersDefault                          ogenreflect.RuntimeOperation
	HeadersJSON                             ogenreflect.RuntimeOperation
	HeadersPattern                          ogenreflect.RuntimeOperation
	IntersectPatternCode                    ogenreflect.RuntimeOperation
	MultipleGenericResponses                ogenreflect.RuntimeOperation
	OctetStreamBinaryStringSchema           ogenreflect.RuntimeOperation
	OctetStreamEmptySchema                  ogenreflect.RuntimeOperation
	TextPlainBinaryStringSchema             ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "AnyContentTypeBinaryStringSchema":
		return p.AnyContentTypeBinaryStringSchema, true
	case "AnyContentTypeBinaryStringSchemaDefault":
		return p.AnyContentTypeBinaryStringSchemaDefault, true
	case "Combined":
		return p.Combined, true
	case "Headers200":
		return p.Headers200, true
	case "HeadersCombined":
		return p.HeadersCombined, true
	case "HeadersDefault":
		return p.HeadersDefault, true
	case "HeadersJSON":
		return p.HeadersJSON, true
	case "HeadersPattern":
		return p.HeadersPattern, true
	case "IntersectPatternCode":
		return p.IntersectPatternCode, true
	case "MultipleGenericResponses":
		return p.MultipleGenericResponses, true
	case "OctetStreamBinaryStringSchema":
		return p.OctetStreamBinaryStringSchema, true
	case "OctetStreamEmptySchema":
		return p.OctetStreamEmptySchema, true
	case "TextPlainBinaryStringSchema":
		return p.TextPlainBinaryStringSchema, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "anyContentTypeBinaryStringSchema":
		return p.AnyContentTypeBinaryStringSchema, true
	case "anyContentTypeBinaryStringSchemaDefault":
		return p.AnyContentTypeBinaryStringSchemaDefault, true
	case "combined":
		return p.Combined, true
	case "headers200":
		return p.Headers200, true
	case "headersCombined":
		return p.HeadersCombined, true
	case "headersDefault":
		return p.HeadersDefault, true
	case "headersJSON":
		return p.HeadersJSON, true
	case "headersPattern":
		return p.HeadersPattern, true
	case "intersectPatternCode":
		return p.IntersectPatternCode, true
	case "multipleGenericResponses":
		return p.MultipleGenericResponses, true
	case "octetStreamBinaryStringSchema":
		return p.OctetStreamBinaryStringSchema, true
	case "octetStreamEmptySchema":
		return p.OctetStreamEmptySchema, true
	case "textPlainBinaryStringSchema":
		return p.TextPlainBinaryStringSchema, true
	default:
		return op, false
	}
}

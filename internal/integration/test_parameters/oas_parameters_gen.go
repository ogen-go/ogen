// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ComplicatedParameterNameGetParams is parameters of GET /complicatedParameterName operation.
type ComplicatedParameterNameGetParams struct {
	Eq       string
	Plus     string
	Question string
	And      string
	Percent  string
}

func unpackComplicatedParameterNameGetParams(packed middleware.Parameters) (params ComplicatedParameterNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "=",
			In:   "query",
		}
		params.Eq = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "+",
			In:   "query",
		}
		params.Plus = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "question?",
			In:   "query",
		}
		params.Question = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "and&",
			In:   "query",
		}
		params.And = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "percent%",
			In:   "query",
		}
		params.Percent = packed[key].(string)
	}
	return params
}

func decodeComplicatedParameterNameGetParams(args [0]string, r *http.Request) (params ComplicatedParameterNameGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: =.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "=",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Eq = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "=",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: +.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "+",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Plus = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "+",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: question?.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "question?",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Question = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "question?",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: and&.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "and&",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.And = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "and&",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: percent%.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "percent%",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Percent = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "percent%",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ContentParametersParams is parameters of contentParameters operation.
type ContentParametersParams struct {
	Query   User
	Path    User
	XHeader User
	Cookie  User
}

func unpackContentParametersParams(packed middleware.Parameters) (params ContentParametersParams) {
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(User)
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.Path = packed[key].(User)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Header",
			In:   "header",
		}
		params.XHeader = packed[key].(User)
	}
	{
		key := middleware.ParameterKey{
			Name: "cookie",
			In:   "cookie",
		}
		params.Cookie = packed[key].(User)
	}
	return params
}

func decodeContentParametersParams(args [1]string, r *http.Request) (params ContentParametersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	c := uri.NewCookieDecoder(r)
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}
				if err := func(d *jx.Decoder) error {
					if err := params.Query.Decode(d); err != nil {
						return err
					}
					return nil
				}(jx.DecodeStr(val)); err != nil {
					return err
				}
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Query.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: path.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}
				if err := func(d *jx.Decoder) error {
					if err := params.Path.Decode(d); err != nil {
						return err
					}
					return nil
				}(jx.DecodeStr(val)); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Path.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Header.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Header",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}
				if err := func(d *jx.Decoder) error {
					if err := params.XHeader.Decode(d); err != nil {
						return err
					}
					return nil
				}(jx.DecodeStr(val)); err != nil {
					return err
				}
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.XHeader.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Header",
			In:   "header",
			Err:  err,
		}
	}
	// Decode cookie: cookie.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "cookie",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}
				if err := func(d *jx.Decoder) error {
					if err := params.Cookie.Decode(d); err != nil {
						return err
					}
					return nil
				}(jx.DecodeStr(val)); err != nil {
					return err
				}
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Cookie.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cookie",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// CookieParameterParams is parameters of cookieParameter operation.
type CookieParameterParams struct {
	Value string
}

func unpackCookieParameterParams(packed middleware.Parameters) (params CookieParameterParams) {
	{
		key := middleware.ParameterKey{
			Name: "value",
			In:   "cookie",
		}
		params.Value = packed[key].(string)
	}
	return params
}

func decodeCookieParameterParams(args [0]string, r *http.Request) (params CookieParameterParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: value.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "value",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Value = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "value",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// HeaderParameterParams is parameters of headerParameter operation.
type HeaderParameterParams struct {
	XAuthToken string
}

func unpackHeaderParameterParams(packed middleware.Parameters) (params HeaderParameterParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Auth-Token",
			In:   "header",
		}
		params.XAuthToken = packed[key].(string)
	}
	return params
}

func decodeHeaderParameterParams(args [0]string, r *http.Request) (params HeaderParameterParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Auth-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Auth-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAuthToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Auth-Token",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// ObjectQueryParameterParams is parameters of objectQueryParameter operation.
type ObjectQueryParameterParams struct {
	FormObject OptObjectQueryParameterFormObject
	DeepObject OptObjectQueryParameterDeepObject
}

func unpackObjectQueryParameterParams(packed middleware.Parameters) (params ObjectQueryParameterParams) {
	{
		key := middleware.ParameterKey{
			Name: "formObject",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FormObject = v.(OptObjectQueryParameterFormObject)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "deepObject",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DeepObject = v.(OptObjectQueryParameterDeepObject)
		}
	}
	return params
}

func decodeObjectQueryParameterParams(args [0]string, r *http.Request) (params ObjectQueryParameterParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: formObject.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "formObject",
			Style:   uri.QueryStyleForm,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{"min", true}, {"max", true}, {"filter", true}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFormObjectVal ObjectQueryParameterFormObject
				if err := func() error {
					return paramsDotFormObjectVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.FormObject.SetTo(paramsDotFormObjectVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "formObject",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: deepObject.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "deepObject",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{"min", true}, {"max", true}, {"filter", true}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeepObjectVal ObjectQueryParameterDeepObject
				if err := func() error {
					return paramsDotDeepObjectVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.DeepObject.SetTo(paramsDotDeepObjectVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "deepObject",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SameNameParams is parameters of sameName operation.
type SameNameParams struct {
	pathPath  string
	queryPath string
}

func unpackSameNameParams(packed middleware.Parameters) (params SameNameParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "path",
		}
		params.pathPath = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		params.queryPath = packed[key].(string)
	}
	return params
}

func decodeSameNameParams(args [1]string, r *http.Request) (params SameNameParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: path.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.pathPath = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.queryPath = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

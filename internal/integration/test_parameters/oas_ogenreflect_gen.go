// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		ComplicatedParameterNameGet: ogenreflect.RuntimeOperation{
			Name: "ComplicatedParameterNameGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ComplicatedParameterNameGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "=",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "=",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "+",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "+",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "question?",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "question?",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "and&",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "and&",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "percent%",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "percent%",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ComplicatedParameterNameGetOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ContentQueryParameter: ogenreflect.RuntimeOperation{
			Name: "ContentQueryParameter",
			ID:   "contentQueryParameter",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ContentQueryParameterParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "param",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptContentQueryParameterParam)).Elem(),
							Name:     "param",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
		HeaderParameter: ogenreflect.RuntimeOperation{
			Name: "HeaderParameter",
			ID:   "headerParameter",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(HeaderParameterParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "x-auth-token",
							In:   "header",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "x-auth-token",
							In:       "header",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Hash)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Hash)).Elem(),
							},
						},
					},
				},
			},
		},
		ObjectQueryParameter: ogenreflect.RuntimeOperation{
			Name: "ObjectQueryParameter",
			ID:   "objectQueryParameter",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ObjectQueryParameterParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "formObject",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptObjectQueryParameterFormObject)).Elem(),
							Name:     "formObject",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "deepObject",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptObjectQueryParameterDeepObject)).Elem(),
							Name:     "deepObject",
							In:       "query",
							Style:    "deepObject",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ObjectQueryParameterOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ObjectQueryParameterOK)).Elem(),
							},
						},
					},
				},
			},
		},
		PathObjectParameter: ogenreflect.RuntimeOperation{
			Name: "PathObjectParameter",
			ID:   "pathObjectParameter",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PathObjectParameterParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "param",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(User)).Elem(),
							Name:     "param",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(User)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(User)).Elem(),
							},
						},
					},
				},
			},
		},
		SameName: ogenreflect.RuntimeOperation{
			Name: "SameName",
			ID:   "sameName",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SameNameParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(SameNameOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	ComplicatedParameterNameGet ogenreflect.RuntimeOperation
	ContentQueryParameter       ogenreflect.RuntimeOperation
	HeaderParameter             ogenreflect.RuntimeOperation
	ObjectQueryParameter        ogenreflect.RuntimeOperation
	PathObjectParameter         ogenreflect.RuntimeOperation
	SameName                    ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "ComplicatedParameterNameGet":
		return p.ComplicatedParameterNameGet, true
	case "ContentQueryParameter":
		return p.ContentQueryParameter, true
	case "HeaderParameter":
		return p.HeaderParameter, true
	case "ObjectQueryParameter":
		return p.ObjectQueryParameter, true
	case "PathObjectParameter":
		return p.PathObjectParameter, true
	case "SameName":
		return p.SameName, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "contentQueryParameter":
		return p.ContentQueryParameter, true
	case "headerParameter":
		return p.HeaderParameter, true
	case "objectQueryParameter":
		return p.ObjectQueryParameter, true
	case "pathObjectParameter":
		return p.PathObjectParameter, true
	case "sameName":
		return p.SameName, true
	default:
		return op, false
	}
}

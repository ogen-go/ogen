// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *Product) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := validate.ValidateWith("cel", s.Name, "size(value) >= 3 && size(value) <= 100"); err != nil {
			return errors.Wrap(err, "cel")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Price)); err != nil {
			return errors.Wrap(err, "float")
		}
		if err := validate.ValidateWith("cel", s.Price, "value > 0.0 && value < 10000.0"); err != nil {
			return errors.Wrap(err, "cel")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		if s.Categories == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Categories {
			if err := func() error {
				if err := validate.ValidateWith("cel", elem, "size(value) > 0"); err != nil {
					return errors.Wrap(err, "cel")
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		if err := validate.ValidateWith("cel", s.Categories, "size(value) > 0 && size(value) <= 10"); err != nil {
			return errors.Wrap(err, "cel")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "categories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *User) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	// Object-level pluggable validation
	if err := func() error {
		if err := validate.ValidateWith("cel", s, "has(value.name) && has(value.age) && has(value.email) && (value.age < 21 ? size(value.name) > 5 : true)"); err != nil {
			return errors.Wrap(err, "cel")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "object",
			Error: err,
		})
	}
	if err := func() error {
		if err := validate.ValidateWith("cel", s.Name, "size(value) > 2 && size(value) < 50"); err != nil {
			return errors.Wrap(err, "cel")
		}
		if err := validate.ValidateWith("custom", s.Name, "test-string-validator"); err != nil {
			return errors.Wrap(err, "custom")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := validate.ValidateWith("cel", s.Age, "value >= 18 && value <= 120"); err != nil {
			return errors.Wrap(err, "cel")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "age",
			Error: err,
		})
	}
	if err := func() error {
		if err := validate.ValidateWith("cel", s.Email, "value.contains('@') && value.contains('.')"); err != nil {
			return errors.Wrap(err, "cel")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

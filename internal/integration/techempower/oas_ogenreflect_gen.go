// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		Caching: ogenreflect.RuntimeOperation{
			Name: "Caching",
			ID:   "Caching",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CachingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "count",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "count",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WorldObjects)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WorldObjects)).Elem(),
							},
						},
					},
				},
			},
		},
		DB: ogenreflect.RuntimeOperation{
			Name: "DB",
			ID:   "DB",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WorldObject)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WorldObject)).Elem(),
							},
						},
					},
				},
			},
		},
		JSON: ogenreflect.RuntimeOperation{
			Name: "JSON",
			ID:   "json",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(HelloWorld)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(HelloWorld)).Elem(),
							},
						},
					},
				},
			},
		},
		Queries: ogenreflect.RuntimeOperation{
			Name: "Queries",
			ID:   "Queries",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(QueriesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "queries",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "queries",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WorldObjects)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WorldObjects)).Elem(),
							},
						},
					},
				},
			},
		},
		Updates: ogenreflect.RuntimeOperation{
			Name: "Updates",
			ID:   "Updates",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UpdatesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "queries",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "queries",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WorldObjects)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WorldObjects)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	Caching ogenreflect.RuntimeOperation
	DB      ogenreflect.RuntimeOperation
	JSON    ogenreflect.RuntimeOperation
	Queries ogenreflect.RuntimeOperation
	Updates ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "Caching":
		return p.Caching, true
	case "DB":
		return p.DB, true
	case "JSON":
		return p.JSON, true
	case "Queries":
		return p.Queries, true
	case "Updates":
		return p.Updates, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "Caching":
		return p.Caching, true
	case "DB":
		return p.DB, true
	case "json":
		return p.JSON, true
	case "Queries":
		return p.Queries, true
	case "Updates":
		return p.Updates, true
	default:
		return op, false
	}
}

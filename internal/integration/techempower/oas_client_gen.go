// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// Caching invokes Caching operation.
	//
	// Test #7. The Caching test exercises the preferred in-memory or separate-process caching technology
	// for the platform or framework. For implementation simplicity, the requirements are very similar to
	// the multiple database-query test Test #3, but use a separate database table. The requirements are
	// quite generous, affording each framework fairly broad freedom to meet the requirements in the
	// manner that best represents the canonical non-distributed caching approach for the framework.
	// (Note: a distributed caching test type could be added later.).
	//
	// GET /cached-worlds
	Caching(ctx context.Context, params CachingParams) (WorldObjects, error)
	// DB invokes DB operation.
	//
	// Test #2. The Single Database Query test exercises the framework's object-relational mapper (ORM),
	// random number generator, database driver, and database connection pool.
	//
	// GET /db
	DB(ctx context.Context) (*WorldObject, error)
	// JSON invokes json operation.
	//
	// Test #1. The JSON Serialization test exercises the framework fundamentals including keep-alive
	// support, request routing, request header parsing, object instantiation, JSON serialization,
	// response header generation, and request count throughput.
	//
	// GET /json
	JSON(ctx context.Context) (*HelloWorld, error)
	// Queries invokes Queries operation.
	//
	// Test #3. The Multiple Database Queries test is a variation of Test #2 and also uses the World
	// table. Multiple rows are fetched to more dramatically punish the database driver and connection
	// pool. At the highest queries-per-request tested (20), this test demonstrates all frameworks'
	// convergence toward zero requests-per-second as database activity increases.
	//
	// GET /queries
	Queries(ctx context.Context, params QueriesParams) (WorldObjects, error)
	// Updates invokes Updates operation.
	//
	// Test #5. The Database Updates test is a variation of Test #3 that exercises the ORM's persistence
	// of objects and the database driver's performance at running UPDATE statements or similar. The
	// spirit of this test is to exercise a variable number of read-then-write style database operations.
	//
	// GET /updates
	Updates(ctx context.Context, params UpdatesParams) (WorldObjects, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// Caching invokes Caching operation.
//
// Test #7. The Caching test exercises the preferred in-memory or separate-process caching technology
// for the platform or framework. For implementation simplicity, the requirements are very similar to
// the multiple database-query test Test #3, but use a separate database table. The requirements are
// quite generous, affording each framework fairly broad freedom to meet the requirements in the
// manner that best represents the canonical non-distributed caching approach for the framework.
// (Note: a distributed caching test type could be added later.).
//
// GET /cached-worlds
func (c *Client) Caching(ctx context.Context, params CachingParams) (WorldObjects, error) {
	res, err := c.sendCaching(ctx, params)
	return res, err
}

func (c *Client) sendCaching(ctx context.Context, params CachingParams) (res WorldObjects, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("Caching"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/cached-worlds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "Caching",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/cached-worlds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "count" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int64ToString(params.Count))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeCachingResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DB invokes DB operation.
//
// Test #2. The Single Database Query test exercises the framework's object-relational mapper (ORM),
// random number generator, database driver, and database connection pool.
//
// GET /db
func (c *Client) DB(ctx context.Context) (*WorldObject, error) {
	res, err := c.sendDB(ctx)
	return res, err
}

func (c *Client) sendDB(ctx context.Context) (res *WorldObject, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("DB"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/db"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "DB",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/db"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeDBResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// JSON invokes json operation.
//
// Test #1. The JSON Serialization test exercises the framework fundamentals including keep-alive
// support, request routing, request header parsing, object instantiation, JSON serialization,
// response header generation, and request count throughput.
//
// GET /json
func (c *Client) JSON(ctx context.Context) (*HelloWorld, error) {
	res, err := c.sendJSON(ctx)
	return res, err
}

func (c *Client) sendJSON(ctx context.Context) (res *HelloWorld, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("json"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/json"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "JSON",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/json"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeJSONResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Queries invokes Queries operation.
//
// Test #3. The Multiple Database Queries test is a variation of Test #2 and also uses the World
// table. Multiple rows are fetched to more dramatically punish the database driver and connection
// pool. At the highest queries-per-request tested (20), this test demonstrates all frameworks'
// convergence toward zero requests-per-second as database activity increases.
//
// GET /queries
func (c *Client) Queries(ctx context.Context, params QueriesParams) (WorldObjects, error) {
	res, err := c.sendQueries(ctx, params)
	return res, err
}

func (c *Client) sendQueries(ctx context.Context, params QueriesParams) (res WorldObjects, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("Queries"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/queries"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "Queries",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/queries"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "queries" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "queries",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int64ToString(params.Queries))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeQueriesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Updates invokes Updates operation.
//
// Test #5. The Database Updates test is a variation of Test #3 that exercises the ORM's persistence
// of objects and the database driver's performance at running UPDATE statements or similar. The
// spirit of this test is to exercise a variable number of read-then-write style database operations.
//
// GET /updates
func (c *Client) Updates(ctx context.Context, params UpdatesParams) (WorldObjects, error) {
	res, err := c.sendUpdates(ctx, params)
	return res, err
}

func (c *Client) sendUpdates(ctx context.Context, params UpdatesParams) (res WorldObjects, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("Updates"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/updates"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "Updates",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/updates"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "queries" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "queries",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int64ToString(params.Queries))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeUpdatesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

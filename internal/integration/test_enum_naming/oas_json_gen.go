// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/validate"
)

// Encode encodes PascalExceptionStrat as json.
func (s PascalExceptionStrat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PascalExceptionStrat from json.
func (s *PascalExceptionStrat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PascalExceptionStrat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PascalExceptionStrat(v) {
	case PascalExceptionStrat1:
		*s = PascalExceptionStrat1
	case PascalExceptionStratMinus2:
		*s = PascalExceptionStratMinus2
	default:
		*s = PascalExceptionStrat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PascalExceptionStrat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PascalExceptionStrat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PascalSpecialStrat as json.
func (s PascalSpecialStrat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PascalSpecialStrat from json.
func (s *PascalSpecialStrat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PascalSpecialStrat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PascalSpecialStrat(v) {
	case PascalSpecialStrat2Plus2:
		*s = PascalSpecialStrat2Plus2
	case PascalSpecialStrat2Minus2:
		*s = PascalSpecialStrat2Minus2
	default:
		*s = PascalSpecialStrat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PascalSpecialStrat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PascalSpecialStrat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PascalStrat as json.
func (s PascalStrat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PascalStrat from json.
func (s *PascalStrat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PascalStrat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PascalStrat(v) {
	case PascalStratInSync:
		*s = PascalStratInSync
	case PascalStratOutOfSync:
		*s = PascalStratOutOfSync
	default:
		*s = PascalStrat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PascalStrat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PascalStrat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ProbeLivenessOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ProbeLivenessOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("VeryBadEnum")
		s.VeryBadEnum.Encode(e)
	}
	{
		e.FieldStart("PascalStrat")
		s.PascalStrat.Encode(e)
	}
	{
		e.FieldStart("PascalSpecialStrat")
		s.PascalSpecialStrat.Encode(e)
	}
	{
		e.FieldStart("PascalExceptionStrat")
		s.PascalExceptionStrat.Encode(e)
	}
}

var jsonFieldsNameOfProbeLivenessOK = [4]string{
	0: "VeryBadEnum",
	1: "PascalStrat",
	2: "PascalSpecialStrat",
	3: "PascalExceptionStrat",
}

// Decode decodes ProbeLivenessOK from json.
func (s *ProbeLivenessOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProbeLivenessOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "VeryBadEnum":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.VeryBadEnum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VeryBadEnum\"")
			}
		case "PascalStrat":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PascalStrat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PascalStrat\"")
			}
		case "PascalSpecialStrat":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.PascalSpecialStrat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PascalSpecialStrat\"")
			}
		case "PascalExceptionStrat":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.PascalExceptionStrat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PascalExceptionStrat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ProbeLivenessOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfProbeLivenessOK) {
					name = jsonFieldsNameOfProbeLivenessOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ProbeLivenessOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProbeLivenessOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VeryBadEnum as json.
func (s VeryBadEnum) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VeryBadEnum from json.
func (s *VeryBadEnum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VeryBadEnum to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VeryBadEnum(v) {
	case VeryBadEnum_0:
		*s = VeryBadEnum_0
	case VeryBadEnum_1:
		*s = VeryBadEnum_1
	case VeryBadEnum_2:
		*s = VeryBadEnum_2
	case VeryBadEnum_3:
		*s = VeryBadEnum_3
	case VeryBadEnum_4:
		*s = VeryBadEnum_4
	case VeryBadEnum_5:
		*s = VeryBadEnum_5
	case VeryBadEnum_6:
		*s = VeryBadEnum_6
	case VeryBadEnum_7:
		*s = VeryBadEnum_7
	case VeryBadEnum_8:
		*s = VeryBadEnum_8
	case VeryBadEnum_9:
		*s = VeryBadEnum_9
	case VeryBadEnum_10:
		*s = VeryBadEnum_10
	case VeryBadEnum_11:
		*s = VeryBadEnum_11
	case VeryBadEnum_12:
		*s = VeryBadEnum_12
	case VeryBadEnum_13:
		*s = VeryBadEnum_13
	case VeryBadEnum_14:
		*s = VeryBadEnum_14
	case VeryBadEnum_15:
		*s = VeryBadEnum_15
	case VeryBadEnum_16:
		*s = VeryBadEnum_16
	case VeryBadEnum_17:
		*s = VeryBadEnum_17
	case VeryBadEnum_18:
		*s = VeryBadEnum_18
	case VeryBadEnum_19:
		*s = VeryBadEnum_19
	case VeryBadEnum_20:
		*s = VeryBadEnum_20
	case VeryBadEnum_21:
		*s = VeryBadEnum_21
	case VeryBadEnum_22:
		*s = VeryBadEnum_22
	case VeryBadEnum_23:
		*s = VeryBadEnum_23
	case VeryBadEnum_24:
		*s = VeryBadEnum_24
	case VeryBadEnum_25:
		*s = VeryBadEnum_25
	case VeryBadEnum_26:
		*s = VeryBadEnum_26
	case VeryBadEnum_27:
		*s = VeryBadEnum_27
	case VeryBadEnum_28:
		*s = VeryBadEnum_28
	case VeryBadEnum_29:
		*s = VeryBadEnum_29
	case VeryBadEnum_30:
		*s = VeryBadEnum_30
	case VeryBadEnum_31:
		*s = VeryBadEnum_31
	case VeryBadEnum_32:
		*s = VeryBadEnum_32
	case VeryBadEnum_33:
		*s = VeryBadEnum_33
	case VeryBadEnum_34:
		*s = VeryBadEnum_34
	case VeryBadEnum_35:
		*s = VeryBadEnum_35
	case VeryBadEnum_36:
		*s = VeryBadEnum_36
	case VeryBadEnum_37:
		*s = VeryBadEnum_37
	case VeryBadEnum_38:
		*s = VeryBadEnum_38
	case VeryBadEnum_39:
		*s = VeryBadEnum_39
	case VeryBadEnum_40:
		*s = VeryBadEnum_40
	case VeryBadEnum_41:
		*s = VeryBadEnum_41
	case VeryBadEnum_42:
		*s = VeryBadEnum_42
	case VeryBadEnum_43:
		*s = VeryBadEnum_43
	case VeryBadEnum_44:
		*s = VeryBadEnum_44
	case VeryBadEnum_45:
		*s = VeryBadEnum_45
	case VeryBadEnum_46:
		*s = VeryBadEnum_46
	case VeryBadEnum_47:
		*s = VeryBadEnum_47
	case VeryBadEnum_48:
		*s = VeryBadEnum_48
	case VeryBadEnum_49:
		*s = VeryBadEnum_49
	case VeryBadEnum_50:
		*s = VeryBadEnum_50
	case VeryBadEnum_51:
		*s = VeryBadEnum_51
	case VeryBadEnum_52:
		*s = VeryBadEnum_52
	case VeryBadEnum_53:
		*s = VeryBadEnum_53
	case VeryBadEnum_54:
		*s = VeryBadEnum_54
	case VeryBadEnum_55:
		*s = VeryBadEnum_55
	case VeryBadEnum_56:
		*s = VeryBadEnum_56
	case VeryBadEnum_57:
		*s = VeryBadEnum_57
	case VeryBadEnum_58:
		*s = VeryBadEnum_58
	case VeryBadEnum_59:
		*s = VeryBadEnum_59
	case VeryBadEnum_60:
		*s = VeryBadEnum_60
	case VeryBadEnum_61:
		*s = VeryBadEnum_61
	case VeryBadEnum_62:
		*s = VeryBadEnum_62
	case VeryBadEnum_63:
		*s = VeryBadEnum_63
	case VeryBadEnum_64:
		*s = VeryBadEnum_64
	case VeryBadEnum_65:
		*s = VeryBadEnum_65
	case VeryBadEnum_66:
		*s = VeryBadEnum_66
	case VeryBadEnum_67:
		*s = VeryBadEnum_67
	case VeryBadEnum_68:
		*s = VeryBadEnum_68
	case VeryBadEnum_69:
		*s = VeryBadEnum_69
	case VeryBadEnum_70:
		*s = VeryBadEnum_70
	case VeryBadEnum_71:
		*s = VeryBadEnum_71
	case VeryBadEnum_72:
		*s = VeryBadEnum_72
	case VeryBadEnum_73:
		*s = VeryBadEnum_73
	case VeryBadEnum_74:
		*s = VeryBadEnum_74
	case VeryBadEnum_75:
		*s = VeryBadEnum_75
	case VeryBadEnum_76:
		*s = VeryBadEnum_76
	case VeryBadEnum_77:
		*s = VeryBadEnum_77
	case VeryBadEnum_78:
		*s = VeryBadEnum_78
	case VeryBadEnum_79:
		*s = VeryBadEnum_79
	case VeryBadEnum_80:
		*s = VeryBadEnum_80
	case VeryBadEnum_81:
		*s = VeryBadEnum_81
	case VeryBadEnum_82:
		*s = VeryBadEnum_82
	case VeryBadEnum_83:
		*s = VeryBadEnum_83
	case VeryBadEnum_84:
		*s = VeryBadEnum_84
	case VeryBadEnum_85:
		*s = VeryBadEnum_85
	case VeryBadEnum_86:
		*s = VeryBadEnum_86
	case VeryBadEnum_87:
		*s = VeryBadEnum_87
	case VeryBadEnum_88:
		*s = VeryBadEnum_88
	case VeryBadEnum_89:
		*s = VeryBadEnum_89
	case VeryBadEnum_90:
		*s = VeryBadEnum_90
	case VeryBadEnum_91:
		*s = VeryBadEnum_91
	case VeryBadEnum_92:
		*s = VeryBadEnum_92
	case VeryBadEnum_93:
		*s = VeryBadEnum_93
	case VeryBadEnum_94:
		*s = VeryBadEnum_94
	case VeryBadEnum_95:
		*s = VeryBadEnum_95
	case VeryBadEnum_96:
		*s = VeryBadEnum_96
	case VeryBadEnum_97:
		*s = VeryBadEnum_97
	case VeryBadEnum_98:
		*s = VeryBadEnum_98
	case VeryBadEnum_99:
		*s = VeryBadEnum_99
	case VeryBadEnum_100:
		*s = VeryBadEnum_100
	case VeryBadEnum_101:
		*s = VeryBadEnum_101
	case VeryBadEnum_102:
		*s = VeryBadEnum_102
	case VeryBadEnum_103:
		*s = VeryBadEnum_103
	case VeryBadEnum_104:
		*s = VeryBadEnum_104
	case VeryBadEnum_105:
		*s = VeryBadEnum_105
	default:
		*s = VeryBadEnum(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VeryBadEnum) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VeryBadEnum) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

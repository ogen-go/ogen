{{ define "validation" }}
{{ template "header" $ }}

{{- range $t := $.Types }}
{{- if $t.IsStruct }}
{{- if $t.NeedValidation }}
func (s *{{ $t.Struct.Name }}) Validate() error {
    var failures []validate.FieldError
    {{- range $f := $t.Struct.Fields }}
        {{- if $f.Spec }}
        {{- if $f.Type.NeedValidation }}
        if err := func() error {
            {{- template "validate" elem $f.Type (printf "s.%s" $f.Name) }}
        }(); err != nil {
            failures = append(failures, validate.FieldError{
				Name: "{{ $f.Spec.Name }}",
				Error: err,
			})
        }
        {{- end }}
        {{- else }}
        // Field '{{ $f.Name }}' is not defined in schema.
        {{- end }}
    {{- end }}
    if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
    return nil
}
{{- end }}
{{- end }}
{{- end }}

{{ end }}

{{- define "validate" }}
{{- $t := $.Type }}
{{- $var := $.Var }}
{{- $tmp := pascalMP $var "Tmp" }}
{{- if $t.NeedValidation }}
{{- if $t.IsPrimitive }}
    {{- if eq $t.Primitive.Type.String "string" }}
        {{- $v := $t.Primitive.StringValidation }}
        return (validate.String{
			MinLength:    {{ $v.MinLength }},
			MinLengthSet: {{ $v.MinLengthSet }},
			MaxLength:    {{ $v.MaxLength }},
			MaxLengthSet: {{ $v.MaxLengthSet }},
			Email:        {{ $v.Email }},
			Hostname:     {{ $v.Hostname }},
			{{- if $v.Regex }}
			Regex: regexp.MustCompile(`{{ $v.Regex }}`),
			{{- else }}
			Regex: nil,
			{{- end }}
		}).Validate(string({{ $.Var }}))
    {{- else }}
        {{- $v := $t.Primitive.IntValidation }}
        return (validate.Int{
			MinSet:         {{ $v.MinSet }},
			Min:            {{ $v.Min }},
			MaxSet:         {{ $v.MaxSet }},
			Max:            {{ $v.Max }},
			MinExclusive:   {{ $v.MinExclusive }},
			MaxExclusive:   {{ $v.MaxExclusive }},
		}).Validate(int64({{ $.Var }}))
    {{- end }}
{{- else if $t.IsEnum }}
    switch {{ $var }} {
    {{- range $variant := $t.Enum.EnumVariants }}
    case {{ $variant.ValueGo }}:
    {{- end }}
    default:
        return fmt.Errorf("invalid enum value: %v", {{ $var }})
    }
    return nil
{{- else if $t.IsArray }}
    {{- $v := $t.Array.Validation }}
    if err := (validate.Array{
        MinLength:    {{ $v.MinLength }},
        MinLengthSet: {{ $v.MinLengthSet }},
        MaxLength:    {{ $v.MaxLength }},
        MaxLengthSet: {{ $v.MaxLengthSet }},
	}).ValidateLength(len({{ $.Var }})); err != nil {
		return err
	}

    {{- if $t.Array.Item.NeedValidation }}
    var {{ $tmp }} []validate.FieldError
    for i, item := range {{ $var }} {
        if err := func() error {
            {{- template "validate" elem $t.Array.Item "item" }}
        }(); err != nil {
            {{ $tmp }} = append({{ $tmp }}, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
        }
    }
    if len({{ $tmp }}) > 0 {
		return &validate.Error{Fields: {{ $tmp }}}
	}
    {{- end }}
    return nil
{{- else if $t.IsAlias }}
    {{ $tmp }} := {{ $t.Alias.To.Go }}({{ $var }})
    {{- template "validate" elem $t.Alias.To $tmp }}
{{- else if $t.IsGeneric }}
    if {{ $tmp }}, ok := {{ $var }}.Get(); ok {
        {{- template "validate" elem $t.Generic.Of $tmp }}
    }
    return nil
{{- else if $t.IsPointer }}
    if {{ $var }} != nil {
        {{- template "validate" elem $t.Pointer.To (printf "(*%s)" $var) }}
    }
    return nil
{{- else if $t.IsStruct }}
    return {{ $var }}.Validate()
{{- else if $t.IsSum }}
    // TODO: oneOf validation.
    return nil
{{- else }}
    Unexpected kind: {{ $t.Kind }}
{{- end }}
{{- end }}
{{- end }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "schemas" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $_, $s := $.Types }}
{{- template "define_schema" $s }}
{{- end }}
{{- end }}

{{- define "define_schema" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}

{{- if $.Doc -}}
// {{ $.Doc }}
{{- end }}
{{- if $.Schema }}
	{{- if $.Schema.Ref }}
	// Ref: {{ $.Schema.Ref }}
	{{- end }}
{{- end }}

{{- /* Define struct */ -}}
{{- if $.IsStruct }}
{{- if eq (len $.Struct.Fields) 0 }}{{/* Blank struct */}}
type {{ $.Struct.Name }} struct{}
{{- else }}
type {{ $.Struct.Name }} struct {
{{- range $f := $.Struct.Fields }}
	{{ $f.Name }} {{ $f.Type.Go }} {{ if $f.Tag.JSON }}`json:"{{ $f.Tag.JSON }}"`{{ end }}
{{- end }}
}
{{- end }}
{{- range $_, $method := $.Struct.Methods }}
	func (*{{ $.Struct.Name }}) {{ $method }}() {}
{{- end }}
{{/* Define struct */}}

{{/* Define stream */}}
{{- else if $.IsStream }}
type {{ $.Stream.Name }} struct {
	Data io.Reader
}

func (s {{ $.Stream.Name }}) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

{{- range $method := $.Stream.Methods }}
	func (*{{ $.Stream.Name }}) {{ $method }}() {}
{{- end }}
{{/* Define stream */}}

{{/* Define alias */}}
{{- else if $.IsAlias }}
type {{ $.Alias.Name }} {{ $.Alias.To.Go }}

func (a *{{ $.Alias.Go }}) wrap(v {{ $.Alias.To.Go }}) { *a = {{ $.Go }}(v) }
func (a *{{ $.Alias.Go }}) unwrap() {{ $.Alias.To.Go }} { return {{ $.Alias.To.Go }}(*a) }

{{- range $_, $method := $.Alias.Methods }}
	func (*{{ $.Alias.Name }}) {{ $method }}() {}
{{- end }}
{{/* Define alias */}}

{{/* Define enum */}}
{{- else if $.IsEnum }}
type {{ $.Enum.Name }} {{ $.Enum.Type }}

const (
{{- range $variant := $.Enum.EnumVariants }}
{{ $variant.Name }} {{ $.Enum.Name }} = {{ $variant.ValueGo }}
{{- end }}
)
{{/* Define enum */}}
{{/* Define sum */}}
{{- else if $.IsSum }}
// {{ $.Sum.Name }} represents sum type.
type {{ $.Sum.Name }} struct {
	Type {{ $.Sum.Name }}Type // switch on this field
{{- range $s := $.Sum.SumOf }}
	{{ $s.MustName }} {{ $s.Go }}
{{- end }}
}

{{- range $_, $method := $.Sum.Methods }}
	func (*{{ $.Sum.Name }}) {{ $method }}() {}
{{- end }}

// {{ $.Sum.Name }}Type is oneOf type of {{ $.Sum.Name }}.
type {{ $.Sum.Name }}Type string

// Possible values for {{ $.Sum.Name }}Type.
const (
{{- range $s := $.Sum.SumOf }}
	{{ $s.MustName }}{{ $.Sum.Name }} {{ $.Sum.Name }}Type = "{{ $s.Go }}"
{{- end }}
)

{{- range $s := $.Sum.SumOf }}
// Is{{ $s.MustName }} reports whether {{ $.Sum.Name }} is {{ $s.Go }}.
func (s {{ $.Sum.Go }}) Is{{ $s.MustName }}() bool { return s.Type == {{ $s.MustName }}{{ $.Sum.Name }} }
{{- end }}

{{- range $s := $.Sum.SumOf }}
// Set{{ $s.MustName }} sets {{ $.Sum.Name }} to {{ $s.Go }}.
func (s *{{ $.Sum.Go }}) Set{{ $s.MustName }}(v {{ $s.Go }}) {
	s.Type = {{ $s.MustName }}{{ $.Sum.Name }}
	s.{{ $s.MustName }} = v
}

// Get{{ $s.MustName }} returns {{ $s.Go }} and true boolean if {{ $.Go }} is {{ $s.Go }}.
func (s {{ $.Go }}) Get{{ $s.MustName }}()(v {{ $s.Go }}, ok bool) {
	if !s.Is{{ $s.MustName }}() {
		return v, false
	}
	return s.{{ $s.MustName }}, true
}

// New{{ $s.MustName }}{{ $.Sum.Name }} returns new {{ $.Sum.Go }} from {{ $s.Go }}.
func New{{ $s.MustName }}{{ $.Sum.Name }}(v {{ $s.Go }}) {{ $.Sum.Go }} {
	var s {{ $.Sum.Name }}
	s.Set{{ $s.MustName }}(v)
	return s
}
{{- end }}
{{/* Define sum */}}
{{/* Define generic */}}
{{- else if $.IsGeneric }}
{{- $g := $.Generic.Of }}
{{- $v := $.Generic.Variant }}

// New{{ $.Generic.Name }} returns new {{ $.Generic.Name }} with value set to v.
func New{{ $.Generic.Name }}(v {{ $g.Go }}) {{ $.Generic.Name }} {
	return {{ $.Generic.Name }} {
		Value: v,
	{{- if $v.Optional }}
		Set: true,
	{{- end }}
	}
}

// {{ $.Generic.Name }} is{{ if $v.Optional }} optional{{ end }}{{ if $v.Nullable }} nullable{{ end }} {{ $g.Go }}.
type {{ $.Generic.Name }} struct {
	Value {{ $g.Go }}
{{- if $v.Optional }}
	Set bool
{{- end }}
{{- if $v.Nullable }}
	Null bool
{{- end }}
}

{{- if $v.Optional }}
// IsSet returns true if {{ $.Go }} was set.
func (o {{ $.Generic.Name }}) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *{{ $.Generic.Name }}) Reset() {
	var v {{ $g.Go }}
	o.Value = v
	o.Set = false
{{- if $v.Nullable }}
	o.Null = false
{{- end }}
}
{{- end }}

// SetTo sets value to v.
func (o *{{ $.Generic.Name }}) SetTo(v {{ $g.Go }}) {
{{- if $v.Optional }}
	o.Set = true
{{- end }}
{{- if $v.Nullable }}
	o.Null = false
{{- end }}
	o.Value = v
}

{{- if $v.Nullable  }}
// IsSet returns true if value is Null.
func (o {{ $.Generic.Name }}) IsNull() bool { return o.Null }
{{ end }}

// Get returns value and boolean that denotes whether value was set.
func (o {{ $.Generic.Name }}) Get() (v {{ $g.Go }}, ok bool) {
{{- if $v.Nullable }}
	if o.Null {
		return v, false
	}
{{- end }}
{{- if $v.Optional }}
	if !o.Set {
		return v, false
	}
{{- end }}
	return o.Value, true
}
{{/* end define generic */}}
{{- else }}
// Unexpected kind: {{ $.Kind }}
{{- end }}
{{- end }}

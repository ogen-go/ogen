{{- define "uri_encoders" }}
{{- template "header" $ }}

{{- range $t, $_ := $.URITypes }}
{{- if eq $t.Kind "struct" }}
func (v {{ $t.Go }}) encodeURI(e uri.Encoder) error {
	{{- range $f := $t.Fields }}
	{{- if $f.Spec }}
		if err := e.EncodeField("{{ $f.Spec.Name }}", func(e uri.Encoder) error {
			{{- template "encode_uri" elem $f.Type (printf "v.%s" $f.Name) }}
		}); err != nil {
			return errors.Wrap(err, `field {{ $f.Spec.Name }}`)
		}
	{{- end }}
	{{- end }}
	return nil
}

{{- end }}
{{- end }}
{{- end }}

{{- define "encode_uri" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
{{- $t := $.Type }}
{{- $var := $.Var }}
{{- if eq $t.Kind "primitive" }}
	return e.EncodeValue(conv.{{ $t.ToString }}({{ $var }}))
{{- else if eq $t.Kind "enum" }}
	return e.EncodeValue(conv.{{ $t.ToString }}({{ $t.Enum.Type.String }}({{ $var }})))
{{- else if eq $t.Kind "array" }}
	return e.EncodeArray(func(e uri.Encoder) error {
		for i, item := range {{ $var }} {
			if err := func() error {
				{{- template "encode_uri" elem $t.Array.Item "item" }}
			}(); err != nil {
				return errors.Wrapf(err, "[%d]", i)
			}
		}
		return nil
	})
{{- else if eq $t.Kind "alias" }}
	if unwrapped := {{ $t.Alias.To.Go }}({{ $var }}); true {
		{{- template "encode_uri" elem $t.Alias.To "unwrapped" }}
	}
	return nil
{{- else if eq $t.Kind "generic" }}
	if val, ok := {{ $var }}.Get(); ok {
		{{- template "encode_uri" elem $t.Generic.Of "val" }}
	}
	return nil
{{- else if eq $t.Kind "pointer" }}
	if v := {{ $var }}; v != nil {
		{{- template "encode_uri" elem $t.Pointer.To "(*v)" }}
	}
	return nil
{{- else if eq $t.Kind "struct" }}
	return {{ $var }}.encodeURI(e)
{{- else if eq $t.Kind "sum" }}
	switch t := {{ $var }}.Type; t {
	{{- range $of := $t.Sum.SumOf }}
	case {{ $of.MustName }}{{ $t.Name }}:
		{{- template "encode_uri" elem $of (printf "%s.%s" $var $of.MustName) }}
	{{- end }}
	default:
		panic(fmt.Sprintf("unexpected type: %T", t))
	}
{{- else }}
Unexpected kind {{ $t.Kind }}
{{- end }}
{{- end }}

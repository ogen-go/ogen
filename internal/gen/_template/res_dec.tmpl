{{ define "res_dec" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}{{/* Range over all methods */}}

func decode{{ $op.Name }}Response(resp *http.Response, span trace.Span) (res {{ $op.Response.Type.Go }}, err error) {
	switch resp.StatusCode {
	{{- range $statusCode, $response := $op.Response.StatusCode }}{{/* Range over responses */}}
	case {{ $statusCode }}:
		{{- template "decode_response" resp_elem $response (eq $op.Response.Type.Kind "interface") }}
	{{- end }}
	default:
		{{- if $op.Response.Default }}
			{{- template "decode_response" resp_elem $op.Response.Default (eq $op.Response.Type.Kind "interface") }}
		{{- else }}
			return res, errors.Errorf("unexpected statusCode: %d", resp.StatusCode)
		{{- end }}
	}
}

{{- end }}{{/* Range over all methods */}}
{{ end }}

{{- define "decode_response" }}
{{- $response := $.Response }}
{{- $ptr := $.Ptr }}
{{- if $response.NoContent }}{{/* Decode NoContent response */}}
	{{- if $response.Wrapped }}
		return {{ if $ptr }}&{{ end }}{{ $response.NoContent.MustName }}{
			StatusCode: resp.StatusCode,
		}, nil
	{{- else }}
		return {{ if $ptr }}&{{ end }}{{ $response.NoContent.MustName }}{}, nil
	{{- end }}
{{- else }}{{/* Decode content response */}}
	switch resp.Header.Get("Content-Type") {
	{{- range $contentType, $type := $response.Contents }}{{/* Range over contents */}}
	case "{{ $contentType }}":
		{{- if $contentType.JSON }}
			buf := getBuf()
			defer func() { putBuf(buf) }()
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			{{- if $response.Wrapped }}
				var response {{ ($type.MustField "Response").Type.Go }}
				if err := func() error {
					{{- template "decode_json" jx_elem
						($type.MustField "Response").Type
						"response"
						""
					}}
				}(); err != nil {
					return res, err
				}
				
				return {{ if $ptr }}&{{ end }}{{ $type.Go }}{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			{{- else }}
				var response {{ $type.Go }}
				if err := func() error {
					{{- template "decode_json" jx_elem $type "response" "" }}
				}(); err != nil {
					return res, err
				}

				return {{ if $ptr }}&{{ end }}response, nil
			{{- end }}
		{{- else if $type.IsStream }}
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			{{- if $response.Wrapped }}
				return {{ if $ptr }}&{{ end }}{{ $type.MustName }}{
					StatusCode: resp.StatusCode,
					Response:   {{ ($type.MustField "Response").Type.MustName }}{
						Data: bytes.NewReader(b),
					},
				}
			{{- else }}
				return {{ if $ptr }}&{{ end }}{{ $type.MustName }}{
					Data: bytes.NewReader(b),
				}, nil
			{{- end }}
		{{- else }}
			return res, errors.New("{{ $contentType }} decoder not implemented")
		{{- end }}
	{{- end }}{{/* Range over contents */}}
	default:
		return res, errors.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
	}
{{- end }}{{/* Decode content response */}}
{{- end }}
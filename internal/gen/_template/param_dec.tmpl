{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "param_dec" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}{{/* Range over methods */}}
{{ if $op.Params }}{{/* Check parameters existence */}}

func decode{{ $op.Name }}Params(r *http.Request) ({{ $op.Name }}Params, error) {
	var params {{ $op.Name }}Params
	{{- range $p := $op.Params }}{{/* Range params */}}
	// Decode param "{{ $p.Spec.Name }}" located in "{{ $p.Spec.In }}".
	{{- if eq $p.Spec.In "Query" }}{{/* Switch location */}}
	{
		values, ok := r.URL.Query()["{{ $p.Spec.Name }}"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values: values,
				Style: uri.QueryStyle{{ pascalMP $p.Spec.Style }},
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			})

			if err := func() error {
				{{- template "decode_uri" elem $p.Type  (printf "params.%s" $p.Name) }}
			}(); err != nil {
				return params, errors.Wrap(err, `parse parameter {{ $p.Spec.Name }} located in {{ lower $p.Spec.In }}`)
			}

			{{- if $p.Type.NeedValidation }}
			{{- /*
			
			if err := func() error {
				{{- template "validate" elem $p.Type (printf "params.%s" $p.Name) }}
			}(); err != nil {
				return params, errors.Wrap(err, `invalid parameter {{ $p.Spec.Name }} ({{ lower $p.Spec.In }}`)
			}

			*/}}
			{{- end }}
		} {{- if $p.Spec.Required }} else {
			return params, errors.New(`query parameter {{ $p.Spec.Name}} not specified`)
		} {{- end }}
	}
	{{- else if eq $p.Spec.In "Path" }}
	{
		param := chi.URLParam(r, "{{ $p.Spec.Name }}")
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param: "{{ $p.Spec.Name}}",
				Value: param,
				Style: uri.PathStyle{{ pascalMP $p.Spec.Style }},
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			})

			if err := func() error {
				{{- template "decode_uri" elem $p.Type (printf "params.%s" $p.Name) }}
			}(); err != nil {
				return params, err
			}
		} {{ if $p.Spec.Required }} else {
			return params, errors.New(`path parameter {{ $p.Spec.Name}} not specified`)
		} {{ end }}
	}
	{{- else if eq $p.Spec.In "Header" }}
	{
		param := r.Header.Get("{{ $p.Spec.Name }}")
		if len(param) > 0 {
			d := uri.NewHeaderDecoder(uri.HeaderDecoderConfig{
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			})

			if err := func() error {
				{{- template "decode_uri" elem $p.Type (printf "params.%s" $p.Name) }}
			}(); err != nil {
				return params, errors.Wrap(err, `parse {{ lower $p.Spec.In }}: param '{{ $p.Spec.Name }}`)
			}
		} {{ if $p.Spec.Required }} else {
			return params, errors.New(`header parameter {{ $p.Spec.Name}} not specified`)
		} {{ end }}
	}
	{{- else if eq $p.Spec.In "Cookie" }}
	{
		c, err := r.Cookie("{{ $p.Spec.Name }}")
		if err != nil {
			return params, errors.Wrap(err, `get cookie {{ $p.Spec.Name }}`)
		}

		param := c.Value
		if len(param) > 0 {
			v, err := conv.{{ $p.Type.FromString }}(param)
			if err != nil {
				return params, errors.Wrap(err, `parse {{ lower $p.Spec.In }}: param {{ $p.Spec.Name }}`)
			}

			params.{{ $p.Name }} = v
		} {{ if $p.Spec.Required }} else {
			return params, errors.New(`cookie parameter {{ $p.Spec.Name}} not specified`)
		} {{ end }}
	}
	{{- else }}
	unsupported parameter location: {{ $p.Spec.In }}
	{{- end }}{{/* Switch location */}}
	{{- end }}{{/* Range params */}}
	return params, nil
}

{{- end }}{{/* Check parameters existence */}}
{{- end }}{{/* Range over methods */}}
{{ end }}

{{ define "decode_param" }}
	{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}
	{{- if eq .Kind "array" }}
	rawParam, err := d.DecodeArray()
	{{- else }}
	rawParam, err := d.DecodeValue()
	{{- end }}
	if err != nil {
		return params, err
	}

	v, err := conv.{{ .FromString }}(rawParam)
	if err != nil {
		return params, err
	}
{{- end }}

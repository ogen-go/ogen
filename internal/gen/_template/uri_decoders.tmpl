{{- define "uri_decoders" }}
{{- template "header" $ }}

{{- range $t, $_ := $.URITypes }}
{{- if eq $t.Kind "struct" }}
func (v *{{ $t.Go }}) decodeURI(d uri.Decoder) error {
	if v == nil {
		return errors.New(`unable to decode {{ $t.Go }} to nil`)
	}
	return d.DecodeFields(func(name string, d uri.Decoder) error {
		switch name {
		{{- range $f := $t.Fields }}
		{{- if $f.Spec }}
		case "{{ $f.Spec.Name }}":
			{{- template "decode_uri" elem $f.Type (printf "v.%s" $f.Name) }}
		{{- end }}
		{{- end }}
		default:
			return errors.Errorf(`unexpected field %q`, name)
		}
	})
}

{{- end }}
{{- end }}

{{- end }}

{{- define "decode_uri" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
{{- $t := $.Type }}
{{- $var := $.Var }}
{{- if eq $t.Kind "primitive" }}
	s, err := d.DecodeValue()
	if err != nil {
		return err
	}

	c, err := conv.{{ $t.FromString }}(s)
	if err != nil {
		return err
	}

	{{ $var }} = c
	return nil
{{- else if eq $t.Kind "enum" }}
	s, err := d.DecodeValue()
	if err != nil {
		return err
	}

	c, err := conv.{{ $t.FromString }}(s)
	if err != nil {
		return err
	}

	{{ $var }} = {{ $t.Go }}(c)
	return nil
{{- else if eq $t.Kind "array" }}
	return d.DecodeArray(func(d uri.Decoder) error {
		{{- $tmpVar := pascalMP (printf "%sItem" $var ) }}
		var {{ $tmpVar }} {{ $t.Array.Item.Go }}
		if err := func() error {
			{{- template "decode_uri" elem $t.Array.Item $tmpVar }}
		}(); err != nil {
			return err
		}
		{{ $var }} = append({{ $var }}, {{ $tmpVar }})
		return nil
	})
{{- else if eq $t.Kind "alias" }}
	{{- $tmpVar := pascalMP (printf "%sUnderlying" $var ) }}
	var {{ $tmpVar }} {{ $t.Alias.To.Go }}
	if err := func() error {
		{{- template "decode_uri" elem $t.Alias.To $tmpVar }}
	}(); err != nil {
		return err
	}
	{{ $var }} = {{ $t.Go }}({{ $tmpVar }})
	return nil
{{- else if eq $t.Kind "generic" }}
	{{- $tmpVar := pascalMP (printf "%sValue" $var ) }}
	var {{ $tmpVar }} {{ $t.Generic.Of.Go }}
	if err := func() error {
		{{- template "decode_uri" elem $t.Generic.Of $tmpVar }}
	}(); err != nil {
		return err
	}
	{{ $var }}.SetTo({{ $tmpVar }})
	return nil
{{- else if eq $t.Kind "pointer" }}
	{{- $tmpVar := pascalMP (printf "%sValue" $var ) }}
	var {{ $tmpVar }} {{ $t.Pointer.To.Go }}
	if err := func() error {
		{{- template "decode_uri" elem $t.Pointer.To $tmpVar }}
	}(); err != nil {
		return err
	}
	{{ $var }} = &{{ $tmpVar }}
	return nil
{{- else if eq $t.Kind "struct" }}
	return {{ $var }}.decodeURI(d)
{{- else if eq $t.Kind "sum" }}
	// sum not supported
	return nil
{{- else }}
Unexpected kind {{ $t.Kind }}
{{- end }}
{{- end }}

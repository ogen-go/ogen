{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "res_enc" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}{{/* Range over all methods */}}

func encode{{ $op.Name }}Response(response {{ $op.Response.Type.Go }}, w http.ResponseWriter, span trace.Span) error {
	{{- $typesCount := len $op.ListResponseTypes }}
	{{- if eq $typesCount 1 }}

	{{- range $info := $op.ListResponseTypes }}
		{{- template "respond" $info }}
	{{- end }}

	{{- else }}
	switch response := response.(type) {
	{{- range $info := $op.ListResponseTypes }}
	case *{{ $info.Type.MustName }}:
		{{- template "respond" $info }}
	{{- end }}
	default:
		return errors.Errorf(`{{ $op.Spec.Path}}: unexpected response type: %T`, response)
	}
	{{- end }}
}


{{- end }}{{/* Range over all methods */}}
{{ end }}

{{ define "respond" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/ir.ResponseInfo*/ -}}
{{- if not $.NoContent }}{{- /* Set content-type */}}
w.Header().Set("Content-Type", "{{ $.ContentType }}")
{{- end }}{{- /* Set content-type */}}

{{- if $.Default }}{{- /* Set status code */}}
w.WriteHeader(response.StatusCode)
{{- else }}
w.WriteHeader({{ $.StatusCode }})
{{- end }}{{- /* Set status code */}}

{{- if $.NoContent }}{{- /* Encode content */}}
return nil
{{- else if $.ContentType.JSON }}
e := jx.GetEncoder()
defer jx.PutEncoder(e)
{{- if $.Default }}
	{{- template "encode_json" jx_elem 
		($.Type.MustField "Response").Type
		"response.Response"
		""
	}}
{{- else }}
	{{- template "encode_json" jx_elem $.Type "response" "" }}
{{- end }}
if _, err := e.WriteTo(w); err != nil {
	return errors.Wrap(err, "write")
}

return nil
{{- else if $.Type.IsStream }}
if _, err := io.Copy(w, response); err != nil {
	return errors.Wrap(err, "write")
}

return nil
{{- else }}
return errors.New(`{{ $.ContentType }} encoder not implemented`)
{{- end }}{{- /* Encode content */ -}}
{{ end }}
